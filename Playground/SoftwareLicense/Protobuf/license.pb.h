// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: license.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_license_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_license_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_license_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_license_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_license_2eproto;
class PbLicense;
class PbLicenseDefaultTypeInternal;
extern PbLicenseDefaultTypeInternal _PbLicense_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::PbLicense* Arena::CreateMaybeMessage<::PbLicense>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PbLicense :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PbLicense) */ {
 public:
  PbLicense();
  virtual ~PbLicense();

  PbLicense(const PbLicense& from);
  PbLicense(PbLicense&& from) noexcept
    : PbLicense() {
    *this = ::std::move(from);
  }

  inline PbLicense& operator=(const PbLicense& from) {
    CopyFrom(from);
    return *this;
  }
  inline PbLicense& operator=(PbLicense&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PbLicense& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PbLicense* internal_default_instance() {
    return reinterpret_cast<const PbLicense*>(
               &_PbLicense_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PbLicense& a, PbLicense& b) {
    a.Swap(&b);
  }
  inline void Swap(PbLicense* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PbLicense* New() const final {
    return CreateMaybeMessage<PbLicense>(nullptr);
  }

  PbLicense* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PbLicense>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PbLicense& from);
  void MergeFrom(const PbLicense& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbLicense* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PbLicense";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_license_2eproto);
    return ::descriptor_table_license_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChecksumFieldNumber = 2,
    kVersionFieldNumber = 1,
    kNumTrunkPortsFieldNumber = 3,
    kNumNontrunkPortsFieldNumber = 4,
    kNumSerialPortsFieldNumber = 5,
    kNumBluetoothPortsFieldNumber = 6,
    kNumG5ModulesFieldNumber = 7,
  };
  // int64 checksum = 2;
  void clear_checksum();
  ::PROTOBUF_NAMESPACE_ID::int64 checksum() const;
  void set_checksum(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_checksum() const;
  void _internal_set_checksum(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num_trunk_ports = 3;
  void clear_num_trunk_ports();
  ::PROTOBUF_NAMESPACE_ID::int32 num_trunk_ports() const;
  void set_num_trunk_ports(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_trunk_ports() const;
  void _internal_set_num_trunk_ports(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num_nontrunk_ports = 4;
  void clear_num_nontrunk_ports();
  ::PROTOBUF_NAMESPACE_ID::int32 num_nontrunk_ports() const;
  void set_num_nontrunk_ports(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_nontrunk_ports() const;
  void _internal_set_num_nontrunk_ports(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num_serial_ports = 5;
  void clear_num_serial_ports();
  ::PROTOBUF_NAMESPACE_ID::int32 num_serial_ports() const;
  void set_num_serial_ports(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_serial_ports() const;
  void _internal_set_num_serial_ports(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num_bluetooth_ports = 6;
  void clear_num_bluetooth_ports();
  ::PROTOBUF_NAMESPACE_ID::int32 num_bluetooth_ports() const;
  void set_num_bluetooth_ports(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_bluetooth_ports() const;
  void _internal_set_num_bluetooth_ports(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num_g5_modules = 7;
  void clear_num_g5_modules();
  ::PROTOBUF_NAMESPACE_ID::int32 num_g5_modules() const;
  void set_num_g5_modules(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_g5_modules() const;
  void _internal_set_num_g5_modules(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PbLicense)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 checksum_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_trunk_ports_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_nontrunk_ports_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_serial_ports_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_bluetooth_ports_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_g5_modules_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_license_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PbLicense

// int32 version = 1;
inline void PbLicense::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbLicense::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbLicense::version() const {
  // @@protoc_insertion_point(field_get:PbLicense.version)
  return _internal_version();
}
inline void PbLicense::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
}
inline void PbLicense::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:PbLicense.version)
}

// int64 checksum = 2;
inline void PbLicense::clear_checksum() {
  checksum_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PbLicense::_internal_checksum() const {
  return checksum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PbLicense::checksum() const {
  // @@protoc_insertion_point(field_get:PbLicense.checksum)
  return _internal_checksum();
}
inline void PbLicense::_internal_set_checksum(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  checksum_ = value;
}
inline void PbLicense::set_checksum(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_checksum(value);
  // @@protoc_insertion_point(field_set:PbLicense.checksum)
}

// int32 num_trunk_ports = 3;
inline void PbLicense::clear_num_trunk_ports() {
  num_trunk_ports_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbLicense::_internal_num_trunk_ports() const {
  return num_trunk_ports_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbLicense::num_trunk_ports() const {
  // @@protoc_insertion_point(field_get:PbLicense.num_trunk_ports)
  return _internal_num_trunk_ports();
}
inline void PbLicense::_internal_set_num_trunk_ports(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_trunk_ports_ = value;
}
inline void PbLicense::set_num_trunk_ports(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_trunk_ports(value);
  // @@protoc_insertion_point(field_set:PbLicense.num_trunk_ports)
}

// int32 num_nontrunk_ports = 4;
inline void PbLicense::clear_num_nontrunk_ports() {
  num_nontrunk_ports_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbLicense::_internal_num_nontrunk_ports() const {
  return num_nontrunk_ports_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbLicense::num_nontrunk_ports() const {
  // @@protoc_insertion_point(field_get:PbLicense.num_nontrunk_ports)
  return _internal_num_nontrunk_ports();
}
inline void PbLicense::_internal_set_num_nontrunk_ports(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_nontrunk_ports_ = value;
}
inline void PbLicense::set_num_nontrunk_ports(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_nontrunk_ports(value);
  // @@protoc_insertion_point(field_set:PbLicense.num_nontrunk_ports)
}

// int32 num_serial_ports = 5;
inline void PbLicense::clear_num_serial_ports() {
  num_serial_ports_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbLicense::_internal_num_serial_ports() const {
  return num_serial_ports_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbLicense::num_serial_ports() const {
  // @@protoc_insertion_point(field_get:PbLicense.num_serial_ports)
  return _internal_num_serial_ports();
}
inline void PbLicense::_internal_set_num_serial_ports(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_serial_ports_ = value;
}
inline void PbLicense::set_num_serial_ports(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_serial_ports(value);
  // @@protoc_insertion_point(field_set:PbLicense.num_serial_ports)
}

// int32 num_bluetooth_ports = 6;
inline void PbLicense::clear_num_bluetooth_ports() {
  num_bluetooth_ports_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbLicense::_internal_num_bluetooth_ports() const {
  return num_bluetooth_ports_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbLicense::num_bluetooth_ports() const {
  // @@protoc_insertion_point(field_get:PbLicense.num_bluetooth_ports)
  return _internal_num_bluetooth_ports();
}
inline void PbLicense::_internal_set_num_bluetooth_ports(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_bluetooth_ports_ = value;
}
inline void PbLicense::set_num_bluetooth_ports(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_bluetooth_ports(value);
  // @@protoc_insertion_point(field_set:PbLicense.num_bluetooth_ports)
}

// int32 num_g5_modules = 7;
inline void PbLicense::clear_num_g5_modules() {
  num_g5_modules_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbLicense::_internal_num_g5_modules() const {
  return num_g5_modules_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbLicense::num_g5_modules() const {
  // @@protoc_insertion_point(field_get:PbLicense.num_g5_modules)
  return _internal_num_g5_modules();
}
inline void PbLicense::_internal_set_num_g5_modules(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_g5_modules_ = value;
}
inline void PbLicense::set_num_g5_modules(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_g5_modules(value);
  // @@protoc_insertion_point(field_set:PbLicense.num_g5_modules)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_license_2eproto
