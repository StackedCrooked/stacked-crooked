// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: license.proto

#ifndef PROTOBUF_license_2eproto__INCLUDED
#define PROTOBUF_license_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_license_2eproto();
void protobuf_AssignDesc_license_2eproto();
void protobuf_ShutdownFile_license_2eproto();

class Features;
class HardwareId;
class License;
class Limits;

enum HardwareIdType {
  MAC_ADDRESS = 0,
  MOTHERBOARD_SERIAL = 1,
  HardwareIdType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HardwareIdType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HardwareIdType_IsValid(int value);
const HardwareIdType HardwareIdType_MIN = MAC_ADDRESS;
const HardwareIdType HardwareIdType_MAX = MOTHERBOARD_SERIAL;
const int HardwareIdType_ARRAYSIZE = HardwareIdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* HardwareIdType_descriptor();
inline const ::std::string& HardwareIdType_Name(HardwareIdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    HardwareIdType_descriptor(), value);
}
inline bool HardwareIdType_Parse(
    const ::std::string& name, HardwareIdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HardwareIdType>(
    HardwareIdType_descriptor(), name, value);
}
// ===================================================================

class HardwareId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HardwareId) */ {
 public:
  HardwareId();
  virtual ~HardwareId();

  HardwareId(const HardwareId& from);

  inline HardwareId& operator=(const HardwareId& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HardwareId& default_instance();

  void Swap(HardwareId* other);

  // implements Message ----------------------------------------------

  inline HardwareId* New() const { return New(NULL); }

  HardwareId* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HardwareId& from);
  void MergeFrom(const HardwareId& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HardwareId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .HardwareIdType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::HardwareIdType type() const;
  void set_type(::HardwareIdType value);

  // optional bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:HardwareId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_license_2eproto();
  friend void protobuf_AssignDesc_license_2eproto();
  friend void protobuf_ShutdownFile_license_2eproto();

  void InitAsDefaultInstance();
  static HardwareId* default_instance_;
};
// -------------------------------------------------------------------

class Features : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Features) */ {
 public:
  Features();
  virtual ~Features();

  Features(const Features& from);

  inline Features& operator=(const Features& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Features& default_instance();

  void Swap(Features* other);

  // implements Message ----------------------------------------------

  inline Features* New() const { return New(NULL); }

  Features* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Features& from);
  void MergeFrom(const Features& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Features* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 num_trunk_ports = 1;
  void clear_num_trunk_ports();
  static const int kNumTrunkPortsFieldNumber = 1;
  ::google::protobuf::int32 num_trunk_ports() const;
  void set_num_trunk_ports(::google::protobuf::int32 value);

  // optional int32 num_nontrunk_ports = 2;
  void clear_num_nontrunk_ports();
  static const int kNumNontrunkPortsFieldNumber = 2;
  ::google::protobuf::int32 num_nontrunk_ports() const;
  void set_num_nontrunk_ports(::google::protobuf::int32 value);

  // optional int32 num_usb_ports = 3;
  void clear_num_usb_ports();
  static const int kNumUsbPortsFieldNumber = 3;
  ::google::protobuf::int32 num_usb_ports() const;
  void set_num_usb_ports(::google::protobuf::int32 value);

  // optional int32 num_nbaset_ports = 4;
  void clear_num_nbaset_ports();
  static const int kNumNbasetPortsFieldNumber = 4;
  ::google::protobuf::int32 num_nbaset_ports() const;
  void set_num_nbaset_ports(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Features)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 num_trunk_ports_;
  ::google::protobuf::int32 num_nontrunk_ports_;
  ::google::protobuf::int32 num_usb_ports_;
  ::google::protobuf::int32 num_nbaset_ports_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_license_2eproto();
  friend void protobuf_AssignDesc_license_2eproto();
  friend void protobuf_ShutdownFile_license_2eproto();

  void InitAsDefaultInstance();
  static Features* default_instance_;
};
// -------------------------------------------------------------------

class Limits : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Limits) */ {
 public:
  Limits();
  virtual ~Limits();

  Limits(const Limits& from);

  inline Limits& operator=(const Limits& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Limits& default_instance();

  void Swap(Limits* other);

  // implements Message ----------------------------------------------

  inline Limits* New() const { return New(NULL); }

  Limits* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Limits& from);
  void MergeFrom(const Limits& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Limits* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 seconds_assigned = 1;
  void clear_seconds_assigned();
  static const int kSecondsAssignedFieldNumber = 1;
  ::google::protobuf::int64 seconds_assigned() const;
  void set_seconds_assigned(::google::protobuf::int64 value);

  // optional int64 seconds_consumed = 2;
  void clear_seconds_consumed();
  static const int kSecondsConsumedFieldNumber = 2;
  ::google::protobuf::int64 seconds_consumed() const;
  void set_seconds_consumed(::google::protobuf::int64 value);

  // optional int64 trialperiod_begin = 3;
  void clear_trialperiod_begin();
  static const int kTrialperiodBeginFieldNumber = 3;
  ::google::protobuf::int64 trialperiod_begin() const;
  void set_trialperiod_begin(::google::protobuf::int64 value);

  // optional int64 trialperiod_end = 4;
  void clear_trialperiod_end();
  static const int kTrialperiodEndFieldNumber = 4;
  ::google::protobuf::int64 trialperiod_end() const;
  void set_trialperiod_end(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Limits)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 seconds_assigned_;
  ::google::protobuf::int64 seconds_consumed_;
  ::google::protobuf::int64 trialperiod_begin_;
  ::google::protobuf::int64 trialperiod_end_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_license_2eproto();
  friend void protobuf_AssignDesc_license_2eproto();
  friend void protobuf_ShutdownFile_license_2eproto();

  void InitAsDefaultInstance();
  static Limits* default_instance_;
};
// -------------------------------------------------------------------

class License : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:License) */ {
 public:
  License();
  virtual ~License();

  License(const License& from);

  inline License& operator=(const License& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const License& default_instance();

  void Swap(License* other);

  // implements Message ----------------------------------------------

  inline License* New() const { return New(NULL); }

  License* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const License& from);
  void MergeFrom(const License& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(License* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // optional bytes secure_hash = 2;
  void clear_secure_hash();
  static const int kSecureHashFieldNumber = 2;
  const ::std::string& secure_hash() const;
  void set_secure_hash(const ::std::string& value);
  void set_secure_hash(const char* value);
  void set_secure_hash(const void* value, size_t size);
  ::std::string* mutable_secure_hash();
  ::std::string* release_secure_hash();
  void set_allocated_secure_hash(::std::string* secure_hash);

  // optional .HardwareId hardware_id = 3;
  bool has_hardware_id() const;
  void clear_hardware_id();
  static const int kHardwareIdFieldNumber = 3;
  const ::HardwareId& hardware_id() const;
  ::HardwareId* mutable_hardware_id();
  ::HardwareId* release_hardware_id();
  void set_allocated_hardware_id(::HardwareId* hardware_id);

  // optional .Features features = 4;
  bool has_features() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 4;
  const ::Features& features() const;
  ::Features* mutable_features();
  ::Features* release_features();
  void set_allocated_features(::Features* features);

  // optional .Limits limits = 5;
  bool has_limits() const;
  void clear_limits();
  static const int kLimitsFieldNumber = 5;
  const ::Limits& limits() const;
  ::Limits* mutable_limits();
  ::Limits* release_limits();
  void set_allocated_limits(::Limits* limits);

  // @@protoc_insertion_point(class_scope:License)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr secure_hash_;
  ::HardwareId* hardware_id_;
  ::Features* features_;
  ::Limits* limits_;
  ::google::protobuf::int32 version_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_license_2eproto();
  friend void protobuf_AssignDesc_license_2eproto();
  friend void protobuf_ShutdownFile_license_2eproto();

  void InitAsDefaultInstance();
  static License* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// HardwareId

// optional .HardwareIdType type = 1;
inline void HardwareId::clear_type() {
  type_ = 0;
}
inline ::HardwareIdType HardwareId::type() const {
  // @@protoc_insertion_point(field_get:HardwareId.type)
  return static_cast< ::HardwareIdType >(type_);
}
inline void HardwareId::set_type(::HardwareIdType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:HardwareId.type)
}

// optional bytes value = 2;
inline void HardwareId::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HardwareId::value() const {
  // @@protoc_insertion_point(field_get:HardwareId.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HardwareId::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HardwareId.value)
}
inline void HardwareId::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HardwareId.value)
}
inline void HardwareId::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HardwareId.value)
}
inline ::std::string* HardwareId::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:HardwareId.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HardwareId::release_value() {
  // @@protoc_insertion_point(field_release:HardwareId.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HardwareId::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:HardwareId.value)
}

// -------------------------------------------------------------------

// Features

// optional int32 num_trunk_ports = 1;
inline void Features::clear_num_trunk_ports() {
  num_trunk_ports_ = 0;
}
inline ::google::protobuf::int32 Features::num_trunk_ports() const {
  // @@protoc_insertion_point(field_get:Features.num_trunk_ports)
  return num_trunk_ports_;
}
inline void Features::set_num_trunk_ports(::google::protobuf::int32 value) {
  
  num_trunk_ports_ = value;
  // @@protoc_insertion_point(field_set:Features.num_trunk_ports)
}

// optional int32 num_nontrunk_ports = 2;
inline void Features::clear_num_nontrunk_ports() {
  num_nontrunk_ports_ = 0;
}
inline ::google::protobuf::int32 Features::num_nontrunk_ports() const {
  // @@protoc_insertion_point(field_get:Features.num_nontrunk_ports)
  return num_nontrunk_ports_;
}
inline void Features::set_num_nontrunk_ports(::google::protobuf::int32 value) {
  
  num_nontrunk_ports_ = value;
  // @@protoc_insertion_point(field_set:Features.num_nontrunk_ports)
}

// optional int32 num_usb_ports = 3;
inline void Features::clear_num_usb_ports() {
  num_usb_ports_ = 0;
}
inline ::google::protobuf::int32 Features::num_usb_ports() const {
  // @@protoc_insertion_point(field_get:Features.num_usb_ports)
  return num_usb_ports_;
}
inline void Features::set_num_usb_ports(::google::protobuf::int32 value) {
  
  num_usb_ports_ = value;
  // @@protoc_insertion_point(field_set:Features.num_usb_ports)
}

// optional int32 num_nbaset_ports = 4;
inline void Features::clear_num_nbaset_ports() {
  num_nbaset_ports_ = 0;
}
inline ::google::protobuf::int32 Features::num_nbaset_ports() const {
  // @@protoc_insertion_point(field_get:Features.num_nbaset_ports)
  return num_nbaset_ports_;
}
inline void Features::set_num_nbaset_ports(::google::protobuf::int32 value) {
  
  num_nbaset_ports_ = value;
  // @@protoc_insertion_point(field_set:Features.num_nbaset_ports)
}

// -------------------------------------------------------------------

// Limits

// optional int64 seconds_assigned = 1;
inline void Limits::clear_seconds_assigned() {
  seconds_assigned_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Limits::seconds_assigned() const {
  // @@protoc_insertion_point(field_get:Limits.seconds_assigned)
  return seconds_assigned_;
}
inline void Limits::set_seconds_assigned(::google::protobuf::int64 value) {
  
  seconds_assigned_ = value;
  // @@protoc_insertion_point(field_set:Limits.seconds_assigned)
}

// optional int64 seconds_consumed = 2;
inline void Limits::clear_seconds_consumed() {
  seconds_consumed_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Limits::seconds_consumed() const {
  // @@protoc_insertion_point(field_get:Limits.seconds_consumed)
  return seconds_consumed_;
}
inline void Limits::set_seconds_consumed(::google::protobuf::int64 value) {
  
  seconds_consumed_ = value;
  // @@protoc_insertion_point(field_set:Limits.seconds_consumed)
}

// optional int64 trialperiod_begin = 3;
inline void Limits::clear_trialperiod_begin() {
  trialperiod_begin_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Limits::trialperiod_begin() const {
  // @@protoc_insertion_point(field_get:Limits.trialperiod_begin)
  return trialperiod_begin_;
}
inline void Limits::set_trialperiod_begin(::google::protobuf::int64 value) {
  
  trialperiod_begin_ = value;
  // @@protoc_insertion_point(field_set:Limits.trialperiod_begin)
}

// optional int64 trialperiod_end = 4;
inline void Limits::clear_trialperiod_end() {
  trialperiod_end_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Limits::trialperiod_end() const {
  // @@protoc_insertion_point(field_get:Limits.trialperiod_end)
  return trialperiod_end_;
}
inline void Limits::set_trialperiod_end(::google::protobuf::int64 value) {
  
  trialperiod_end_ = value;
  // @@protoc_insertion_point(field_set:Limits.trialperiod_end)
}

// -------------------------------------------------------------------

// License

// optional int32 version = 1;
inline void License::clear_version() {
  version_ = 0;
}
inline ::google::protobuf::int32 License::version() const {
  // @@protoc_insertion_point(field_get:License.version)
  return version_;
}
inline void License::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:License.version)
}

// optional bytes secure_hash = 2;
inline void License::clear_secure_hash() {
  secure_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& License::secure_hash() const {
  // @@protoc_insertion_point(field_get:License.secure_hash)
  return secure_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void License::set_secure_hash(const ::std::string& value) {
  
  secure_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:License.secure_hash)
}
inline void License::set_secure_hash(const char* value) {
  
  secure_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:License.secure_hash)
}
inline void License::set_secure_hash(const void* value, size_t size) {
  
  secure_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:License.secure_hash)
}
inline ::std::string* License::mutable_secure_hash() {
  
  // @@protoc_insertion_point(field_mutable:License.secure_hash)
  return secure_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* License::release_secure_hash() {
  // @@protoc_insertion_point(field_release:License.secure_hash)
  
  return secure_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void License::set_allocated_secure_hash(::std::string* secure_hash) {
  if (secure_hash != NULL) {
    
  } else {
    
  }
  secure_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secure_hash);
  // @@protoc_insertion_point(field_set_allocated:License.secure_hash)
}

// optional .HardwareId hardware_id = 3;
inline bool License::has_hardware_id() const {
  return !_is_default_instance_ && hardware_id_ != NULL;
}
inline void License::clear_hardware_id() {
  if (GetArenaNoVirtual() == NULL && hardware_id_ != NULL) delete hardware_id_;
  hardware_id_ = NULL;
}
inline const ::HardwareId& License::hardware_id() const {
  // @@protoc_insertion_point(field_get:License.hardware_id)
  return hardware_id_ != NULL ? *hardware_id_ : *default_instance_->hardware_id_;
}
inline ::HardwareId* License::mutable_hardware_id() {
  
  if (hardware_id_ == NULL) {
    hardware_id_ = new ::HardwareId;
  }
  // @@protoc_insertion_point(field_mutable:License.hardware_id)
  return hardware_id_;
}
inline ::HardwareId* License::release_hardware_id() {
  // @@protoc_insertion_point(field_release:License.hardware_id)
  
  ::HardwareId* temp = hardware_id_;
  hardware_id_ = NULL;
  return temp;
}
inline void License::set_allocated_hardware_id(::HardwareId* hardware_id) {
  delete hardware_id_;
  hardware_id_ = hardware_id;
  if (hardware_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:License.hardware_id)
}

// optional .Features features = 4;
inline bool License::has_features() const {
  return !_is_default_instance_ && features_ != NULL;
}
inline void License::clear_features() {
  if (GetArenaNoVirtual() == NULL && features_ != NULL) delete features_;
  features_ = NULL;
}
inline const ::Features& License::features() const {
  // @@protoc_insertion_point(field_get:License.features)
  return features_ != NULL ? *features_ : *default_instance_->features_;
}
inline ::Features* License::mutable_features() {
  
  if (features_ == NULL) {
    features_ = new ::Features;
  }
  // @@protoc_insertion_point(field_mutable:License.features)
  return features_;
}
inline ::Features* License::release_features() {
  // @@protoc_insertion_point(field_release:License.features)
  
  ::Features* temp = features_;
  features_ = NULL;
  return temp;
}
inline void License::set_allocated_features(::Features* features) {
  delete features_;
  features_ = features;
  if (features) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:License.features)
}

// optional .Limits limits = 5;
inline bool License::has_limits() const {
  return !_is_default_instance_ && limits_ != NULL;
}
inline void License::clear_limits() {
  if (GetArenaNoVirtual() == NULL && limits_ != NULL) delete limits_;
  limits_ = NULL;
}
inline const ::Limits& License::limits() const {
  // @@protoc_insertion_point(field_get:License.limits)
  return limits_ != NULL ? *limits_ : *default_instance_->limits_;
}
inline ::Limits* License::mutable_limits() {
  
  if (limits_ == NULL) {
    limits_ = new ::Limits;
  }
  // @@protoc_insertion_point(field_mutable:License.limits)
  return limits_;
}
inline ::Limits* License::release_limits() {
  // @@protoc_insertion_point(field_release:License.limits)
  
  ::Limits* temp = limits_;
  limits_ = NULL;
  return temp;
}
inline void License::set_allocated_limits(::Limits* limits) {
  delete limits_;
  limits_ = limits;
  if (limits) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:License.limits)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::HardwareIdType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HardwareIdType>() {
  return ::HardwareIdType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_license_2eproto__INCLUDED
