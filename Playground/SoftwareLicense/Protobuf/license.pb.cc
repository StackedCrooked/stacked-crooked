// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: license.proto

#include "license.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class PbLicenseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PbLicense> _instance;
} _PbLicense_default_instance_;
static void InitDefaultsscc_info_PbLicense_license_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PbLicense_default_instance_;
    new (ptr) ::PbLicense();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PbLicense::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PbLicense_license_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PbLicense_license_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_license_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_license_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_license_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_license_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PbLicense, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PbLicense, version_),
  PROTOBUF_FIELD_OFFSET(::PbLicense, checksum_),
  PROTOBUF_FIELD_OFFSET(::PbLicense, num_trunk_ports_),
  PROTOBUF_FIELD_OFFSET(::PbLicense, num_nontrunk_ports_),
  PROTOBUF_FIELD_OFFSET(::PbLicense, num_serial_ports_),
  PROTOBUF_FIELD_OFFSET(::PbLicense, num_bluetooth_ports_),
  PROTOBUF_FIELD_OFFSET(::PbLicense, num_g5_modules_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::PbLicense)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PbLicense_default_instance_),
};

const char descriptor_table_protodef_license_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rlicense.proto\"\262\001\n\tPbLicense\022\017\n\007version"
  "\030\001 \001(\005\022\020\n\010checksum\030\002 \001(\003\022\027\n\017num_trunk_po"
  "rts\030\003 \001(\005\022\032\n\022num_nontrunk_ports\030\004 \001(\005\022\030\n"
  "\020num_serial_ports\030\005 \001(\005\022\033\n\023num_bluetooth"
  "_ports\030\006 \001(\005\022\026\n\016num_g5_modules\030\007 \001(\005b\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_license_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_license_2eproto_sccs[1] = {
  &scc_info_PbLicense_license_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_license_2eproto_once;
static bool descriptor_table_license_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_license_2eproto = {
  &descriptor_table_license_2eproto_initialized, descriptor_table_protodef_license_2eproto, "license.proto", 204,
  &descriptor_table_license_2eproto_once, descriptor_table_license_2eproto_sccs, descriptor_table_license_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_license_2eproto::offsets,
  file_level_metadata_license_2eproto, 1, file_level_enum_descriptors_license_2eproto, file_level_service_descriptors_license_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_license_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_license_2eproto), true);

// ===================================================================

void PbLicense::InitAsDefaultInstance() {
}
class PbLicense::_Internal {
 public:
};

PbLicense::PbLicense()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbLicense)
}
PbLicense::PbLicense(const PbLicense& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&checksum_, &from.checksum_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_g5_modules_) -
    reinterpret_cast<char*>(&checksum_)) + sizeof(num_g5_modules_));
  // @@protoc_insertion_point(copy_constructor:PbLicense)
}

void PbLicense::SharedCtor() {
  ::memset(&checksum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_g5_modules_) -
      reinterpret_cast<char*>(&checksum_)) + sizeof(num_g5_modules_));
}

PbLicense::~PbLicense() {
  // @@protoc_insertion_point(destructor:PbLicense)
  SharedDtor();
}

void PbLicense::SharedDtor() {
}

void PbLicense::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PbLicense& PbLicense::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PbLicense_license_2eproto.base);
  return *internal_default_instance();
}


void PbLicense::Clear() {
// @@protoc_insertion_point(message_clear_start:PbLicense)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&checksum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_g5_modules_) -
      reinterpret_cast<char*>(&checksum_)) + sizeof(num_g5_modules_));
  _internal_metadata_.Clear();
}

const char* PbLicense::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 checksum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          checksum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_trunk_ports = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_trunk_ports_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_nontrunk_ports = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          num_nontrunk_ports_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_serial_ports = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          num_serial_ports_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_bluetooth_ports = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          num_bluetooth_ports_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_g5_modules = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          num_g5_modules_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PbLicense::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbLicense)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // int64 checksum = 2;
  if (this->checksum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_checksum(), target);
  }

  // int32 num_trunk_ports = 3;
  if (this->num_trunk_ports() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_trunk_ports(), target);
  }

  // int32 num_nontrunk_ports = 4;
  if (this->num_nontrunk_ports() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_num_nontrunk_ports(), target);
  }

  // int32 num_serial_ports = 5;
  if (this->num_serial_ports() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_num_serial_ports(), target);
  }

  // int32 num_bluetooth_ports = 6;
  if (this->num_bluetooth_ports() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_num_bluetooth_ports(), target);
  }

  // int32 num_g5_modules = 7;
  if (this->num_g5_modules() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_num_g5_modules(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbLicense)
  return target;
}

size_t PbLicense::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PbLicense)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 checksum = 2;
  if (this->checksum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_checksum());
  }

  // int32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  // int32 num_trunk_ports = 3;
  if (this->num_trunk_ports() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_trunk_ports());
  }

  // int32 num_nontrunk_ports = 4;
  if (this->num_nontrunk_ports() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_nontrunk_ports());
  }

  // int32 num_serial_ports = 5;
  if (this->num_serial_ports() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_serial_ports());
  }

  // int32 num_bluetooth_ports = 6;
  if (this->num_bluetooth_ports() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_bluetooth_ports());
  }

  // int32 num_g5_modules = 7;
  if (this->num_g5_modules() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_g5_modules());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PbLicense::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PbLicense)
  GOOGLE_DCHECK_NE(&from, this);
  const PbLicense* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PbLicense>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PbLicense)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PbLicense)
    MergeFrom(*source);
  }
}

void PbLicense::MergeFrom(const PbLicense& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PbLicense)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.checksum() != 0) {
    _internal_set_checksum(from._internal_checksum());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.num_trunk_ports() != 0) {
    _internal_set_num_trunk_ports(from._internal_num_trunk_ports());
  }
  if (from.num_nontrunk_ports() != 0) {
    _internal_set_num_nontrunk_ports(from._internal_num_nontrunk_ports());
  }
  if (from.num_serial_ports() != 0) {
    _internal_set_num_serial_ports(from._internal_num_serial_ports());
  }
  if (from.num_bluetooth_ports() != 0) {
    _internal_set_num_bluetooth_ports(from._internal_num_bluetooth_ports());
  }
  if (from.num_g5_modules() != 0) {
    _internal_set_num_g5_modules(from._internal_num_g5_modules());
  }
}

void PbLicense::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PbLicense)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbLicense::CopyFrom(const PbLicense& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PbLicense)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbLicense::IsInitialized() const {
  return true;
}

void PbLicense::InternalSwap(PbLicense* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(checksum_, other->checksum_);
  swap(version_, other->version_);
  swap(num_trunk_ports_, other->num_trunk_ports_);
  swap(num_nontrunk_ports_, other->num_nontrunk_ports_);
  swap(num_serial_ports_, other->num_serial_ports_);
  swap(num_bluetooth_ports_, other->num_bluetooth_ports_);
  swap(num_g5_modules_, other->num_g5_modules_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PbLicense::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PbLicense* Arena::CreateMaybeMessage< ::PbLicense >(Arena* arena) {
  return Arena::CreateInternal< ::PbLicense >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
