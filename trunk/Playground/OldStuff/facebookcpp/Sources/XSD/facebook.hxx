// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef FACEBOOK_HXX
#define FACEBOOK_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/version.hxx>

#if (XSD_INT_VERSION != 3009951L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/tree/parsing.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< type, char, ncname > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // DOM user data key for back pointers to tree nodes.
  //
#ifndef XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA

  const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;

#endif

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::serialization< char > serialization;
  typedef ::xsd::cxx::tree::no_namespace_mapping< char > no_namespace_mapping;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::xsi_already_in_use< char > xsi_already_in_use;
  typedef ::xsd::cxx::tree::bounds< char > bounds;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Error handler interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;
}

// Forward declarations.
//
namespace FacebookCpp
{
  namespace XSD
  {
    class container;
    class aid;
    class pid;
    class eid;
    class gid;
    class nid;
    class hsid;
    class uid;
    class flid;
    class id;
    class lid;
    class page_id;
    class old_id_list;
    class aid_list;
    class pid_list;
    class gid_list;
    class eid_list;
    class uid_list;
    class field_list;
    class tag_list;
    class lid_list;
    class pageid_list;
    class time;
    class date;
    class year;
    class auth_token;
    class session_key;
    class friend_link;
    class member_type;
    class old_id;
    class marketplace_category;
    class marketplace_subcategory;
    class json_string;
    class concentration;
    class sex;
    class seeking;
    class user_status;
    class id_map;
    class arg;
    class FacebookApiException;
    class session_info;
    class location;
    class event;
    class event_member;
    class group;
    class group_member;
    class group_members;
    class event_members;
    class notification_count;
    class notifications;
    class photo;
    class photo_tag;
    class album;
    class affiliation;
    class hs_info;
    class education_info;
    class work_info;
    class user;
    class friend_info;
    class friendlist;
    class object_type_info;
    class object_property_info;
    class assoc_object_type;
    class object_assoc_info;
    class object_association;
    class listing;
    class preference;
    class page_hours;
    class page_parking;
    class page_restaurant_services;
    class page_restaurant_specialties;
    class page_payment_options;
    class page;
    class cookie;
    class phrase;
    class request_args;
    class positions;
    class members;
    class admins;
    class officers;
    class not_replied;
    class attending;
    class unsure;
    class declined;
    class not_replied1;
    class friend_requests;
    class group_invites;
    class event_invites;
    class concentrations;
    class affiliations;
    class education_history;
    class meeting_for;
    class meeting_sex;
    class work_history;
    class image_urls;
    class events_get_response;
    class friends_areFriends_response;
    class friends_get_response;
    class friends_getAppUsers_response;
    class friends_getLists_response;
    class groups_get_response;
    class data_getCookies_response;
    class marketplace_getCategories_response;
    class marketplace_getSubCategories_response;
    class marketplace_getListings_response;
    class marketplace_search_response;
    class photos_get_response;
    class photos_getAlbums_response;
    class photos_getTags_response;
    class update_decodeIDs_response;
    class users_getInfo_response;
    class pages_getInfo_response;
    class data_getUserPreferences_response;
    class data_getObjectTypes_response;
    class data_getObjectType_response;
    class data_getObjects_response;
    class data_getAssociationDefinitions_response;
    class data_getAssociatedObjects_response;
    class data_getAssociatedObjectCounts_response;
    class data_getAssociations_response;
  }
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace FacebookCpp
{
  namespace XSD
  {
    class container: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      container ();

      container (const char*);

      container (const ::std::string&);

      container (const ::xml_schema::string&);

      container (const xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      container (const xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      container (const ::std::string& s,
                 const xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      container (const container& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual container*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~container ();
    };

    class aid: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type >
    {
      public:
      // Constructors.
      //
      aid (const ::xml_schema::long_&);

      aid (const xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      aid (const xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      aid (const ::std::string& s,
           const xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      aid (const aid& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      virtual aid*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~aid ();
    };

    class pid: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type >
    {
      public:
      // Constructors.
      //
      pid (const ::xml_schema::long_&);

      pid (const xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      pid (const xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      pid (const ::std::string& s,
           const xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      pid (const pid& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      virtual pid*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~pid ();
    };

    class eid: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type >
    {
      public:
      // Constructors.
      //
      eid (const ::xml_schema::long_&);

      eid (const xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      eid (const xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      eid (const ::std::string& s,
           const xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      eid (const eid& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      virtual eid*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~eid ();
    };

    class gid: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type >
    {
      public:
      // Constructors.
      //
      gid (const ::xml_schema::long_&);

      gid (const xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      gid (const xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      gid (const ::std::string& s,
           const xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      gid (const gid& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      virtual gid*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~gid ();
    };

    class nid: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::int_, char, ::xml_schema::simple_type >
    {
      public:
      // Constructors.
      //
      nid (const ::xml_schema::int_&);

      nid (const xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      nid (const xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      nid (const ::std::string& s,
           const xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      nid (const nid& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      virtual nid*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~nid ();
    };

    class hsid: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::int_, char, ::xml_schema::simple_type >
    {
      public:
      // Constructors.
      //
      hsid (const ::xml_schema::int_&);

      hsid (const xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      hsid (const xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      hsid (const ::std::string& s,
            const xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      hsid (const hsid& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      virtual hsid*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~hsid ();
    };

    class uid: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::int_, char, ::xml_schema::simple_type >
    {
      public:
      // Constructors.
      //
      uid (const ::xml_schema::int_&);

      uid (const xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      uid (const xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      uid (const ::std::string& s,
           const xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      uid (const uid& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      virtual uid*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~uid ();
    };

    class flid: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type >
    {
      public:
      // Constructors.
      //
      flid (const ::xml_schema::long_&);

      flid (const xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      flid (const xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      flid (const ::std::string& s,
            const xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      flid (const flid& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      virtual flid*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~flid ();
    };

    class id: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type >
    {
      public:
      // Constructors.
      //
      id (const ::xml_schema::long_&);

      id (const xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

      id (const xercesc::DOMAttr& a,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

      id (const ::std::string& s,
          const xercesc::DOMElement* e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

      id (const id& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

      virtual id*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~id ();
    };

    class lid: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type >
    {
      public:
      // Constructors.
      //
      lid (const ::xml_schema::long_&);

      lid (const xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      lid (const xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      lid (const ::std::string& s,
           const xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      lid (const lid& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      virtual lid*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~lid ();
    };

    class page_id: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type >
    {
      public:
      // Constructors.
      //
      page_id (const ::xml_schema::long_&);

      page_id (const xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      page_id (const xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      page_id (const ::std::string& s,
               const xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      page_id (const page_id& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      virtual page_id*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~page_id ();
    };

    class old_id_list: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      old_id_list ();

      old_id_list (const char*);

      old_id_list (const ::std::string&);

      old_id_list (const ::xml_schema::string&);

      old_id_list (const xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      old_id_list (const xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      old_id_list (const ::std::string& s,
                   const xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      old_id_list (const old_id_list& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual old_id_list*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~old_id_list ();
    };

    class aid_list: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      aid_list ();

      aid_list (const char*);

      aid_list (const ::std::string&);

      aid_list (const ::xml_schema::string&);

      aid_list (const xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      aid_list (const xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      aid_list (const ::std::string& s,
                const xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      aid_list (const aid_list& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      virtual aid_list*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~aid_list ();
    };

    class pid_list: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      pid_list ();

      pid_list (const char*);

      pid_list (const ::std::string&);

      pid_list (const ::xml_schema::string&);

      pid_list (const xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      pid_list (const xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      pid_list (const ::std::string& s,
                const xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      pid_list (const pid_list& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      virtual pid_list*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~pid_list ();
    };

    class gid_list: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      gid_list ();

      gid_list (const char*);

      gid_list (const ::std::string&);

      gid_list (const ::xml_schema::string&);

      gid_list (const xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      gid_list (const xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      gid_list (const ::std::string& s,
                const xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      gid_list (const gid_list& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      virtual gid_list*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~gid_list ();
    };

    class eid_list: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      eid_list ();

      eid_list (const char*);

      eid_list (const ::std::string&);

      eid_list (const ::xml_schema::string&);

      eid_list (const xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      eid_list (const xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      eid_list (const ::std::string& s,
                const xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      eid_list (const eid_list& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      virtual eid_list*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~eid_list ();
    };

    class uid_list: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      uid_list ();

      uid_list (const char*);

      uid_list (const ::std::string&);

      uid_list (const ::xml_schema::string&);

      uid_list (const xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      uid_list (const xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      uid_list (const ::std::string& s,
                const xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      uid_list (const uid_list& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      virtual uid_list*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~uid_list ();
    };

    class field_list: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      field_list ();

      field_list (const char*);

      field_list (const ::std::string&);

      field_list (const ::xml_schema::string&);

      field_list (const xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      field_list (const xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      field_list (const ::std::string& s,
                  const xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      field_list (const field_list& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual field_list*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~field_list ();
    };

    class tag_list: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      tag_list ();

      tag_list (const char*);

      tag_list (const ::std::string&);

      tag_list (const ::xml_schema::string&);

      tag_list (const xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      tag_list (const xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      tag_list (const ::std::string& s,
                const xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      tag_list (const tag_list& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      virtual tag_list*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~tag_list ();
    };

    class lid_list: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      lid_list ();

      lid_list (const char*);

      lid_list (const ::std::string&);

      lid_list (const ::xml_schema::string&);

      lid_list (const xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      lid_list (const xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      lid_list (const ::std::string& s,
                const xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      lid_list (const lid_list& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      virtual lid_list*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~lid_list ();
    };

    class pageid_list: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      pageid_list ();

      pageid_list (const char*);

      pageid_list (const ::std::string&);

      pageid_list (const ::xml_schema::string&);

      pageid_list (const xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      pageid_list (const xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      pageid_list (const ::std::string& s,
                   const xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      pageid_list (const pageid_list& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual pageid_list*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~pageid_list ();
    };

    class time: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::int_, char, ::xml_schema::simple_type >
    {
      public:
      // Constructors.
      //
      time (const ::xml_schema::int_&);

      time (const xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      time (const xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      time (const ::std::string& s,
            const xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      time (const time& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      virtual time*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~time ();
    };

    class date: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      date ();

      date (const char*);

      date (const ::std::string&);

      date (const ::xml_schema::string&);

      date (const xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      date (const xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      date (const ::std::string& s,
            const xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      date (const date& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      virtual date*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~date ();
    };

    class year: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::int_, char, ::xml_schema::simple_type >
    {
      public:
      // Constructors.
      //
      year (const ::xml_schema::int_&);

      year (const xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      year (const xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      year (const ::std::string& s,
            const xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      year (const year& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      virtual year*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~year ();
    };

    class auth_token: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      auth_token ();

      auth_token (const char*);

      auth_token (const ::std::string&);

      auth_token (const ::xml_schema::string&);

      auth_token (const xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      auth_token (const xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      auth_token (const ::std::string& s,
                  const xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      auth_token (const auth_token& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual auth_token*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~auth_token ();
    };

    class session_key: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      session_key ();

      session_key (const char*);

      session_key (const ::std::string&);

      session_key (const ::xml_schema::string&);

      session_key (const xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      session_key (const xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      session_key (const ::std::string& s,
                   const xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      session_key (const session_key& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual session_key*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~session_key ();
    };

    class friend_link: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      friend_link ();

      friend_link (const char*);

      friend_link (const ::std::string&);

      friend_link (const ::xml_schema::string&);

      friend_link (const xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      friend_link (const xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      friend_link (const ::std::string& s,
                   const xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      friend_link (const friend_link& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual friend_link*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~friend_link ();
    };

    class member_type: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      member_type ();

      member_type (const char*);

      member_type (const ::std::string&);

      member_type (const ::xml_schema::string&);

      member_type (const xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      member_type (const xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      member_type (const ::std::string& s,
                   const xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      member_type (const member_type& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual member_type*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~member_type ();
    };

    class old_id: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      old_id ();

      old_id (const char*);

      old_id (const ::std::string&);

      old_id (const ::xml_schema::string&);

      old_id (const xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      old_id (const xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      old_id (const ::std::string& s,
              const xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      old_id (const old_id& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      virtual old_id*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~old_id ();
    };

    class marketplace_category: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      marketplace_category ();

      marketplace_category (const char*);

      marketplace_category (const ::std::string&);

      marketplace_category (const ::xml_schema::string&);

      marketplace_category (const xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      marketplace_category (const xercesc::DOMAttr& a,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      marketplace_category (const ::std::string& s,
                            const xercesc::DOMElement* e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      marketplace_category (const marketplace_category& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual marketplace_category*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~marketplace_category ();
    };

    class marketplace_subcategory: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      marketplace_subcategory ();

      marketplace_subcategory (const char*);

      marketplace_subcategory (const ::std::string&);

      marketplace_subcategory (const ::xml_schema::string&);

      marketplace_subcategory (const xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      marketplace_subcategory (const xercesc::DOMAttr& a,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      marketplace_subcategory (const ::std::string& s,
                               const xercesc::DOMElement* e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      marketplace_subcategory (const marketplace_subcategory& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual marketplace_subcategory*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~marketplace_subcategory ();
    };

    class json_string: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      json_string ();

      json_string (const char*);

      json_string (const ::std::string&);

      json_string (const ::xml_schema::string&);

      json_string (const xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      json_string (const xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      json_string (const ::std::string& s,
                   const xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      json_string (const json_string& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual json_string*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~json_string ();
    };

    class concentration: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      concentration ();

      concentration (const char*);

      concentration (const ::std::string&);

      concentration (const ::xml_schema::string&);

      concentration (const xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      concentration (const xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      concentration (const ::std::string& s,
                     const xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      concentration (const concentration& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual concentration*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~concentration ();
    };

    class sex: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      sex ();

      sex (const char*);

      sex (const ::std::string&);

      sex (const ::xml_schema::string&);

      sex (const xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      sex (const xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      sex (const ::std::string& s,
           const xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      sex (const sex& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      virtual sex*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~sex ();
    };

    class seeking: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      seeking ();

      seeking (const char*);

      seeking (const ::std::string&);

      seeking (const ::xml_schema::string&);

      seeking (const xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      seeking (const xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      seeking (const ::std::string& s,
               const xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      seeking (const seeking& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      virtual seeking*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~seeking ();
    };

    class user_status: public ::xml_schema::type
    {
      public:
      // message
      // 
      typedef ::xml_schema::string message_type;
      typedef ::xsd::cxx::tree::traits< message_type, char > message_traits;

      const message_type&
      message () const;

      message_type&
      message ();

      void
      message (const message_type& x);

      void
      message (::std::auto_ptr< message_type > p);

      // time
      // 
      typedef ::FacebookCpp::XSD::time time_type;
      typedef ::xsd::cxx::tree::traits< time_type, char > time_traits;

      const time_type&
      time () const;

      time_type&
      time ();

      void
      time (const time_type& x);

      void
      time (::std::auto_ptr< time_type > p);

      // Constructors.
      //
      user_status (const message_type&,
                   const time_type&);

      user_status (const xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      user_status (const user_status& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual user_status*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~user_status ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< message_type > message_;
      ::xsd::cxx::tree::one< time_type > time_;
    };

    class id_map: public ::xml_schema::type
    {
      public:
      // old_id
      // 
      typedef ::FacebookCpp::XSD::old_id old_id_type;
      typedef ::xsd::cxx::tree::traits< old_id_type, char > old_id_traits;

      const old_id_type&
      old_id () const;

      old_id_type&
      old_id ();

      void
      old_id (const old_id_type& x);

      void
      old_id (::std::auto_ptr< old_id_type > p);

      // new_id
      // 
      typedef ::FacebookCpp::XSD::id new_id_type;
      typedef ::xsd::cxx::tree::traits< new_id_type, char > new_id_traits;

      const new_id_type&
      new_id () const;

      new_id_type&
      new_id ();

      void
      new_id (const new_id_type& x);

      void
      new_id (::std::auto_ptr< new_id_type > p);

      // Constructors.
      //
      id_map (const old_id_type&,
              const new_id_type&);

      id_map (const xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      id_map (const id_map& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      virtual id_map*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~id_map ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< old_id_type > old_id_;
      ::xsd::cxx::tree::one< new_id_type > new_id_;
    };

    class arg: public ::xml_schema::type
    {
      public:
      // key
      // 
      typedef ::xml_schema::string key_type;
      typedef ::xsd::cxx::tree::traits< key_type, char > key_traits;

      const key_type&
      key () const;

      key_type&
      key ();

      void
      key (const key_type& x);

      void
      key (::std::auto_ptr< key_type > p);

      // value
      // 
      typedef ::xml_schema::string value_type;
      typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

      const value_type&
      value () const;

      value_type&
      value ();

      void
      value (const value_type& x);

      void
      value (::std::auto_ptr< value_type > p);

      // Constructors.
      //
      arg (const key_type&,
           const value_type&);

      arg (const xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      arg (const arg& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      virtual arg*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~arg ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< key_type > key_;
      ::xsd::cxx::tree::one< value_type > value_;
    };

    class FacebookApiException: public ::xml_schema::type
    {
      public:
      // error_code
      // 
      typedef ::xml_schema::int_ error_code_type;
      typedef ::xsd::cxx::tree::traits< error_code_type, char > error_code_traits;

      const error_code_type&
      error_code () const;

      error_code_type&
      error_code ();

      void
      error_code (const error_code_type& x);

      // error_msg
      // 
      typedef ::xml_schema::string error_msg_type;
      typedef ::xsd::cxx::tree::traits< error_msg_type, char > error_msg_traits;

      const error_msg_type&
      error_msg () const;

      error_msg_type&
      error_msg ();

      void
      error_msg (const error_msg_type& x);

      void
      error_msg (::std::auto_ptr< error_msg_type > p);

      // request_args
      // 
      typedef ::FacebookCpp::XSD::request_args request_args_type;
      typedef ::xsd::cxx::tree::traits< request_args_type, char > request_args_traits;

      const request_args_type&
      request_args () const;

      request_args_type&
      request_args ();

      void
      request_args (const request_args_type& x);

      void
      request_args (::std::auto_ptr< request_args_type > p);

      // Constructors.
      //
      FacebookApiException (const error_code_type&,
                            const error_msg_type&,
                            const request_args_type&);

      FacebookApiException (const xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      FacebookApiException (const FacebookApiException& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual FacebookApiException*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~FacebookApiException ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< error_code_type > error_code_;
      ::xsd::cxx::tree::one< error_msg_type > error_msg_;
      ::xsd::cxx::tree::one< request_args_type > request_args_;
    };

    class session_info: public ::xml_schema::type
    {
      public:
      // session_key
      // 
      typedef ::FacebookCpp::XSD::session_key session_key_type;
      typedef ::xsd::cxx::tree::traits< session_key_type, char > session_key_traits;

      const session_key_type&
      session_key () const;

      session_key_type&
      session_key ();

      void
      session_key (const session_key_type& x);

      void
      session_key (::std::auto_ptr< session_key_type > p);

      // uid
      // 
      typedef ::FacebookCpp::XSD::uid uid_type;
      typedef ::xsd::cxx::tree::traits< uid_type, char > uid_traits;

      const uid_type&
      uid () const;

      uid_type&
      uid ();

      void
      uid (const uid_type& x);

      void
      uid (::std::auto_ptr< uid_type > p);

      // expires
      // 
      typedef ::xml_schema::int_ expires_type;
      typedef ::xsd::cxx::tree::traits< expires_type, char > expires_traits;

      const expires_type&
      expires () const;

      expires_type&
      expires ();

      void
      expires (const expires_type& x);

      // secret
      // 
      typedef ::xml_schema::string secret_type;
      typedef ::xsd::cxx::tree::optional< secret_type > secret_optional;
      typedef ::xsd::cxx::tree::traits< secret_type, char > secret_traits;

      const secret_optional&
      secret () const;

      secret_optional&
      secret ();

      void
      secret (const secret_type& x);

      void
      secret (const secret_optional& x);

      void
      secret (::std::auto_ptr< secret_type > p);

      // Constructors.
      //
      session_info (const session_key_type&,
                    const uid_type&,
                    const expires_type&);

      session_info (const xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      session_info (const session_info& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual session_info*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~session_info ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< session_key_type > session_key_;
      ::xsd::cxx::tree::one< uid_type > uid_;
      ::xsd::cxx::tree::one< expires_type > expires_;
      secret_optional secret_;
    };

    class location: public ::xml_schema::type
    {
      public:
      // street
      // 
      typedef ::xml_schema::string street_type;
      typedef ::xsd::cxx::tree::optional< street_type > street_optional;
      typedef ::xsd::cxx::tree::traits< street_type, char > street_traits;

      const street_optional&
      street () const;

      street_optional&
      street ();

      void
      street (const street_type& x);

      void
      street (const street_optional& x);

      void
      street (::std::auto_ptr< street_type > p);

      // city
      // 
      typedef ::xml_schema::string city_type;
      typedef ::xsd::cxx::tree::optional< city_type > city_optional;
      typedef ::xsd::cxx::tree::traits< city_type, char > city_traits;

      const city_optional&
      city () const;

      city_optional&
      city ();

      void
      city (const city_type& x);

      void
      city (const city_optional& x);

      void
      city (::std::auto_ptr< city_type > p);

      // state
      // 
      typedef ::xml_schema::string state_type;
      typedef ::xsd::cxx::tree::optional< state_type > state_optional;
      typedef ::xsd::cxx::tree::traits< state_type, char > state_traits;

      const state_optional&
      state () const;

      state_optional&
      state ();

      void
      state (const state_type& x);

      void
      state (const state_optional& x);

      void
      state (::std::auto_ptr< state_type > p);

      // country
      // 
      typedef ::xml_schema::string country_type;
      typedef ::xsd::cxx::tree::optional< country_type > country_optional;
      typedef ::xsd::cxx::tree::traits< country_type, char > country_traits;

      const country_optional&
      country () const;

      country_optional&
      country ();

      void
      country (const country_type& x);

      void
      country (const country_optional& x);

      void
      country (::std::auto_ptr< country_type > p);

      // zip
      // 
      typedef ::xml_schema::string zip_type;
      typedef ::xsd::cxx::tree::optional< zip_type > zip_optional;
      typedef ::xsd::cxx::tree::traits< zip_type, char > zip_traits;

      const zip_optional&
      zip () const;

      zip_optional&
      zip ();

      void
      zip (const zip_type& x);

      void
      zip (const zip_optional& x);

      void
      zip (::std::auto_ptr< zip_type > p);

      // latitude
      // 
      typedef ::xml_schema::decimal latitude_type;
      typedef ::xsd::cxx::tree::optional< latitude_type > latitude_optional;
      typedef ::xsd::cxx::tree::traits< latitude_type, char > latitude_traits;

      const latitude_optional&
      latitude () const;

      latitude_optional&
      latitude ();

      void
      latitude (const latitude_type& x);

      void
      latitude (const latitude_optional& x);

      // longitude
      // 
      typedef ::xml_schema::decimal longitude_type;
      typedef ::xsd::cxx::tree::optional< longitude_type > longitude_optional;
      typedef ::xsd::cxx::tree::traits< longitude_type, char > longitude_traits;

      const longitude_optional&
      longitude () const;

      longitude_optional&
      longitude ();

      void
      longitude (const longitude_type& x);

      void
      longitude (const longitude_optional& x);

      // Constructors.
      //
      location ();

      location (const xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      location (const location& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      virtual location*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~location ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      street_optional street_;
      city_optional city_;
      state_optional state_;
      country_optional country_;
      zip_optional zip_;
      latitude_optional latitude_;
      longitude_optional longitude_;
    };

    class event: public ::xml_schema::type
    {
      public:
      // eid
      // 
      typedef ::FacebookCpp::XSD::eid eid_type;
      typedef ::xsd::cxx::tree::traits< eid_type, char > eid_traits;

      const eid_type&
      eid () const;

      eid_type&
      eid ();

      void
      eid (const eid_type& x);

      void
      eid (::std::auto_ptr< eid_type > p);

      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // tagline
      // 
      typedef ::xml_schema::string tagline_type;
      typedef ::xsd::cxx::tree::traits< tagline_type, char > tagline_traits;

      const tagline_type&
      tagline () const;

      tagline_type&
      tagline ();

      void
      tagline (const tagline_type& x);

      void
      tagline (::std::auto_ptr< tagline_type > p);

      // nid
      // 
      typedef ::FacebookCpp::XSD::nid nid_type;
      typedef ::xsd::cxx::tree::traits< nid_type, char > nid_traits;

      const nid_type&
      nid () const;

      nid_type&
      nid ();

      void
      nid (const nid_type& x);

      void
      nid (::std::auto_ptr< nid_type > p);

      // pic
      // 
      typedef ::xml_schema::string pic_type;
      typedef ::xsd::cxx::tree::traits< pic_type, char > pic_traits;

      const pic_type&
      pic () const;

      pic_type&
      pic ();

      void
      pic (const pic_type& x);

      void
      pic (::std::auto_ptr< pic_type > p);

      // pic_big
      // 
      typedef ::xml_schema::string pic_big_type;
      typedef ::xsd::cxx::tree::traits< pic_big_type, char > pic_big_traits;

      const pic_big_type&
      pic_big () const;

      pic_big_type&
      pic_big ();

      void
      pic_big (const pic_big_type& x);

      void
      pic_big (::std::auto_ptr< pic_big_type > p);

      // pic_small
      // 
      typedef ::xml_schema::string pic_small_type;
      typedef ::xsd::cxx::tree::traits< pic_small_type, char > pic_small_traits;

      const pic_small_type&
      pic_small () const;

      pic_small_type&
      pic_small ();

      void
      pic_small (const pic_small_type& x);

      void
      pic_small (::std::auto_ptr< pic_small_type > p);

      // host
      // 
      typedef ::xml_schema::string host_type;
      typedef ::xsd::cxx::tree::traits< host_type, char > host_traits;

      const host_type&
      host () const;

      host_type&
      host ();

      void
      host (const host_type& x);

      void
      host (::std::auto_ptr< host_type > p);

      // description
      // 
      typedef ::xml_schema::string description_type;
      typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

      const description_type&
      description () const;

      description_type&
      description ();

      void
      description (const description_type& x);

      void
      description (::std::auto_ptr< description_type > p);

      // event_type
      // 
      typedef ::xml_schema::string event_type_type;
      typedef ::xsd::cxx::tree::traits< event_type_type, char > event_type_traits;

      const event_type_type&
      event_type () const;

      event_type_type&
      event_type ();

      void
      event_type (const event_type_type& x);

      void
      event_type (::std::auto_ptr< event_type_type > p);

      // event_subtype
      // 
      typedef ::xml_schema::string event_subtype_type;
      typedef ::xsd::cxx::tree::traits< event_subtype_type, char > event_subtype_traits;

      const event_subtype_type&
      event_subtype () const;

      event_subtype_type&
      event_subtype ();

      void
      event_subtype (const event_subtype_type& x);

      void
      event_subtype (::std::auto_ptr< event_subtype_type > p);

      // start_time
      // 
      typedef ::FacebookCpp::XSD::time start_time_type;
      typedef ::xsd::cxx::tree::traits< start_time_type, char > start_time_traits;

      const start_time_type&
      start_time () const;

      start_time_type&
      start_time ();

      void
      start_time (const start_time_type& x);

      void
      start_time (::std::auto_ptr< start_time_type > p);

      // end_time
      // 
      typedef ::FacebookCpp::XSD::time end_time_type;
      typedef ::xsd::cxx::tree::traits< end_time_type, char > end_time_traits;

      const end_time_type&
      end_time () const;

      end_time_type&
      end_time ();

      void
      end_time (const end_time_type& x);

      void
      end_time (::std::auto_ptr< end_time_type > p);

      // creator
      // 
      typedef ::FacebookCpp::XSD::id creator_type;
      typedef ::xsd::cxx::tree::traits< creator_type, char > creator_traits;

      const creator_type&
      creator () const;

      creator_type&
      creator ();

      void
      creator (const creator_type& x);

      void
      creator (::std::auto_ptr< creator_type > p);

      // update_time
      // 
      typedef ::FacebookCpp::XSD::time update_time_type;
      typedef ::xsd::cxx::tree::traits< update_time_type, char > update_time_traits;

      const update_time_type&
      update_time () const;

      update_time_type&
      update_time ();

      void
      update_time (const update_time_type& x);

      void
      update_time (::std::auto_ptr< update_time_type > p);

      // location
      // 
      typedef ::xml_schema::string location_type;
      typedef ::xsd::cxx::tree::traits< location_type, char > location_traits;

      const location_type&
      location () const;

      location_type&
      location ();

      void
      location (const location_type& x);

      void
      location (::std::auto_ptr< location_type > p);

      // venue
      // 
      typedef ::FacebookCpp::XSD::location venue_type;
      typedef ::xsd::cxx::tree::traits< venue_type, char > venue_traits;

      const venue_type&
      venue () const;

      venue_type&
      venue ();

      void
      venue (const venue_type& x);

      void
      venue (::std::auto_ptr< venue_type > p);

      // Constructors.
      //
      event (const eid_type&,
             const name_type&,
             const tagline_type&,
             const nid_type&,
             const pic_type&,
             const pic_big_type&,
             const pic_small_type&,
             const host_type&,
             const description_type&,
             const event_type_type&,
             const event_subtype_type&,
             const start_time_type&,
             const end_time_type&,
             const creator_type&,
             const update_time_type&,
             const location_type&,
             const venue_type&);

      event (const xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      event (const event& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      virtual event*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~event ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< eid_type > eid_;
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< tagline_type > tagline_;
      ::xsd::cxx::tree::one< nid_type > nid_;
      ::xsd::cxx::tree::one< pic_type > pic_;
      ::xsd::cxx::tree::one< pic_big_type > pic_big_;
      ::xsd::cxx::tree::one< pic_small_type > pic_small_;
      ::xsd::cxx::tree::one< host_type > host_;
      ::xsd::cxx::tree::one< description_type > description_;
      ::xsd::cxx::tree::one< event_type_type > event_type_;
      ::xsd::cxx::tree::one< event_subtype_type > event_subtype_;
      ::xsd::cxx::tree::one< start_time_type > start_time_;
      ::xsd::cxx::tree::one< end_time_type > end_time_;
      ::xsd::cxx::tree::one< creator_type > creator_;
      ::xsd::cxx::tree::one< update_time_type > update_time_;
      ::xsd::cxx::tree::one< location_type > location_;
      ::xsd::cxx::tree::one< venue_type > venue_;
    };

    class event_member: public ::xml_schema::type
    {
      public:
      // uid
      // 
      typedef ::FacebookCpp::XSD::uid uid_type;
      typedef ::xsd::cxx::tree::traits< uid_type, char > uid_traits;

      const uid_type&
      uid () const;

      uid_type&
      uid ();

      void
      uid (const uid_type& x);

      void
      uid (::std::auto_ptr< uid_type > p);

      // oid
      // 
      typedef ::FacebookCpp::XSD::eid oid_type;
      typedef ::xsd::cxx::tree::traits< oid_type, char > oid_traits;

      const oid_type&
      oid () const;

      oid_type&
      oid ();

      void
      oid (const oid_type& x);

      void
      oid (::std::auto_ptr< oid_type > p);

      // attending
      // 
      typedef ::xml_schema::string attending_type;
      typedef ::xsd::cxx::tree::traits< attending_type, char > attending_traits;

      const attending_type&
      attending () const;

      attending_type&
      attending ();

      void
      attending (const attending_type& x);

      void
      attending (::std::auto_ptr< attending_type > p);

      // Constructors.
      //
      event_member (const uid_type&,
                    const oid_type&,
                    const attending_type&);

      event_member (const xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      event_member (const event_member& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual event_member*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~event_member ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< uid_type > uid_;
      ::xsd::cxx::tree::one< oid_type > oid_;
      ::xsd::cxx::tree::one< attending_type > attending_;
    };

    class group: public ::xml_schema::type
    {
      public:
      // gid
      // 
      typedef ::FacebookCpp::XSD::gid gid_type;
      typedef ::xsd::cxx::tree::traits< gid_type, char > gid_traits;

      const gid_type&
      gid () const;

      gid_type&
      gid ();

      void
      gid (const gid_type& x);

      void
      gid (::std::auto_ptr< gid_type > p);

      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // nid
      // 
      typedef ::FacebookCpp::XSD::nid nid_type;
      typedef ::xsd::cxx::tree::traits< nid_type, char > nid_traits;

      const nid_type&
      nid () const;

      nid_type&
      nid ();

      void
      nid (const nid_type& x);

      void
      nid (::std::auto_ptr< nid_type > p);

      // description
      // 
      typedef ::xml_schema::string description_type;
      typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

      const description_type&
      description () const;

      description_type&
      description ();

      void
      description (const description_type& x);

      void
      description (::std::auto_ptr< description_type > p);

      // group_type
      // 
      typedef ::xml_schema::string group_type_type;
      typedef ::xsd::cxx::tree::traits< group_type_type, char > group_type_traits;

      const group_type_type&
      group_type () const;

      group_type_type&
      group_type ();

      void
      group_type (const group_type_type& x);

      void
      group_type (::std::auto_ptr< group_type_type > p);

      // group_subtype
      // 
      typedef ::xml_schema::string group_subtype_type;
      typedef ::xsd::cxx::tree::traits< group_subtype_type, char > group_subtype_traits;

      const group_subtype_type&
      group_subtype () const;

      group_subtype_type&
      group_subtype ();

      void
      group_subtype (const group_subtype_type& x);

      void
      group_subtype (::std::auto_ptr< group_subtype_type > p);

      // recent_news
      // 
      typedef ::xml_schema::string recent_news_type;
      typedef ::xsd::cxx::tree::traits< recent_news_type, char > recent_news_traits;

      const recent_news_type&
      recent_news () const;

      recent_news_type&
      recent_news ();

      void
      recent_news (const recent_news_type& x);

      void
      recent_news (::std::auto_ptr< recent_news_type > p);

      // pic
      // 
      typedef ::xml_schema::string pic_type;
      typedef ::xsd::cxx::tree::traits< pic_type, char > pic_traits;

      const pic_type&
      pic () const;

      pic_type&
      pic ();

      void
      pic (const pic_type& x);

      void
      pic (::std::auto_ptr< pic_type > p);

      // pic_big
      // 
      typedef ::xml_schema::string pic_big_type;
      typedef ::xsd::cxx::tree::traits< pic_big_type, char > pic_big_traits;

      const pic_big_type&
      pic_big () const;

      pic_big_type&
      pic_big ();

      void
      pic_big (const pic_big_type& x);

      void
      pic_big (::std::auto_ptr< pic_big_type > p);

      // pic_small
      // 
      typedef ::xml_schema::string pic_small_type;
      typedef ::xsd::cxx::tree::traits< pic_small_type, char > pic_small_traits;

      const pic_small_type&
      pic_small () const;

      pic_small_type&
      pic_small ();

      void
      pic_small (const pic_small_type& x);

      void
      pic_small (::std::auto_ptr< pic_small_type > p);

      // creator
      // 
      typedef ::FacebookCpp::XSD::uid creator_type;
      typedef ::xsd::cxx::tree::traits< creator_type, char > creator_traits;

      const creator_type&
      creator () const;

      creator_type&
      creator ();

      void
      creator (const creator_type& x);

      void
      creator (::std::auto_ptr< creator_type > p);

      // update_time
      // 
      typedef ::FacebookCpp::XSD::time update_time_type;
      typedef ::xsd::cxx::tree::traits< update_time_type, char > update_time_traits;

      const update_time_type&
      update_time () const;

      update_time_type&
      update_time ();

      void
      update_time (const update_time_type& x);

      void
      update_time (::std::auto_ptr< update_time_type > p);

      // office
      // 
      typedef ::xml_schema::string office_type;
      typedef ::xsd::cxx::tree::traits< office_type, char > office_traits;

      const office_type&
      office () const;

      office_type&
      office ();

      void
      office (const office_type& x);

      void
      office (::std::auto_ptr< office_type > p);

      // website
      // 
      typedef ::xml_schema::string website_type;
      typedef ::xsd::cxx::tree::traits< website_type, char > website_traits;

      const website_type&
      website () const;

      website_type&
      website ();

      void
      website (const website_type& x);

      void
      website (::std::auto_ptr< website_type > p);

      // venue
      // 
      typedef ::FacebookCpp::XSD::location venue_type;
      typedef ::xsd::cxx::tree::traits< venue_type, char > venue_traits;

      const venue_type&
      venue () const;

      venue_type&
      venue ();

      void
      venue (const venue_type& x);

      void
      venue (::std::auto_ptr< venue_type > p);

      // Constructors.
      //
      group (const gid_type&,
             const name_type&,
             const nid_type&,
             const description_type&,
             const group_type_type&,
             const group_subtype_type&,
             const recent_news_type&,
             const pic_type&,
             const pic_big_type&,
             const pic_small_type&,
             const creator_type&,
             const update_time_type&,
             const office_type&,
             const website_type&,
             const venue_type&);

      group (const xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      group (const group& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      virtual group*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~group ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< gid_type > gid_;
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< nid_type > nid_;
      ::xsd::cxx::tree::one< description_type > description_;
      ::xsd::cxx::tree::one< group_type_type > group_type_;
      ::xsd::cxx::tree::one< group_subtype_type > group_subtype_;
      ::xsd::cxx::tree::one< recent_news_type > recent_news_;
      ::xsd::cxx::tree::one< pic_type > pic_;
      ::xsd::cxx::tree::one< pic_big_type > pic_big_;
      ::xsd::cxx::tree::one< pic_small_type > pic_small_;
      ::xsd::cxx::tree::one< creator_type > creator_;
      ::xsd::cxx::tree::one< update_time_type > update_time_;
      ::xsd::cxx::tree::one< office_type > office_;
      ::xsd::cxx::tree::one< website_type > website_;
      ::xsd::cxx::tree::one< venue_type > venue_;
    };

    class group_member: public ::xml_schema::type
    {
      public:
      // uid
      // 
      typedef ::FacebookCpp::XSD::uid uid_type;
      typedef ::xsd::cxx::tree::traits< uid_type, char > uid_traits;

      const uid_type&
      uid () const;

      uid_type&
      uid ();

      void
      uid (const uid_type& x);

      void
      uid (::std::auto_ptr< uid_type > p);

      // gid
      // 
      typedef ::FacebookCpp::XSD::gid gid_type;
      typedef ::xsd::cxx::tree::traits< gid_type, char > gid_traits;

      const gid_type&
      gid () const;

      gid_type&
      gid ();

      void
      gid (const gid_type& x);

      void
      gid (::std::auto_ptr< gid_type > p);

      // positions
      // 
      typedef ::FacebookCpp::XSD::positions positions_type;
      typedef ::xsd::cxx::tree::traits< positions_type, char > positions_traits;

      const positions_type&
      positions () const;

      positions_type&
      positions ();

      void
      positions (const positions_type& x);

      void
      positions (::std::auto_ptr< positions_type > p);

      // Constructors.
      //
      group_member (const uid_type&,
                    const gid_type&,
                    const positions_type&);

      group_member (const xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      group_member (const group_member& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual group_member*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~group_member ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< uid_type > uid_;
      ::xsd::cxx::tree::one< gid_type > gid_;
      ::xsd::cxx::tree::one< positions_type > positions_;
    };

    class group_members: public ::xml_schema::type
    {
      public:
      // members
      // 
      typedef ::FacebookCpp::XSD::members members_type;
      typedef ::xsd::cxx::tree::traits< members_type, char > members_traits;

      const members_type&
      members () const;

      members_type&
      members ();

      void
      members (const members_type& x);

      void
      members (::std::auto_ptr< members_type > p);

      // admins
      // 
      typedef ::FacebookCpp::XSD::admins admins_type;
      typedef ::xsd::cxx::tree::traits< admins_type, char > admins_traits;

      const admins_type&
      admins () const;

      admins_type&
      admins ();

      void
      admins (const admins_type& x);

      void
      admins (::std::auto_ptr< admins_type > p);

      // officers
      // 
      typedef ::FacebookCpp::XSD::officers officers_type;
      typedef ::xsd::cxx::tree::traits< officers_type, char > officers_traits;

      const officers_type&
      officers () const;

      officers_type&
      officers ();

      void
      officers (const officers_type& x);

      void
      officers (::std::auto_ptr< officers_type > p);

      // not_replied
      // 
      typedef ::FacebookCpp::XSD::not_replied not_replied_type;
      typedef ::xsd::cxx::tree::traits< not_replied_type, char > not_replied_traits;

      const not_replied_type&
      not_replied () const;

      not_replied_type&
      not_replied ();

      void
      not_replied (const not_replied_type& x);

      void
      not_replied (::std::auto_ptr< not_replied_type > p);

      // Constructors.
      //
      group_members (const members_type&,
                     const admins_type&,
                     const officers_type&,
                     const not_replied_type&);

      group_members (const xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      group_members (const group_members& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual group_members*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~group_members ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< members_type > members_;
      ::xsd::cxx::tree::one< admins_type > admins_;
      ::xsd::cxx::tree::one< officers_type > officers_;
      ::xsd::cxx::tree::one< not_replied_type > not_replied_;
    };

    class event_members: public ::xml_schema::type
    {
      public:
      // attending
      // 
      typedef ::FacebookCpp::XSD::attending attending_type;
      typedef ::xsd::cxx::tree::traits< attending_type, char > attending_traits;

      const attending_type&
      attending () const;

      attending_type&
      attending ();

      void
      attending (const attending_type& x);

      void
      attending (::std::auto_ptr< attending_type > p);

      // unsure
      // 
      typedef ::FacebookCpp::XSD::unsure unsure_type;
      typedef ::xsd::cxx::tree::traits< unsure_type, char > unsure_traits;

      const unsure_type&
      unsure () const;

      unsure_type&
      unsure ();

      void
      unsure (const unsure_type& x);

      void
      unsure (::std::auto_ptr< unsure_type > p);

      // declined
      // 
      typedef ::FacebookCpp::XSD::declined declined_type;
      typedef ::xsd::cxx::tree::traits< declined_type, char > declined_traits;

      const declined_type&
      declined () const;

      declined_type&
      declined ();

      void
      declined (const declined_type& x);

      void
      declined (::std::auto_ptr< declined_type > p);

      // not_replied
      // 
      typedef ::FacebookCpp::XSD::not_replied1 not_replied_type;
      typedef ::xsd::cxx::tree::traits< not_replied_type, char > not_replied_traits;

      const not_replied_type&
      not_replied () const;

      not_replied_type&
      not_replied ();

      void
      not_replied (const not_replied_type& x);

      void
      not_replied (::std::auto_ptr< not_replied_type > p);

      // Constructors.
      //
      event_members (const attending_type&,
                     const unsure_type&,
                     const declined_type&,
                     const not_replied_type&);

      event_members (const xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      event_members (const event_members& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual event_members*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~event_members ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< attending_type > attending_;
      ::xsd::cxx::tree::one< unsure_type > unsure_;
      ::xsd::cxx::tree::one< declined_type > declined_;
      ::xsd::cxx::tree::one< not_replied_type > not_replied_;
    };

    class notification_count: public ::xml_schema::type
    {
      public:
      // unread
      // 
      typedef ::xml_schema::int_ unread_type;
      typedef ::xsd::cxx::tree::traits< unread_type, char > unread_traits;

      const unread_type&
      unread () const;

      unread_type&
      unread ();

      void
      unread (const unread_type& x);

      // most_recent
      // 
      typedef ::FacebookCpp::XSD::time most_recent_type;
      typedef ::xsd::cxx::tree::traits< most_recent_type, char > most_recent_traits;

      const most_recent_type&
      most_recent () const;

      most_recent_type&
      most_recent ();

      void
      most_recent (const most_recent_type& x);

      void
      most_recent (::std::auto_ptr< most_recent_type > p);

      // Constructors.
      //
      notification_count (const unread_type&,
                          const most_recent_type&);

      notification_count (const xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      notification_count (const notification_count& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual notification_count*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~notification_count ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< unread_type > unread_;
      ::xsd::cxx::tree::one< most_recent_type > most_recent_;
    };

    class notifications: public ::xml_schema::type
    {
      public:
      // messages
      // 
      typedef ::FacebookCpp::XSD::notification_count messages_type;
      typedef ::xsd::cxx::tree::traits< messages_type, char > messages_traits;

      const messages_type&
      messages () const;

      messages_type&
      messages ();

      void
      messages (const messages_type& x);

      void
      messages (::std::auto_ptr< messages_type > p);

      // pokes
      // 
      typedef ::FacebookCpp::XSD::notification_count pokes_type;
      typedef ::xsd::cxx::tree::traits< pokes_type, char > pokes_traits;

      const pokes_type&
      pokes () const;

      pokes_type&
      pokes ();

      void
      pokes (const pokes_type& x);

      void
      pokes (::std::auto_ptr< pokes_type > p);

      // shares
      // 
      typedef ::FacebookCpp::XSD::notification_count shares_type;
      typedef ::xsd::cxx::tree::traits< shares_type, char > shares_traits;

      const shares_type&
      shares () const;

      shares_type&
      shares ();

      void
      shares (const shares_type& x);

      void
      shares (::std::auto_ptr< shares_type > p);

      // friend_requests
      // 
      typedef ::FacebookCpp::XSD::friend_requests friend_requests_type;
      typedef ::xsd::cxx::tree::traits< friend_requests_type, char > friend_requests_traits;

      const friend_requests_type&
      friend_requests () const;

      friend_requests_type&
      friend_requests ();

      void
      friend_requests (const friend_requests_type& x);

      void
      friend_requests (::std::auto_ptr< friend_requests_type > p);

      // group_invites
      // 
      typedef ::FacebookCpp::XSD::group_invites group_invites_type;
      typedef ::xsd::cxx::tree::traits< group_invites_type, char > group_invites_traits;

      const group_invites_type&
      group_invites () const;

      group_invites_type&
      group_invites ();

      void
      group_invites (const group_invites_type& x);

      void
      group_invites (::std::auto_ptr< group_invites_type > p);

      // event_invites
      // 
      typedef ::FacebookCpp::XSD::event_invites event_invites_type;
      typedef ::xsd::cxx::tree::traits< event_invites_type, char > event_invites_traits;

      const event_invites_type&
      event_invites () const;

      event_invites_type&
      event_invites ();

      void
      event_invites (const event_invites_type& x);

      void
      event_invites (::std::auto_ptr< event_invites_type > p);

      // Constructors.
      //
      notifications (const messages_type&,
                     const pokes_type&,
                     const shares_type&,
                     const friend_requests_type&,
                     const group_invites_type&,
                     const event_invites_type&);

      notifications (const xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      notifications (const notifications& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual notifications*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~notifications ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< messages_type > messages_;
      ::xsd::cxx::tree::one< pokes_type > pokes_;
      ::xsd::cxx::tree::one< shares_type > shares_;
      ::xsd::cxx::tree::one< friend_requests_type > friend_requests_;
      ::xsd::cxx::tree::one< group_invites_type > group_invites_;
      ::xsd::cxx::tree::one< event_invites_type > event_invites_;
    };

    class photo: public ::xml_schema::type
    {
      public:
      // pid
      // 
      typedef ::FacebookCpp::XSD::pid pid_type;
      typedef ::xsd::cxx::tree::traits< pid_type, char > pid_traits;

      const pid_type&
      pid () const;

      pid_type&
      pid ();

      void
      pid (const pid_type& x);

      void
      pid (::std::auto_ptr< pid_type > p);

      // aid
      // 
      typedef ::FacebookCpp::XSD::aid aid_type;
      typedef ::xsd::cxx::tree::traits< aid_type, char > aid_traits;

      const aid_type&
      aid () const;

      aid_type&
      aid ();

      void
      aid (const aid_type& x);

      void
      aid (::std::auto_ptr< aid_type > p);

      // owner
      // 
      typedef ::FacebookCpp::XSD::uid owner_type;
      typedef ::xsd::cxx::tree::traits< owner_type, char > owner_traits;

      const owner_type&
      owner () const;

      owner_type&
      owner ();

      void
      owner (const owner_type& x);

      void
      owner (::std::auto_ptr< owner_type > p);

      // src
      // 
      typedef ::xml_schema::string src_type;
      typedef ::xsd::cxx::tree::traits< src_type, char > src_traits;

      const src_type&
      src () const;

      src_type&
      src ();

      void
      src (const src_type& x);

      void
      src (::std::auto_ptr< src_type > p);

      // src_big
      // 
      typedef ::xml_schema::string src_big_type;
      typedef ::xsd::cxx::tree::traits< src_big_type, char > src_big_traits;

      const src_big_type&
      src_big () const;

      src_big_type&
      src_big ();

      void
      src_big (const src_big_type& x);

      void
      src_big (::std::auto_ptr< src_big_type > p);

      // src_small
      // 
      typedef ::xml_schema::string src_small_type;
      typedef ::xsd::cxx::tree::traits< src_small_type, char > src_small_traits;

      const src_small_type&
      src_small () const;

      src_small_type&
      src_small ();

      void
      src_small (const src_small_type& x);

      void
      src_small (::std::auto_ptr< src_small_type > p);

      // link
      // 
      typedef ::xml_schema::string link_type;
      typedef ::xsd::cxx::tree::traits< link_type, char > link_traits;

      const link_type&
      link () const;

      link_type&
      link ();

      void
      link (const link_type& x);

      void
      link (::std::auto_ptr< link_type > p);

      // caption
      // 
      typedef ::xml_schema::string caption_type;
      typedef ::xsd::cxx::tree::traits< caption_type, char > caption_traits;

      const caption_type&
      caption () const;

      caption_type&
      caption ();

      void
      caption (const caption_type& x);

      void
      caption (::std::auto_ptr< caption_type > p);

      // created
      // 
      typedef ::FacebookCpp::XSD::time created_type;
      typedef ::xsd::cxx::tree::traits< created_type, char > created_traits;

      const created_type&
      created () const;

      created_type&
      created ();

      void
      created (const created_type& x);

      void
      created (::std::auto_ptr< created_type > p);

      // Constructors.
      //
      photo (const pid_type&,
             const aid_type&,
             const owner_type&,
             const src_type&,
             const src_big_type&,
             const src_small_type&,
             const link_type&,
             const caption_type&,
             const created_type&);

      photo (const xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      photo (const photo& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      virtual photo*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~photo ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< pid_type > pid_;
      ::xsd::cxx::tree::one< aid_type > aid_;
      ::xsd::cxx::tree::one< owner_type > owner_;
      ::xsd::cxx::tree::one< src_type > src_;
      ::xsd::cxx::tree::one< src_big_type > src_big_;
      ::xsd::cxx::tree::one< src_small_type > src_small_;
      ::xsd::cxx::tree::one< link_type > link_;
      ::xsd::cxx::tree::one< caption_type > caption_;
      ::xsd::cxx::tree::one< created_type > created_;
    };

    class photo_tag: public ::xml_schema::type
    {
      public:
      // pid
      // 
      typedef ::FacebookCpp::XSD::pid pid_type;
      typedef ::xsd::cxx::tree::traits< pid_type, char > pid_traits;

      const pid_type&
      pid () const;

      pid_type&
      pid ();

      void
      pid (const pid_type& x);

      void
      pid (::std::auto_ptr< pid_type > p);

      // subject
      // 
      typedef ::FacebookCpp::XSD::uid subject_type;
      typedef ::xsd::cxx::tree::optional< subject_type > subject_optional;
      typedef ::xsd::cxx::tree::traits< subject_type, char > subject_traits;

      const subject_optional&
      subject () const;

      subject_optional&
      subject ();

      void
      subject (const subject_type& x);

      void
      subject (const subject_optional& x);

      void
      subject (::std::auto_ptr< subject_type > p);

      // text
      // 
      typedef ::xml_schema::string text_type;
      typedef ::xsd::cxx::tree::optional< text_type > text_optional;
      typedef ::xsd::cxx::tree::traits< text_type, char > text_traits;

      const text_optional&
      text () const;

      text_optional&
      text ();

      void
      text (const text_type& x);

      void
      text (const text_optional& x);

      void
      text (::std::auto_ptr< text_type > p);

      // xcoord
      // 
      typedef ::xml_schema::decimal xcoord_type;
      typedef ::xsd::cxx::tree::traits< xcoord_type, char > xcoord_traits;

      const xcoord_type&
      xcoord () const;

      xcoord_type&
      xcoord ();

      void
      xcoord (const xcoord_type& x);

      // ycoord
      // 
      typedef ::xml_schema::decimal ycoord_type;
      typedef ::xsd::cxx::tree::traits< ycoord_type, char > ycoord_traits;

      const ycoord_type&
      ycoord () const;

      ycoord_type&
      ycoord ();

      void
      ycoord (const ycoord_type& x);

      // created
      // 
      typedef ::FacebookCpp::XSD::time created_type;
      typedef ::xsd::cxx::tree::traits< created_type, char > created_traits;

      const created_type&
      created () const;

      created_type&
      created ();

      void
      created (const created_type& x);

      void
      created (::std::auto_ptr< created_type > p);

      // Constructors.
      //
      photo_tag (const pid_type&,
                 const xcoord_type&,
                 const ycoord_type&,
                 const created_type&);

      photo_tag (const xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      photo_tag (const photo_tag& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual photo_tag*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~photo_tag ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< pid_type > pid_;
      subject_optional subject_;
      text_optional text_;
      ::xsd::cxx::tree::one< xcoord_type > xcoord_;
      ::xsd::cxx::tree::one< ycoord_type > ycoord_;
      ::xsd::cxx::tree::one< created_type > created_;
    };

    class album: public ::xml_schema::type
    {
      public:
      // aid
      // 
      typedef ::FacebookCpp::XSD::aid aid_type;
      typedef ::xsd::cxx::tree::traits< aid_type, char > aid_traits;

      const aid_type&
      aid () const;

      aid_type&
      aid ();

      void
      aid (const aid_type& x);

      void
      aid (::std::auto_ptr< aid_type > p);

      // cover_pid
      // 
      typedef ::FacebookCpp::XSD::pid cover_pid_type;
      typedef ::xsd::cxx::tree::traits< cover_pid_type, char > cover_pid_traits;

      const cover_pid_type&
      cover_pid () const;

      cover_pid_type&
      cover_pid ();

      void
      cover_pid (const cover_pid_type& x);

      void
      cover_pid (::std::auto_ptr< cover_pid_type > p);

      // owner
      // 
      typedef ::FacebookCpp::XSD::uid owner_type;
      typedef ::xsd::cxx::tree::traits< owner_type, char > owner_traits;

      const owner_type&
      owner () const;

      owner_type&
      owner ();

      void
      owner (const owner_type& x);

      void
      owner (::std::auto_ptr< owner_type > p);

      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // created
      // 
      typedef ::FacebookCpp::XSD::time created_type;
      typedef ::xsd::cxx::tree::traits< created_type, char > created_traits;

      const created_type&
      created () const;

      created_type&
      created ();

      void
      created (const created_type& x);

      void
      created (::std::auto_ptr< created_type > p);

      // modified
      // 
      typedef ::FacebookCpp::XSD::time modified_type;
      typedef ::xsd::cxx::tree::traits< modified_type, char > modified_traits;

      const modified_type&
      modified () const;

      modified_type&
      modified ();

      void
      modified (const modified_type& x);

      void
      modified (::std::auto_ptr< modified_type > p);

      // description
      // 
      typedef ::xml_schema::string description_type;
      typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

      const description_type&
      description () const;

      description_type&
      description ();

      void
      description (const description_type& x);

      void
      description (::std::auto_ptr< description_type > p);

      // location
      // 
      typedef ::xml_schema::string location_type;
      typedef ::xsd::cxx::tree::traits< location_type, char > location_traits;

      const location_type&
      location () const;

      location_type&
      location ();

      void
      location (const location_type& x);

      void
      location (::std::auto_ptr< location_type > p);

      // link
      // 
      typedef ::xml_schema::string link_type;
      typedef ::xsd::cxx::tree::traits< link_type, char > link_traits;

      const link_type&
      link () const;

      link_type&
      link ();

      void
      link (const link_type& x);

      void
      link (::std::auto_ptr< link_type > p);

      // size
      // 
      typedef ::xml_schema::int_ size_type;
      typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

      const size_type&
      size () const;

      size_type&
      size ();

      void
      size (const size_type& x);

      // Constructors.
      //
      album (const aid_type&,
             const cover_pid_type&,
             const owner_type&,
             const name_type&,
             const created_type&,
             const modified_type&,
             const description_type&,
             const location_type&,
             const link_type&,
             const size_type&);

      album (const xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      album (const album& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      virtual album*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~album ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< aid_type > aid_;
      ::xsd::cxx::tree::one< cover_pid_type > cover_pid_;
      ::xsd::cxx::tree::one< owner_type > owner_;
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< created_type > created_;
      ::xsd::cxx::tree::one< modified_type > modified_;
      ::xsd::cxx::tree::one< description_type > description_;
      ::xsd::cxx::tree::one< location_type > location_;
      ::xsd::cxx::tree::one< link_type > link_;
      ::xsd::cxx::tree::one< size_type > size_;
    };

    class affiliation: public ::xml_schema::type
    {
      public:
      // nid
      // 
      typedef ::FacebookCpp::XSD::nid nid_type;
      typedef ::xsd::cxx::tree::traits< nid_type, char > nid_traits;

      const nid_type&
      nid () const;

      nid_type&
      nid ();

      void
      nid (const nid_type& x);

      void
      nid (::std::auto_ptr< nid_type > p);

      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // type
      // 
      typedef ::xml_schema::string type_type;
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      const type_type&
      type () const;

      type_type&
      type ();

      void
      type (const type_type& x);

      void
      type (::std::auto_ptr< type_type > p);

      // status
      // 
      typedef ::xml_schema::string status_type;
      typedef ::xsd::cxx::tree::traits< status_type, char > status_traits;

      const status_type&
      status () const;

      status_type&
      status ();

      void
      status (const status_type& x);

      void
      status (::std::auto_ptr< status_type > p);

      // year
      // 
      typedef ::FacebookCpp::XSD::year year_type;
      typedef ::xsd::cxx::tree::traits< year_type, char > year_traits;

      const year_type&
      year () const;

      year_type&
      year ();

      void
      year (const year_type& x);

      void
      year (::std::auto_ptr< year_type > p);

      // Constructors.
      //
      affiliation (const nid_type&,
                   const name_type&,
                   const type_type&,
                   const status_type&,
                   const year_type&);

      affiliation (const xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      affiliation (const affiliation& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual affiliation*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~affiliation ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< nid_type > nid_;
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< type_type > type_;
      ::xsd::cxx::tree::one< status_type > status_;
      ::xsd::cxx::tree::one< year_type > year_;
    };

    class hs_info: public ::xml_schema::type
    {
      public:
      // hs1_name
      // 
      typedef ::xml_schema::string hs1_name_type;
      typedef ::xsd::cxx::tree::optional< hs1_name_type > hs1_name_optional;
      typedef ::xsd::cxx::tree::traits< hs1_name_type, char > hs1_name_traits;

      const hs1_name_optional&
      hs1_name () const;

      hs1_name_optional&
      hs1_name ();

      void
      hs1_name (const hs1_name_type& x);

      void
      hs1_name (const hs1_name_optional& x);

      void
      hs1_name (::std::auto_ptr< hs1_name_type > p);

      // hs2_name
      // 
      typedef ::xml_schema::string hs2_name_type;
      typedef ::xsd::cxx::tree::optional< hs2_name_type > hs2_name_optional;
      typedef ::xsd::cxx::tree::traits< hs2_name_type, char > hs2_name_traits;

      const hs2_name_optional&
      hs2_name () const;

      hs2_name_optional&
      hs2_name ();

      void
      hs2_name (const hs2_name_type& x);

      void
      hs2_name (const hs2_name_optional& x);

      void
      hs2_name (::std::auto_ptr< hs2_name_type > p);

      // grad_year
      // 
      typedef ::FacebookCpp::XSD::year grad_year_type;
      typedef ::xsd::cxx::tree::optional< grad_year_type > grad_year_optional;
      typedef ::xsd::cxx::tree::traits< grad_year_type, char > grad_year_traits;

      const grad_year_optional&
      grad_year () const;

      grad_year_optional&
      grad_year ();

      void
      grad_year (const grad_year_type& x);

      void
      grad_year (const grad_year_optional& x);

      void
      grad_year (::std::auto_ptr< grad_year_type > p);

      // hs1_id
      // 
      typedef ::FacebookCpp::XSD::hsid hs1_id_type;
      typedef ::xsd::cxx::tree::optional< hs1_id_type > hs1_id_optional;
      typedef ::xsd::cxx::tree::traits< hs1_id_type, char > hs1_id_traits;

      const hs1_id_optional&
      hs1_id () const;

      hs1_id_optional&
      hs1_id ();

      void
      hs1_id (const hs1_id_type& x);

      void
      hs1_id (const hs1_id_optional& x);

      void
      hs1_id (::std::auto_ptr< hs1_id_type > p);

      // hs2_id
      // 
      typedef ::FacebookCpp::XSD::hsid hs2_id_type;
      typedef ::xsd::cxx::tree::optional< hs2_id_type > hs2_id_optional;
      typedef ::xsd::cxx::tree::traits< hs2_id_type, char > hs2_id_traits;

      const hs2_id_optional&
      hs2_id () const;

      hs2_id_optional&
      hs2_id ();

      void
      hs2_id (const hs2_id_type& x);

      void
      hs2_id (const hs2_id_optional& x);

      void
      hs2_id (::std::auto_ptr< hs2_id_type > p);

      // Constructors.
      //
      hs_info ();

      hs_info (const xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      hs_info (const hs_info& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      virtual hs_info*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~hs_info ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      hs1_name_optional hs1_name_;
      hs2_name_optional hs2_name_;
      grad_year_optional grad_year_;
      hs1_id_optional hs1_id_;
      hs2_id_optional hs2_id_;
    };

    class education_info: public ::xml_schema::type
    {
      public:
      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // year
      // 
      typedef ::FacebookCpp::XSD::year year_type;
      typedef ::xsd::cxx::tree::traits< year_type, char > year_traits;

      const year_type&
      year () const;

      year_type&
      year ();

      void
      year (const year_type& x);

      void
      year (::std::auto_ptr< year_type > p);

      // concentrations
      // 
      typedef ::FacebookCpp::XSD::concentrations concentrations_type;
      typedef ::xsd::cxx::tree::traits< concentrations_type, char > concentrations_traits;

      const concentrations_type&
      concentrations () const;

      concentrations_type&
      concentrations ();

      void
      concentrations (const concentrations_type& x);

      void
      concentrations (::std::auto_ptr< concentrations_type > p);

      // degree
      // 
      typedef ::xml_schema::string degree_type;
      typedef ::xsd::cxx::tree::traits< degree_type, char > degree_traits;

      const degree_type&
      degree () const;

      degree_type&
      degree ();

      void
      degree (const degree_type& x);

      void
      degree (::std::auto_ptr< degree_type > p);

      // Constructors.
      //
      education_info (const name_type&,
                      const year_type&,
                      const concentrations_type&,
                      const degree_type&);

      education_info (const xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      education_info (const education_info& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual education_info*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~education_info ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< year_type > year_;
      ::xsd::cxx::tree::one< concentrations_type > concentrations_;
      ::xsd::cxx::tree::one< degree_type > degree_;
    };

    class work_info: public ::xml_schema::type
    {
      public:
      // location
      // 
      typedef ::FacebookCpp::XSD::location location_type;
      typedef ::xsd::cxx::tree::traits< location_type, char > location_traits;

      const location_type&
      location () const;

      location_type&
      location ();

      void
      location (const location_type& x);

      void
      location (::std::auto_ptr< location_type > p);

      // company_name
      // 
      typedef ::xml_schema::string company_name_type;
      typedef ::xsd::cxx::tree::traits< company_name_type, char > company_name_traits;

      const company_name_type&
      company_name () const;

      company_name_type&
      company_name ();

      void
      company_name (const company_name_type& x);

      void
      company_name (::std::auto_ptr< company_name_type > p);

      // position
      // 
      typedef ::xml_schema::string position_type;
      typedef ::xsd::cxx::tree::traits< position_type, char > position_traits;

      const position_type&
      position () const;

      position_type&
      position ();

      void
      position (const position_type& x);

      void
      position (::std::auto_ptr< position_type > p);

      // description
      // 
      typedef ::xml_schema::string description_type;
      typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

      const description_type&
      description () const;

      description_type&
      description ();

      void
      description (const description_type& x);

      void
      description (::std::auto_ptr< description_type > p);

      // start_date
      // 
      typedef ::FacebookCpp::XSD::date start_date_type;
      typedef ::xsd::cxx::tree::traits< start_date_type, char > start_date_traits;

      const start_date_type&
      start_date () const;

      start_date_type&
      start_date ();

      void
      start_date (const start_date_type& x);

      void
      start_date (::std::auto_ptr< start_date_type > p);

      // end_date
      // 
      typedef ::FacebookCpp::XSD::date end_date_type;
      typedef ::xsd::cxx::tree::traits< end_date_type, char > end_date_traits;

      const end_date_type&
      end_date () const;

      end_date_type&
      end_date ();

      void
      end_date (const end_date_type& x);

      void
      end_date (::std::auto_ptr< end_date_type > p);

      // Constructors.
      //
      work_info (const location_type&,
                 const company_name_type&,
                 const position_type&,
                 const description_type&,
                 const start_date_type&,
                 const end_date_type&);

      work_info (const xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      work_info (const work_info& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual work_info*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~work_info ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< location_type > location_;
      ::xsd::cxx::tree::one< company_name_type > company_name_;
      ::xsd::cxx::tree::one< position_type > position_;
      ::xsd::cxx::tree::one< description_type > description_;
      ::xsd::cxx::tree::one< start_date_type > start_date_;
      ::xsd::cxx::tree::one< end_date_type > end_date_;
    };

    class user: public ::xml_schema::type
    {
      public:
      // about_me
      // 
      typedef ::xml_schema::string about_me_type;
      typedef ::xsd::cxx::tree::optional< about_me_type > about_me_optional;
      typedef ::xsd::cxx::tree::traits< about_me_type, char > about_me_traits;

      const about_me_optional&
      about_me () const;

      about_me_optional&
      about_me ();

      void
      about_me (const about_me_type& x);

      void
      about_me (const about_me_optional& x);

      void
      about_me (::std::auto_ptr< about_me_type > p);

      // activities
      // 
      typedef ::xml_schema::string activities_type;
      typedef ::xsd::cxx::tree::optional< activities_type > activities_optional;
      typedef ::xsd::cxx::tree::traits< activities_type, char > activities_traits;

      const activities_optional&
      activities () const;

      activities_optional&
      activities ();

      void
      activities (const activities_type& x);

      void
      activities (const activities_optional& x);

      void
      activities (::std::auto_ptr< activities_type > p);

      // affiliations
      // 
      typedef ::FacebookCpp::XSD::affiliations affiliations_type;
      typedef ::xsd::cxx::tree::optional< affiliations_type > affiliations_optional;
      typedef ::xsd::cxx::tree::traits< affiliations_type, char > affiliations_traits;

      const affiliations_optional&
      affiliations () const;

      affiliations_optional&
      affiliations ();

      void
      affiliations (const affiliations_type& x);

      void
      affiliations (const affiliations_optional& x);

      void
      affiliations (::std::auto_ptr< affiliations_type > p);

      // birthday
      // 
      typedef ::xml_schema::string birthday_type;
      typedef ::xsd::cxx::tree::optional< birthday_type > birthday_optional;
      typedef ::xsd::cxx::tree::traits< birthday_type, char > birthday_traits;

      const birthday_optional&
      birthday () const;

      birthday_optional&
      birthday ();

      void
      birthday (const birthday_type& x);

      void
      birthday (const birthday_optional& x);

      void
      birthday (::std::auto_ptr< birthday_type > p);

      // books
      // 
      typedef ::xml_schema::string books_type;
      typedef ::xsd::cxx::tree::optional< books_type > books_optional;
      typedef ::xsd::cxx::tree::traits< books_type, char > books_traits;

      const books_optional&
      books () const;

      books_optional&
      books ();

      void
      books (const books_type& x);

      void
      books (const books_optional& x);

      void
      books (::std::auto_ptr< books_type > p);

      // current_location
      // 
      typedef ::FacebookCpp::XSD::location current_location_type;
      typedef ::xsd::cxx::tree::optional< current_location_type > current_location_optional;
      typedef ::xsd::cxx::tree::traits< current_location_type, char > current_location_traits;

      const current_location_optional&
      current_location () const;

      current_location_optional&
      current_location ();

      void
      current_location (const current_location_type& x);

      void
      current_location (const current_location_optional& x);

      void
      current_location (::std::auto_ptr< current_location_type > p);

      // education_history
      // 
      typedef ::FacebookCpp::XSD::education_history education_history_type;
      typedef ::xsd::cxx::tree::optional< education_history_type > education_history_optional;
      typedef ::xsd::cxx::tree::traits< education_history_type, char > education_history_traits;

      const education_history_optional&
      education_history () const;

      education_history_optional&
      education_history ();

      void
      education_history (const education_history_type& x);

      void
      education_history (const education_history_optional& x);

      void
      education_history (::std::auto_ptr< education_history_type > p);

      // first_name
      // 
      typedef ::xml_schema::string first_name_type;
      typedef ::xsd::cxx::tree::optional< first_name_type > first_name_optional;
      typedef ::xsd::cxx::tree::traits< first_name_type, char > first_name_traits;

      const first_name_optional&
      first_name () const;

      first_name_optional&
      first_name ();

      void
      first_name (const first_name_type& x);

      void
      first_name (const first_name_optional& x);

      void
      first_name (::std::auto_ptr< first_name_type > p);

      // hometown_location
      // 
      typedef ::FacebookCpp::XSD::location hometown_location_type;
      typedef ::xsd::cxx::tree::optional< hometown_location_type > hometown_location_optional;
      typedef ::xsd::cxx::tree::traits< hometown_location_type, char > hometown_location_traits;

      const hometown_location_optional&
      hometown_location () const;

      hometown_location_optional&
      hometown_location ();

      void
      hometown_location (const hometown_location_type& x);

      void
      hometown_location (const hometown_location_optional& x);

      void
      hometown_location (::std::auto_ptr< hometown_location_type > p);

      // hs_info
      // 
      typedef ::FacebookCpp::XSD::hs_info hs_info_type;
      typedef ::xsd::cxx::tree::optional< hs_info_type > hs_info_optional;
      typedef ::xsd::cxx::tree::traits< hs_info_type, char > hs_info_traits;

      const hs_info_optional&
      hs_info () const;

      hs_info_optional&
      hs_info ();

      void
      hs_info (const hs_info_type& x);

      void
      hs_info (const hs_info_optional& x);

      void
      hs_info (::std::auto_ptr< hs_info_type > p);

      // interests
      // 
      typedef ::xml_schema::string interests_type;
      typedef ::xsd::cxx::tree::optional< interests_type > interests_optional;
      typedef ::xsd::cxx::tree::traits< interests_type, char > interests_traits;

      const interests_optional&
      interests () const;

      interests_optional&
      interests ();

      void
      interests (const interests_type& x);

      void
      interests (const interests_optional& x);

      void
      interests (::std::auto_ptr< interests_type > p);

      // is_app_user
      // 
      typedef ::xml_schema::boolean is_app_user_type;
      typedef ::xsd::cxx::tree::optional< is_app_user_type > is_app_user_optional;
      typedef ::xsd::cxx::tree::traits< is_app_user_type, char > is_app_user_traits;

      const is_app_user_optional&
      is_app_user () const;

      is_app_user_optional&
      is_app_user ();

      void
      is_app_user (const is_app_user_type& x);

      void
      is_app_user (const is_app_user_optional& x);

      // last_name
      // 
      typedef ::xml_schema::string last_name_type;
      typedef ::xsd::cxx::tree::optional< last_name_type > last_name_optional;
      typedef ::xsd::cxx::tree::traits< last_name_type, char > last_name_traits;

      const last_name_optional&
      last_name () const;

      last_name_optional&
      last_name ();

      void
      last_name (const last_name_type& x);

      void
      last_name (const last_name_optional& x);

      void
      last_name (::std::auto_ptr< last_name_type > p);

      // meeting_for
      // 
      typedef ::FacebookCpp::XSD::meeting_for meeting_for_type;
      typedef ::xsd::cxx::tree::optional< meeting_for_type > meeting_for_optional;
      typedef ::xsd::cxx::tree::traits< meeting_for_type, char > meeting_for_traits;

      const meeting_for_optional&
      meeting_for () const;

      meeting_for_optional&
      meeting_for ();

      void
      meeting_for (const meeting_for_type& x);

      void
      meeting_for (const meeting_for_optional& x);

      void
      meeting_for (::std::auto_ptr< meeting_for_type > p);

      // meeting_sex
      // 
      typedef ::FacebookCpp::XSD::meeting_sex meeting_sex_type;
      typedef ::xsd::cxx::tree::optional< meeting_sex_type > meeting_sex_optional;
      typedef ::xsd::cxx::tree::traits< meeting_sex_type, char > meeting_sex_traits;

      const meeting_sex_optional&
      meeting_sex () const;

      meeting_sex_optional&
      meeting_sex ();

      void
      meeting_sex (const meeting_sex_type& x);

      void
      meeting_sex (const meeting_sex_optional& x);

      void
      meeting_sex (::std::auto_ptr< meeting_sex_type > p);

      // movies
      // 
      typedef ::xml_schema::string movies_type;
      typedef ::xsd::cxx::tree::optional< movies_type > movies_optional;
      typedef ::xsd::cxx::tree::traits< movies_type, char > movies_traits;

      const movies_optional&
      movies () const;

      movies_optional&
      movies ();

      void
      movies (const movies_type& x);

      void
      movies (const movies_optional& x);

      void
      movies (::std::auto_ptr< movies_type > p);

      // music
      // 
      typedef ::xml_schema::string music_type;
      typedef ::xsd::cxx::tree::optional< music_type > music_optional;
      typedef ::xsd::cxx::tree::traits< music_type, char > music_traits;

      const music_optional&
      music () const;

      music_optional&
      music ();

      void
      music (const music_type& x);

      void
      music (const music_optional& x);

      void
      music (::std::auto_ptr< music_type > p);

      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::optional< name_type > name_optional;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_optional&
      name () const;

      name_optional&
      name ();

      void
      name (const name_type& x);

      void
      name (const name_optional& x);

      void
      name (::std::auto_ptr< name_type > p);

      // notes_count
      // 
      typedef ::xml_schema::int_ notes_count_type;
      typedef ::xsd::cxx::tree::optional< notes_count_type > notes_count_optional;
      typedef ::xsd::cxx::tree::traits< notes_count_type, char > notes_count_traits;

      const notes_count_optional&
      notes_count () const;

      notes_count_optional&
      notes_count ();

      void
      notes_count (const notes_count_type& x);

      void
      notes_count (const notes_count_optional& x);

      // pic
      // 
      typedef ::xml_schema::string pic_type;
      typedef ::xsd::cxx::tree::optional< pic_type > pic_optional;
      typedef ::xsd::cxx::tree::traits< pic_type, char > pic_traits;

      const pic_optional&
      pic () const;

      pic_optional&
      pic ();

      void
      pic (const pic_type& x);

      void
      pic (const pic_optional& x);

      void
      pic (::std::auto_ptr< pic_type > p);

      // pic_big
      // 
      typedef ::xml_schema::string pic_big_type;
      typedef ::xsd::cxx::tree::optional< pic_big_type > pic_big_optional;
      typedef ::xsd::cxx::tree::traits< pic_big_type, char > pic_big_traits;

      const pic_big_optional&
      pic_big () const;

      pic_big_optional&
      pic_big ();

      void
      pic_big (const pic_big_type& x);

      void
      pic_big (const pic_big_optional& x);

      void
      pic_big (::std::auto_ptr< pic_big_type > p);

      // pic_small
      // 
      typedef ::xml_schema::string pic_small_type;
      typedef ::xsd::cxx::tree::optional< pic_small_type > pic_small_optional;
      typedef ::xsd::cxx::tree::traits< pic_small_type, char > pic_small_traits;

      const pic_small_optional&
      pic_small () const;

      pic_small_optional&
      pic_small ();

      void
      pic_small (const pic_small_type& x);

      void
      pic_small (const pic_small_optional& x);

      void
      pic_small (::std::auto_ptr< pic_small_type > p);

      // political
      // 
      typedef ::xml_schema::string political_type;
      typedef ::xsd::cxx::tree::optional< political_type > political_optional;
      typedef ::xsd::cxx::tree::traits< political_type, char > political_traits;

      const political_optional&
      political () const;

      political_optional&
      political ();

      void
      political (const political_type& x);

      void
      political (const political_optional& x);

      void
      political (::std::auto_ptr< political_type > p);

      // profile_update_time
      // 
      typedef ::FacebookCpp::XSD::time profile_update_time_type;
      typedef ::xsd::cxx::tree::optional< profile_update_time_type > profile_update_time_optional;
      typedef ::xsd::cxx::tree::traits< profile_update_time_type, char > profile_update_time_traits;

      const profile_update_time_optional&
      profile_update_time () const;

      profile_update_time_optional&
      profile_update_time ();

      void
      profile_update_time (const profile_update_time_type& x);

      void
      profile_update_time (const profile_update_time_optional& x);

      void
      profile_update_time (::std::auto_ptr< profile_update_time_type > p);

      // quotes
      // 
      typedef ::xml_schema::string quotes_type;
      typedef ::xsd::cxx::tree::optional< quotes_type > quotes_optional;
      typedef ::xsd::cxx::tree::traits< quotes_type, char > quotes_traits;

      const quotes_optional&
      quotes () const;

      quotes_optional&
      quotes ();

      void
      quotes (const quotes_type& x);

      void
      quotes (const quotes_optional& x);

      void
      quotes (::std::auto_ptr< quotes_type > p);

      // relationship_status
      // 
      typedef ::xml_schema::string relationship_status_type;
      typedef ::xsd::cxx::tree::optional< relationship_status_type > relationship_status_optional;
      typedef ::xsd::cxx::tree::traits< relationship_status_type, char > relationship_status_traits;

      const relationship_status_optional&
      relationship_status () const;

      relationship_status_optional&
      relationship_status ();

      void
      relationship_status (const relationship_status_type& x);

      void
      relationship_status (const relationship_status_optional& x);

      void
      relationship_status (::std::auto_ptr< relationship_status_type > p);

      // religion
      // 
      typedef ::xml_schema::string religion_type;
      typedef ::xsd::cxx::tree::optional< religion_type > religion_optional;
      typedef ::xsd::cxx::tree::traits< religion_type, char > religion_traits;

      const religion_optional&
      religion () const;

      religion_optional&
      religion ();

      void
      religion (const religion_type& x);

      void
      religion (const religion_optional& x);

      void
      religion (::std::auto_ptr< religion_type > p);

      // sex
      // 
      typedef ::FacebookCpp::XSD::sex sex_type;
      typedef ::xsd::cxx::tree::optional< sex_type > sex_optional;
      typedef ::xsd::cxx::tree::traits< sex_type, char > sex_traits;

      const sex_optional&
      sex () const;

      sex_optional&
      sex ();

      void
      sex (const sex_type& x);

      void
      sex (const sex_optional& x);

      void
      sex (::std::auto_ptr< sex_type > p);

      // significant_other_id
      // 
      typedef ::FacebookCpp::XSD::uid significant_other_id_type;
      typedef ::xsd::cxx::tree::optional< significant_other_id_type > significant_other_id_optional;
      typedef ::xsd::cxx::tree::traits< significant_other_id_type, char > significant_other_id_traits;

      const significant_other_id_optional&
      significant_other_id () const;

      significant_other_id_optional&
      significant_other_id ();

      void
      significant_other_id (const significant_other_id_type& x);

      void
      significant_other_id (const significant_other_id_optional& x);

      void
      significant_other_id (::std::auto_ptr< significant_other_id_type > p);

      // status
      // 
      typedef ::FacebookCpp::XSD::user_status status_type;
      typedef ::xsd::cxx::tree::optional< status_type > status_optional;
      typedef ::xsd::cxx::tree::traits< status_type, char > status_traits;

      const status_optional&
      status () const;

      status_optional&
      status ();

      void
      status (const status_type& x);

      void
      status (const status_optional& x);

      void
      status (::std::auto_ptr< status_type > p);

      // timezone
      // 
      typedef ::xml_schema::decimal timezone_type;
      typedef ::xsd::cxx::tree::optional< timezone_type > timezone_optional;
      typedef ::xsd::cxx::tree::traits< timezone_type, char > timezone_traits;

      const timezone_optional&
      timezone () const;

      timezone_optional&
      timezone ();

      void
      timezone (const timezone_type& x);

      void
      timezone (const timezone_optional& x);

      // tv
      // 
      typedef ::xml_schema::string tv_type;
      typedef ::xsd::cxx::tree::optional< tv_type > tv_optional;
      typedef ::xsd::cxx::tree::traits< tv_type, char > tv_traits;

      const tv_optional&
      tv () const;

      tv_optional&
      tv ();

      void
      tv (const tv_type& x);

      void
      tv (const tv_optional& x);

      void
      tv (::std::auto_ptr< tv_type > p);

      // uid
      // 
      typedef ::FacebookCpp::XSD::uid uid_type;
      typedef ::xsd::cxx::tree::optional< uid_type > uid_optional;
      typedef ::xsd::cxx::tree::traits< uid_type, char > uid_traits;

      const uid_optional&
      uid () const;

      uid_optional&
      uid ();

      void
      uid (const uid_type& x);

      void
      uid (const uid_optional& x);

      void
      uid (::std::auto_ptr< uid_type > p);

      // wall_count
      // 
      typedef ::xml_schema::int_ wall_count_type;
      typedef ::xsd::cxx::tree::optional< wall_count_type > wall_count_optional;
      typedef ::xsd::cxx::tree::traits< wall_count_type, char > wall_count_traits;

      const wall_count_optional&
      wall_count () const;

      wall_count_optional&
      wall_count ();

      void
      wall_count (const wall_count_type& x);

      void
      wall_count (const wall_count_optional& x);

      // work_history
      // 
      typedef ::FacebookCpp::XSD::work_history work_history_type;
      typedef ::xsd::cxx::tree::optional< work_history_type > work_history_optional;
      typedef ::xsd::cxx::tree::traits< work_history_type, char > work_history_traits;

      const work_history_optional&
      work_history () const;

      work_history_optional&
      work_history ();

      void
      work_history (const work_history_type& x);

      void
      work_history (const work_history_optional& x);

      void
      work_history (::std::auto_ptr< work_history_type > p);

      // pic_square
      // 
      typedef ::xml_schema::string pic_square_type;
      typedef ::xsd::cxx::tree::optional< pic_square_type > pic_square_optional;
      typedef ::xsd::cxx::tree::traits< pic_square_type, char > pic_square_traits;

      const pic_square_optional&
      pic_square () const;

      pic_square_optional&
      pic_square ();

      void
      pic_square (const pic_square_type& x);

      void
      pic_square (const pic_square_optional& x);

      void
      pic_square (::std::auto_ptr< pic_square_type > p);

      // has_added_app
      // 
      typedef ::xml_schema::boolean has_added_app_type;
      typedef ::xsd::cxx::tree::optional< has_added_app_type > has_added_app_optional;
      typedef ::xsd::cxx::tree::traits< has_added_app_type, char > has_added_app_traits;

      const has_added_app_optional&
      has_added_app () const;

      has_added_app_optional&
      has_added_app ();

      void
      has_added_app (const has_added_app_type& x);

      void
      has_added_app (const has_added_app_optional& x);

      // Constructors.
      //
      user ();

      user (const xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      user (const user& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      virtual user*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~user ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      about_me_optional about_me_;
      activities_optional activities_;
      affiliations_optional affiliations_;
      birthday_optional birthday_;
      books_optional books_;
      current_location_optional current_location_;
      education_history_optional education_history_;
      first_name_optional first_name_;
      hometown_location_optional hometown_location_;
      hs_info_optional hs_info_;
      interests_optional interests_;
      is_app_user_optional is_app_user_;
      last_name_optional last_name_;
      meeting_for_optional meeting_for_;
      meeting_sex_optional meeting_sex_;
      movies_optional movies_;
      music_optional music_;
      name_optional name_;
      notes_count_optional notes_count_;
      pic_optional pic_;
      pic_big_optional pic_big_;
      pic_small_optional pic_small_;
      political_optional political_;
      profile_update_time_optional profile_update_time_;
      quotes_optional quotes_;
      relationship_status_optional relationship_status_;
      religion_optional religion_;
      sex_optional sex_;
      significant_other_id_optional significant_other_id_;
      status_optional status_;
      timezone_optional timezone_;
      tv_optional tv_;
      uid_optional uid_;
      wall_count_optional wall_count_;
      work_history_optional work_history_;
      pic_square_optional pic_square_;
      has_added_app_optional has_added_app_;
    };

    class friend_info: public ::xml_schema::type
    {
      public:
      // uid1
      // 
      typedef ::FacebookCpp::XSD::uid uid1_type;
      typedef ::xsd::cxx::tree::optional< uid1_type > uid1_optional;
      typedef ::xsd::cxx::tree::traits< uid1_type, char > uid1_traits;

      const uid1_optional&
      uid1 () const;

      uid1_optional&
      uid1 ();

      void
      uid1 (const uid1_type& x);

      void
      uid1 (const uid1_optional& x);

      void
      uid1 (::std::auto_ptr< uid1_type > p);

      // uid2
      // 
      typedef ::FacebookCpp::XSD::uid uid2_type;
      typedef ::xsd::cxx::tree::optional< uid2_type > uid2_optional;
      typedef ::xsd::cxx::tree::traits< uid2_type, char > uid2_traits;

      const uid2_optional&
      uid2 () const;

      uid2_optional&
      uid2 ();

      void
      uid2 (const uid2_type& x);

      void
      uid2 (const uid2_optional& x);

      void
      uid2 (::std::auto_ptr< uid2_type > p);

      // are_friends
      // 
      typedef ::xml_schema::boolean are_friends_type;
      typedef ::xsd::cxx::tree::optional< are_friends_type > are_friends_optional;
      typedef ::xsd::cxx::tree::traits< are_friends_type, char > are_friends_traits;

      const are_friends_optional&
      are_friends () const;

      are_friends_optional&
      are_friends ();

      void
      are_friends (const are_friends_type& x);

      void
      are_friends (const are_friends_optional& x);

      // Constructors.
      //
      friend_info ();

      friend_info (const xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      friend_info (const friend_info& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual friend_info*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~friend_info ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      uid1_optional uid1_;
      uid2_optional uid2_;
      are_friends_optional are_friends_;
    };

    class friendlist: public ::xml_schema::type
    {
      public:
      // flid
      // 
      typedef ::FacebookCpp::XSD::flid flid_type;
      typedef ::xsd::cxx::tree::traits< flid_type, char > flid_traits;

      const flid_type&
      flid () const;

      flid_type&
      flid ();

      void
      flid (const flid_type& x);

      void
      flid (::std::auto_ptr< flid_type > p);

      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // owner
      // 
      typedef ::FacebookCpp::XSD::uid owner_type;
      typedef ::xsd::cxx::tree::optional< owner_type > owner_optional;
      typedef ::xsd::cxx::tree::traits< owner_type, char > owner_traits;

      const owner_optional&
      owner () const;

      owner_optional&
      owner ();

      void
      owner (const owner_type& x);

      void
      owner (const owner_optional& x);

      void
      owner (::std::auto_ptr< owner_type > p);

      // Constructors.
      //
      friendlist (const flid_type&,
                  const name_type&);

      friendlist (const xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      friendlist (const friendlist& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual friendlist*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~friendlist ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< flid_type > flid_;
      ::xsd::cxx::tree::one< name_type > name_;
      owner_optional owner_;
    };

    class object_type_info: public ::xml_schema::type
    {
      public:
      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // object_class
      // 
      typedef ::xml_schema::int_ object_class_type;
      typedef ::xsd::cxx::tree::traits< object_class_type, char > object_class_traits;

      const object_class_type&
      object_class () const;

      object_class_type&
      object_class ();

      void
      object_class (const object_class_type& x);

      // Constructors.
      //
      object_type_info (const name_type&,
                        const object_class_type&);

      object_type_info (const xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      object_type_info (const object_type_info& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual object_type_info*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~object_type_info ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< object_class_type > object_class_;
    };

    class object_property_info: public ::xml_schema::type
    {
      public:
      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // data_type
      // 
      typedef ::xml_schema::int_ data_type_type;
      typedef ::xsd::cxx::tree::traits< data_type_type, char > data_type_traits;

      const data_type_type&
      data_type () const;

      data_type_type&
      data_type ();

      void
      data_type (const data_type_type& x);

      // index_type
      // 
      typedef ::xml_schema::int_ index_type_type;
      typedef ::xsd::cxx::tree::traits< index_type_type, char > index_type_traits;

      const index_type_type&
      index_type () const;

      index_type_type&
      index_type ();

      void
      index_type (const index_type_type& x);

      // Constructors.
      //
      object_property_info (const name_type&,
                            const data_type_type&,
                            const index_type_type&);

      object_property_info (const xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      object_property_info (const object_property_info& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual object_property_info*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~object_property_info ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< data_type_type > data_type_;
      ::xsd::cxx::tree::one< index_type_type > index_type_;
    };

    class assoc_object_type: public ::xml_schema::type
    {
      public:
      // alias
      // 
      typedef ::xml_schema::string alias_type;
      typedef ::xsd::cxx::tree::traits< alias_type, char > alias_traits;

      const alias_type&
      alias () const;

      alias_type&
      alias ();

      void
      alias (const alias_type& x);

      void
      alias (::std::auto_ptr< alias_type > p);

      // object_type
      // 
      typedef ::xml_schema::string object_type_type;
      typedef ::xsd::cxx::tree::traits< object_type_type, char > object_type_traits;

      const object_type_type&
      object_type () const;

      object_type_type&
      object_type ();

      void
      object_type (const object_type_type& x);

      void
      object_type (::std::auto_ptr< object_type_type > p);

      // unique
      // 
      typedef ::xml_schema::boolean unique_type;
      typedef ::xsd::cxx::tree::traits< unique_type, char > unique_traits;

      const unique_type&
      unique () const;

      unique_type&
      unique ();

      void
      unique (const unique_type& x);

      // Constructors.
      //
      assoc_object_type (const alias_type&,
                         const object_type_type&,
                         const unique_type&);

      assoc_object_type (const xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      assoc_object_type (const assoc_object_type& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual assoc_object_type*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~assoc_object_type ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< alias_type > alias_;
      ::xsd::cxx::tree::one< object_type_type > object_type_;
      ::xsd::cxx::tree::one< unique_type > unique_;
    };

    class object_assoc_info: public ::xml_schema::type
    {
      public:
      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // assoc_type
      // 
      typedef ::xml_schema::int_ assoc_type_type;
      typedef ::xsd::cxx::tree::traits< assoc_type_type, char > assoc_type_traits;

      const assoc_type_type&
      assoc_type () const;

      assoc_type_type&
      assoc_type ();

      void
      assoc_type (const assoc_type_type& x);

      // assoc_info1
      // 
      typedef ::FacebookCpp::XSD::assoc_object_type assoc_info1_type;
      typedef ::xsd::cxx::tree::traits< assoc_info1_type, char > assoc_info1_traits;

      const assoc_info1_type&
      assoc_info1 () const;

      assoc_info1_type&
      assoc_info1 ();

      void
      assoc_info1 (const assoc_info1_type& x);

      void
      assoc_info1 (::std::auto_ptr< assoc_info1_type > p);

      // assoc_info2
      // 
      typedef ::FacebookCpp::XSD::assoc_object_type assoc_info2_type;
      typedef ::xsd::cxx::tree::traits< assoc_info2_type, char > assoc_info2_traits;

      const assoc_info2_type&
      assoc_info2 () const;

      assoc_info2_type&
      assoc_info2 ();

      void
      assoc_info2 (const assoc_info2_type& x);

      void
      assoc_info2 (::std::auto_ptr< assoc_info2_type > p);

      // Constructors.
      //
      object_assoc_info (const name_type&,
                         const assoc_type_type&,
                         const assoc_info1_type&,
                         const assoc_info2_type&);

      object_assoc_info (const xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      object_assoc_info (const object_assoc_info& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual object_assoc_info*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~object_assoc_info ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< assoc_type_type > assoc_type_;
      ::xsd::cxx::tree::one< assoc_info1_type > assoc_info1_;
      ::xsd::cxx::tree::one< assoc_info2_type > assoc_info2_;
    };

    class object_association: public ::xml_schema::type
    {
      public:
      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // id1
      // 
      typedef ::xml_schema::long_ id1_type;
      typedef ::xsd::cxx::tree::traits< id1_type, char > id1_traits;

      const id1_type&
      id1 () const;

      id1_type&
      id1 ();

      void
      id1 (const id1_type& x);

      // id2
      // 
      typedef ::xml_schema::long_ id2_type;
      typedef ::xsd::cxx::tree::traits< id2_type, char > id2_traits;

      const id2_type&
      id2 () const;

      id2_type&
      id2 ();

      void
      id2 (const id2_type& x);

      // data
      // 
      typedef ::xml_schema::string data_type;
      typedef ::xsd::cxx::tree::traits< data_type, char > data_traits;

      const data_type&
      data () const;

      data_type&
      data ();

      void
      data (const data_type& x);

      void
      data (::std::auto_ptr< data_type > p);

      // time
      // 
      typedef ::FacebookCpp::XSD::time time_type;
      typedef ::xsd::cxx::tree::traits< time_type, char > time_traits;

      const time_type&
      time () const;

      time_type&
      time ();

      void
      time (const time_type& x);

      void
      time (::std::auto_ptr< time_type > p);

      // Constructors.
      //
      object_association (const name_type&,
                          const id1_type&,
                          const id2_type&,
                          const data_type&,
                          const time_type&);

      object_association (const xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      object_association (const object_association& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual object_association*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~object_association ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< id1_type > id1_;
      ::xsd::cxx::tree::one< id2_type > id2_;
      ::xsd::cxx::tree::one< data_type > data_;
      ::xsd::cxx::tree::one< time_type > time_;
    };

    class listing: public ::xml_schema::type
    {
      public:
      // listing_id
      // 
      typedef ::FacebookCpp::XSD::lid listing_id_type;
      typedef ::xsd::cxx::tree::traits< listing_id_type, char > listing_id_traits;

      const listing_id_type&
      listing_id () const;

      listing_id_type&
      listing_id ();

      void
      listing_id (const listing_id_type& x);

      void
      listing_id (::std::auto_ptr< listing_id_type > p);

      // url
      // 
      typedef ::xml_schema::string url_type;
      typedef ::xsd::cxx::tree::traits< url_type, char > url_traits;

      const url_type&
      url () const;

      url_type&
      url ();

      void
      url (const url_type& x);

      void
      url (::std::auto_ptr< url_type > p);

      // title
      // 
      typedef ::xml_schema::string title_type;
      typedef ::xsd::cxx::tree::traits< title_type, char > title_traits;

      const title_type&
      title () const;

      title_type&
      title ();

      void
      title (const title_type& x);

      void
      title (::std::auto_ptr< title_type > p);

      // description
      // 
      typedef ::xml_schema::string description_type;
      typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

      const description_type&
      description () const;

      description_type&
      description ();

      void
      description (const description_type& x);

      void
      description (::std::auto_ptr< description_type > p);

      // price
      // 
      typedef ::xml_schema::decimal price_type;
      typedef ::xsd::cxx::tree::optional< price_type > price_optional;
      typedef ::xsd::cxx::tree::traits< price_type, char > price_traits;

      const price_optional&
      price () const;

      price_optional&
      price ();

      void
      price (const price_type& x);

      void
      price (const price_optional& x);

      // poster
      // 
      typedef ::FacebookCpp::XSD::uid poster_type;
      typedef ::xsd::cxx::tree::traits< poster_type, char > poster_traits;

      const poster_type&
      poster () const;

      poster_type&
      poster ();

      void
      poster (const poster_type& x);

      void
      poster (::std::auto_ptr< poster_type > p);

      // update_time
      // 
      typedef ::FacebookCpp::XSD::time update_time_type;
      typedef ::xsd::cxx::tree::traits< update_time_type, char > update_time_traits;

      const update_time_type&
      update_time () const;

      update_time_type&
      update_time ();

      void
      update_time (const update_time_type& x);

      void
      update_time (::std::auto_ptr< update_time_type > p);

      // category
      // 
      typedef ::FacebookCpp::XSD::marketplace_category category_type;
      typedef ::xsd::cxx::tree::traits< category_type, char > category_traits;

      const category_type&
      category () const;

      category_type&
      category ();

      void
      category (const category_type& x);

      void
      category (::std::auto_ptr< category_type > p);

      // subcategory
      // 
      typedef ::FacebookCpp::XSD::marketplace_subcategory subcategory_type;
      typedef ::xsd::cxx::tree::traits< subcategory_type, char > subcategory_traits;

      const subcategory_type&
      subcategory () const;

      subcategory_type&
      subcategory ();

      void
      subcategory (const subcategory_type& x);

      void
      subcategory (::std::auto_ptr< subcategory_type > p);

      // image_urls
      // 
      typedef ::FacebookCpp::XSD::image_urls image_urls_type;
      typedef ::xsd::cxx::tree::optional< image_urls_type > image_urls_optional;
      typedef ::xsd::cxx::tree::traits< image_urls_type, char > image_urls_traits;

      const image_urls_optional&
      image_urls () const;

      image_urls_optional&
      image_urls ();

      void
      image_urls (const image_urls_type& x);

      void
      image_urls (const image_urls_optional& x);

      void
      image_urls (::std::auto_ptr< image_urls_type > p);

      // condition
      // 
      typedef ::xml_schema::int_ condition_type;
      typedef ::xsd::cxx::tree::optional< condition_type > condition_optional;
      typedef ::xsd::cxx::tree::traits< condition_type, char > condition_traits;

      const condition_optional&
      condition () const;

      condition_optional&
      condition ();

      void
      condition (const condition_type& x);

      void
      condition (const condition_optional& x);

      // isbn
      // 
      typedef ::xml_schema::string isbn_type;
      typedef ::xsd::cxx::tree::optional< isbn_type > isbn_optional;
      typedef ::xsd::cxx::tree::traits< isbn_type, char > isbn_traits;

      const isbn_optional&
      isbn () const;

      isbn_optional&
      isbn ();

      void
      isbn (const isbn_type& x);

      void
      isbn (const isbn_optional& x);

      void
      isbn (::std::auto_ptr< isbn_type > p);

      // num_beds
      // 
      typedef ::xml_schema::string num_beds_type;
      typedef ::xsd::cxx::tree::optional< num_beds_type > num_beds_optional;
      typedef ::xsd::cxx::tree::traits< num_beds_type, char > num_beds_traits;

      const num_beds_optional&
      num_beds () const;

      num_beds_optional&
      num_beds ();

      void
      num_beds (const num_beds_type& x);

      void
      num_beds (const num_beds_optional& x);

      void
      num_beds (::std::auto_ptr< num_beds_type > p);

      // num_maths
      // 
      typedef ::xml_schema::string num_maths_type;
      typedef ::xsd::cxx::tree::optional< num_maths_type > num_maths_optional;
      typedef ::xsd::cxx::tree::traits< num_maths_type, char > num_maths_traits;

      const num_maths_optional&
      num_maths () const;

      num_maths_optional&
      num_maths ();

      void
      num_maths (const num_maths_type& x);

      void
      num_maths (const num_maths_optional& x);

      void
      num_maths (::std::auto_ptr< num_maths_type > p);

      // dogs
      // 
      typedef ::xml_schema::string dogs_type;
      typedef ::xsd::cxx::tree::optional< dogs_type > dogs_optional;
      typedef ::xsd::cxx::tree::traits< dogs_type, char > dogs_traits;

      const dogs_optional&
      dogs () const;

      dogs_optional&
      dogs ();

      void
      dogs (const dogs_type& x);

      void
      dogs (const dogs_optional& x);

      void
      dogs (::std::auto_ptr< dogs_type > p);

      // cats
      // 
      typedef ::xml_schema::string cats_type;
      typedef ::xsd::cxx::tree::optional< cats_type > cats_optional;
      typedef ::xsd::cxx::tree::traits< cats_type, char > cats_traits;

      const cats_optional&
      cats () const;

      cats_optional&
      cats ();

      void
      cats (const cats_type& x);

      void
      cats (const cats_optional& x);

      void
      cats (::std::auto_ptr< cats_type > p);

      // smoking
      // 
      typedef ::xml_schema::string smoking_type;
      typedef ::xsd::cxx::tree::optional< smoking_type > smoking_optional;
      typedef ::xsd::cxx::tree::traits< smoking_type, char > smoking_traits;

      const smoking_optional&
      smoking () const;

      smoking_optional&
      smoking ();

      void
      smoking (const smoking_type& x);

      void
      smoking (const smoking_optional& x);

      void
      smoking (::std::auto_ptr< smoking_type > p);

      // square_footage
      // 
      typedef ::xml_schema::string square_footage_type;
      typedef ::xsd::cxx::tree::optional< square_footage_type > square_footage_optional;
      typedef ::xsd::cxx::tree::traits< square_footage_type, char > square_footage_traits;

      const square_footage_optional&
      square_footage () const;

      square_footage_optional&
      square_footage ();

      void
      square_footage (const square_footage_type& x);

      void
      square_footage (const square_footage_optional& x);

      void
      square_footage (::std::auto_ptr< square_footage_type > p);

      // street
      // 
      typedef ::xml_schema::string street_type;
      typedef ::xsd::cxx::tree::optional< street_type > street_optional;
      typedef ::xsd::cxx::tree::traits< street_type, char > street_traits;

      const street_optional&
      street () const;

      street_optional&
      street ();

      void
      street (const street_type& x);

      void
      street (const street_optional& x);

      void
      street (::std::auto_ptr< street_type > p);

      // crossstreet
      // 
      typedef ::xml_schema::string crossstreet_type;
      typedef ::xsd::cxx::tree::optional< crossstreet_type > crossstreet_optional;
      typedef ::xsd::cxx::tree::traits< crossstreet_type, char > crossstreet_traits;

      const crossstreet_optional&
      crossstreet () const;

      crossstreet_optional&
      crossstreet ();

      void
      crossstreet (const crossstreet_type& x);

      void
      crossstreet (const crossstreet_optional& x);

      void
      crossstreet (::std::auto_ptr< crossstreet_type > p);

      // postal
      // 
      typedef ::xml_schema::string postal_type;
      typedef ::xsd::cxx::tree::optional< postal_type > postal_optional;
      typedef ::xsd::cxx::tree::traits< postal_type, char > postal_traits;

      const postal_optional&
      postal () const;

      postal_optional&
      postal ();

      void
      postal (const postal_type& x);

      void
      postal (const postal_optional& x);

      void
      postal (::std::auto_ptr< postal_type > p);

      // rent
      // 
      typedef ::xml_schema::string rent_type;
      typedef ::xsd::cxx::tree::optional< rent_type > rent_optional;
      typedef ::xsd::cxx::tree::traits< rent_type, char > rent_traits;

      const rent_optional&
      rent () const;

      rent_optional&
      rent ();

      void
      rent (const rent_type& x);

      void
      rent (const rent_optional& x);

      void
      rent (::std::auto_ptr< rent_type > p);

      // pay
      // 
      typedef ::xml_schema::string pay_type;
      typedef ::xsd::cxx::tree::optional< pay_type > pay_optional;
      typedef ::xsd::cxx::tree::traits< pay_type, char > pay_traits;

      const pay_optional&
      pay () const;

      pay_optional&
      pay ();

      void
      pay (const pay_type& x);

      void
      pay (const pay_optional& x);

      void
      pay (::std::auto_ptr< pay_type > p);

      // full
      // 
      typedef ::xml_schema::string full_type;
      typedef ::xsd::cxx::tree::optional< full_type > full_optional;
      typedef ::xsd::cxx::tree::traits< full_type, char > full_traits;

      const full_optional&
      full () const;

      full_optional&
      full ();

      void
      full (const full_type& x);

      void
      full (const full_optional& x);

      void
      full (::std::auto_ptr< full_type > p);

      // intern
      // 
      typedef ::xml_schema::string intern_type;
      typedef ::xsd::cxx::tree::optional< intern_type > intern_optional;
      typedef ::xsd::cxx::tree::traits< intern_type, char > intern_traits;

      const intern_optional&
      intern () const;

      intern_optional&
      intern ();

      void
      intern (const intern_type& x);

      void
      intern (const intern_optional& x);

      void
      intern (::std::auto_ptr< intern_type > p);

      // summer
      // 
      typedef ::xml_schema::string summer_type;
      typedef ::xsd::cxx::tree::optional< summer_type > summer_optional;
      typedef ::xsd::cxx::tree::traits< summer_type, char > summer_traits;

      const summer_optional&
      summer () const;

      summer_optional&
      summer ();

      void
      summer (const summer_type& x);

      void
      summer (const summer_optional& x);

      void
      summer (::std::auto_ptr< summer_type > p);

      // nonprofit
      // 
      typedef ::xml_schema::string nonprofit_type;
      typedef ::xsd::cxx::tree::optional< nonprofit_type > nonprofit_optional;
      typedef ::xsd::cxx::tree::traits< nonprofit_type, char > nonprofit_traits;

      const nonprofit_optional&
      nonprofit () const;

      nonprofit_optional&
      nonprofit ();

      void
      nonprofit (const nonprofit_type& x);

      void
      nonprofit (const nonprofit_optional& x);

      void
      nonprofit (::std::auto_ptr< nonprofit_type > p);

      // pay_type
      // 
      typedef ::xml_schema::string pay_type_type;
      typedef ::xsd::cxx::tree::optional< pay_type_type > pay_type_optional;
      typedef ::xsd::cxx::tree::traits< pay_type_type, char > pay_type_traits;

      const pay_type_optional&
      pay_type1 () const;

      pay_type_optional&
      pay_type1 ();

      void
      pay_type1 (const pay_type_type& x);

      void
      pay_type1 (const pay_type_optional& x);

      void
      pay_type1 (::std::auto_ptr< pay_type_type > p);

      // Constructors.
      //
      listing (const listing_id_type&,
               const url_type&,
               const title_type&,
               const description_type&,
               const poster_type&,
               const update_time_type&,
               const category_type&,
               const subcategory_type&);

      listing (const xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      listing (const listing& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      virtual listing*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~listing ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< listing_id_type > listing_id_;
      ::xsd::cxx::tree::one< url_type > url_;
      ::xsd::cxx::tree::one< title_type > title_;
      ::xsd::cxx::tree::one< description_type > description_;
      price_optional price_;
      ::xsd::cxx::tree::one< poster_type > poster_;
      ::xsd::cxx::tree::one< update_time_type > update_time_;
      ::xsd::cxx::tree::one< category_type > category_;
      ::xsd::cxx::tree::one< subcategory_type > subcategory_;
      image_urls_optional image_urls_;
      condition_optional condition_;
      isbn_optional isbn_;
      num_beds_optional num_beds_;
      num_maths_optional num_maths_;
      dogs_optional dogs_;
      cats_optional cats_;
      smoking_optional smoking_;
      square_footage_optional square_footage_;
      street_optional street_;
      crossstreet_optional crossstreet_;
      postal_optional postal_;
      rent_optional rent_;
      pay_optional pay_;
      full_optional full_;
      intern_optional intern_;
      summer_optional summer_;
      nonprofit_optional nonprofit_;
      pay_type_optional pay_type_;
    };

    class preference: public ::xml_schema::type
    {
      public:
      // pref_id
      // 
      typedef ::xml_schema::int_ pref_id_type;
      typedef ::xsd::cxx::tree::traits< pref_id_type, char > pref_id_traits;

      const pref_id_type&
      pref_id () const;

      pref_id_type&
      pref_id ();

      void
      pref_id (const pref_id_type& x);

      // value
      // 
      typedef ::xml_schema::string value_type;
      typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

      const value_type&
      value () const;

      value_type&
      value ();

      void
      value (const value_type& x);

      void
      value (::std::auto_ptr< value_type > p);

      // Constructors.
      //
      preference (const pref_id_type&,
                  const value_type&);

      preference (const xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      preference (const preference& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual preference*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~preference ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< pref_id_type > pref_id_;
      ::xsd::cxx::tree::one< value_type > value_;
    };

    class page_hours: public ::xml_schema::type
    {
      public:
      // mon_1_open
      // 
      typedef ::FacebookCpp::XSD::time mon_1_open_type;
      typedef ::xsd::cxx::tree::traits< mon_1_open_type, char > mon_1_open_traits;

      const mon_1_open_type&
      mon_1_open () const;

      mon_1_open_type&
      mon_1_open ();

      void
      mon_1_open (const mon_1_open_type& x);

      void
      mon_1_open (::std::auto_ptr< mon_1_open_type > p);

      // mon_1_close
      // 
      typedef ::FacebookCpp::XSD::time mon_1_close_type;
      typedef ::xsd::cxx::tree::traits< mon_1_close_type, char > mon_1_close_traits;

      const mon_1_close_type&
      mon_1_close () const;

      mon_1_close_type&
      mon_1_close ();

      void
      mon_1_close (const mon_1_close_type& x);

      void
      mon_1_close (::std::auto_ptr< mon_1_close_type > p);

      // tue_1_open
      // 
      typedef ::FacebookCpp::XSD::time tue_1_open_type;
      typedef ::xsd::cxx::tree::traits< tue_1_open_type, char > tue_1_open_traits;

      const tue_1_open_type&
      tue_1_open () const;

      tue_1_open_type&
      tue_1_open ();

      void
      tue_1_open (const tue_1_open_type& x);

      void
      tue_1_open (::std::auto_ptr< tue_1_open_type > p);

      // tue_1_close
      // 
      typedef ::FacebookCpp::XSD::time tue_1_close_type;
      typedef ::xsd::cxx::tree::traits< tue_1_close_type, char > tue_1_close_traits;

      const tue_1_close_type&
      tue_1_close () const;

      tue_1_close_type&
      tue_1_close ();

      void
      tue_1_close (const tue_1_close_type& x);

      void
      tue_1_close (::std::auto_ptr< tue_1_close_type > p);

      // wed_1_open
      // 
      typedef ::FacebookCpp::XSD::time wed_1_open_type;
      typedef ::xsd::cxx::tree::traits< wed_1_open_type, char > wed_1_open_traits;

      const wed_1_open_type&
      wed_1_open () const;

      wed_1_open_type&
      wed_1_open ();

      void
      wed_1_open (const wed_1_open_type& x);

      void
      wed_1_open (::std::auto_ptr< wed_1_open_type > p);

      // thu_1_open
      // 
      typedef ::FacebookCpp::XSD::time thu_1_open_type;
      typedef ::xsd::cxx::tree::traits< thu_1_open_type, char > thu_1_open_traits;

      const thu_1_open_type&
      thu_1_open () const;

      thu_1_open_type&
      thu_1_open ();

      void
      thu_1_open (const thu_1_open_type& x);

      void
      thu_1_open (::std::auto_ptr< thu_1_open_type > p);

      // thu_1_close
      // 
      typedef ::FacebookCpp::XSD::time thu_1_close_type;
      typedef ::xsd::cxx::tree::traits< thu_1_close_type, char > thu_1_close_traits;

      const thu_1_close_type&
      thu_1_close () const;

      thu_1_close_type&
      thu_1_close ();

      void
      thu_1_close (const thu_1_close_type& x);

      void
      thu_1_close (::std::auto_ptr< thu_1_close_type > p);

      // fri_1_open
      // 
      typedef ::FacebookCpp::XSD::time fri_1_open_type;
      typedef ::xsd::cxx::tree::traits< fri_1_open_type, char > fri_1_open_traits;

      const fri_1_open_type&
      fri_1_open () const;

      fri_1_open_type&
      fri_1_open ();

      void
      fri_1_open (const fri_1_open_type& x);

      void
      fri_1_open (::std::auto_ptr< fri_1_open_type > p);

      // fri_1_close
      // 
      typedef ::FacebookCpp::XSD::time fri_1_close_type;
      typedef ::xsd::cxx::tree::traits< fri_1_close_type, char > fri_1_close_traits;

      const fri_1_close_type&
      fri_1_close () const;

      fri_1_close_type&
      fri_1_close ();

      void
      fri_1_close (const fri_1_close_type& x);

      void
      fri_1_close (::std::auto_ptr< fri_1_close_type > p);

      // sat_1_open
      // 
      typedef ::FacebookCpp::XSD::time sat_1_open_type;
      typedef ::xsd::cxx::tree::traits< sat_1_open_type, char > sat_1_open_traits;

      const sat_1_open_type&
      sat_1_open () const;

      sat_1_open_type&
      sat_1_open ();

      void
      sat_1_open (const sat_1_open_type& x);

      void
      sat_1_open (::std::auto_ptr< sat_1_open_type > p);

      // sat_1_close
      // 
      typedef ::FacebookCpp::XSD::time sat_1_close_type;
      typedef ::xsd::cxx::tree::traits< sat_1_close_type, char > sat_1_close_traits;

      const sat_1_close_type&
      sat_1_close () const;

      sat_1_close_type&
      sat_1_close ();

      void
      sat_1_close (const sat_1_close_type& x);

      void
      sat_1_close (::std::auto_ptr< sat_1_close_type > p);

      // sun_1_open
      // 
      typedef ::FacebookCpp::XSD::time sun_1_open_type;
      typedef ::xsd::cxx::tree::traits< sun_1_open_type, char > sun_1_open_traits;

      const sun_1_open_type&
      sun_1_open () const;

      sun_1_open_type&
      sun_1_open ();

      void
      sun_1_open (const sun_1_open_type& x);

      void
      sun_1_open (::std::auto_ptr< sun_1_open_type > p);

      // sun_1_close
      // 
      typedef ::FacebookCpp::XSD::time sun_1_close_type;
      typedef ::xsd::cxx::tree::traits< sun_1_close_type, char > sun_1_close_traits;

      const sun_1_close_type&
      sun_1_close () const;

      sun_1_close_type&
      sun_1_close ();

      void
      sun_1_close (const sun_1_close_type& x);

      void
      sun_1_close (::std::auto_ptr< sun_1_close_type > p);

      // mon_2_open
      // 
      typedef ::FacebookCpp::XSD::time mon_2_open_type;
      typedef ::xsd::cxx::tree::traits< mon_2_open_type, char > mon_2_open_traits;

      const mon_2_open_type&
      mon_2_open () const;

      mon_2_open_type&
      mon_2_open ();

      void
      mon_2_open (const mon_2_open_type& x);

      void
      mon_2_open (::std::auto_ptr< mon_2_open_type > p);

      // mon_2_close
      // 
      typedef ::FacebookCpp::XSD::time mon_2_close_type;
      typedef ::xsd::cxx::tree::traits< mon_2_close_type, char > mon_2_close_traits;

      const mon_2_close_type&
      mon_2_close () const;

      mon_2_close_type&
      mon_2_close ();

      void
      mon_2_close (const mon_2_close_type& x);

      void
      mon_2_close (::std::auto_ptr< mon_2_close_type > p);

      // tue_2_open
      // 
      typedef ::FacebookCpp::XSD::time tue_2_open_type;
      typedef ::xsd::cxx::tree::traits< tue_2_open_type, char > tue_2_open_traits;

      const tue_2_open_type&
      tue_2_open () const;

      tue_2_open_type&
      tue_2_open ();

      void
      tue_2_open (const tue_2_open_type& x);

      void
      tue_2_open (::std::auto_ptr< tue_2_open_type > p);

      // tue_2_close
      // 
      typedef ::FacebookCpp::XSD::time tue_2_close_type;
      typedef ::xsd::cxx::tree::traits< tue_2_close_type, char > tue_2_close_traits;

      const tue_2_close_type&
      tue_2_close () const;

      tue_2_close_type&
      tue_2_close ();

      void
      tue_2_close (const tue_2_close_type& x);

      void
      tue_2_close (::std::auto_ptr< tue_2_close_type > p);

      // wed_2_open
      // 
      typedef ::FacebookCpp::XSD::time wed_2_open_type;
      typedef ::xsd::cxx::tree::traits< wed_2_open_type, char > wed_2_open_traits;

      const wed_2_open_type&
      wed_2_open () const;

      wed_2_open_type&
      wed_2_open ();

      void
      wed_2_open (const wed_2_open_type& x);

      void
      wed_2_open (::std::auto_ptr< wed_2_open_type > p);

      // wed_2_close
      // 
      typedef ::FacebookCpp::XSD::time wed_2_close_type;
      typedef ::xsd::cxx::tree::traits< wed_2_close_type, char > wed_2_close_traits;

      const wed_2_close_type&
      wed_2_close () const;

      wed_2_close_type&
      wed_2_close ();

      void
      wed_2_close (const wed_2_close_type& x);

      void
      wed_2_close (::std::auto_ptr< wed_2_close_type > p);

      // thu_2_open
      // 
      typedef ::FacebookCpp::XSD::time thu_2_open_type;
      typedef ::xsd::cxx::tree::traits< thu_2_open_type, char > thu_2_open_traits;

      const thu_2_open_type&
      thu_2_open () const;

      thu_2_open_type&
      thu_2_open ();

      void
      thu_2_open (const thu_2_open_type& x);

      void
      thu_2_open (::std::auto_ptr< thu_2_open_type > p);

      // thu_2_close
      // 
      typedef ::FacebookCpp::XSD::time thu_2_close_type;
      typedef ::xsd::cxx::tree::traits< thu_2_close_type, char > thu_2_close_traits;

      const thu_2_close_type&
      thu_2_close () const;

      thu_2_close_type&
      thu_2_close ();

      void
      thu_2_close (const thu_2_close_type& x);

      void
      thu_2_close (::std::auto_ptr< thu_2_close_type > p);

      // fri_2_open
      // 
      typedef ::FacebookCpp::XSD::time fri_2_open_type;
      typedef ::xsd::cxx::tree::traits< fri_2_open_type, char > fri_2_open_traits;

      const fri_2_open_type&
      fri_2_open () const;

      fri_2_open_type&
      fri_2_open ();

      void
      fri_2_open (const fri_2_open_type& x);

      void
      fri_2_open (::std::auto_ptr< fri_2_open_type > p);

      // fri_2_close
      // 
      typedef ::FacebookCpp::XSD::time fri_2_close_type;
      typedef ::xsd::cxx::tree::traits< fri_2_close_type, char > fri_2_close_traits;

      const fri_2_close_type&
      fri_2_close () const;

      fri_2_close_type&
      fri_2_close ();

      void
      fri_2_close (const fri_2_close_type& x);

      void
      fri_2_close (::std::auto_ptr< fri_2_close_type > p);

      // sat_2_open
      // 
      typedef ::FacebookCpp::XSD::time sat_2_open_type;
      typedef ::xsd::cxx::tree::traits< sat_2_open_type, char > sat_2_open_traits;

      const sat_2_open_type&
      sat_2_open () const;

      sat_2_open_type&
      sat_2_open ();

      void
      sat_2_open (const sat_2_open_type& x);

      void
      sat_2_open (::std::auto_ptr< sat_2_open_type > p);

      // sat_2_close
      // 
      typedef ::FacebookCpp::XSD::time sat_2_close_type;
      typedef ::xsd::cxx::tree::traits< sat_2_close_type, char > sat_2_close_traits;

      const sat_2_close_type&
      sat_2_close () const;

      sat_2_close_type&
      sat_2_close ();

      void
      sat_2_close (const sat_2_close_type& x);

      void
      sat_2_close (::std::auto_ptr< sat_2_close_type > p);

      // sun_2_open
      // 
      typedef ::FacebookCpp::XSD::time sun_2_open_type;
      typedef ::xsd::cxx::tree::traits< sun_2_open_type, char > sun_2_open_traits;

      const sun_2_open_type&
      sun_2_open () const;

      sun_2_open_type&
      sun_2_open ();

      void
      sun_2_open (const sun_2_open_type& x);

      void
      sun_2_open (::std::auto_ptr< sun_2_open_type > p);

      // sun_2_close
      // 
      typedef ::FacebookCpp::XSD::time sun_2_close_type;
      typedef ::xsd::cxx::tree::traits< sun_2_close_type, char > sun_2_close_traits;

      const sun_2_close_type&
      sun_2_close () const;

      sun_2_close_type&
      sun_2_close ();

      void
      sun_2_close (const sun_2_close_type& x);

      void
      sun_2_close (::std::auto_ptr< sun_2_close_type > p);

      // Constructors.
      //
      page_hours (const mon_1_open_type&,
                  const mon_1_close_type&,
                  const tue_1_open_type&,
                  const tue_1_close_type&,
                  const wed_1_open_type&,
                  const thu_1_open_type&,
                  const thu_1_close_type&,
                  const fri_1_open_type&,
                  const fri_1_close_type&,
                  const sat_1_open_type&,
                  const sat_1_close_type&,
                  const sun_1_open_type&,
                  const sun_1_close_type&,
                  const mon_2_open_type&,
                  const mon_2_close_type&,
                  const tue_2_open_type&,
                  const tue_2_close_type&,
                  const wed_2_open_type&,
                  const wed_2_close_type&,
                  const thu_2_open_type&,
                  const thu_2_close_type&,
                  const fri_2_open_type&,
                  const fri_2_close_type&,
                  const sat_2_open_type&,
                  const sat_2_close_type&,
                  const sun_2_open_type&,
                  const sun_2_close_type&);

      page_hours (const xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      page_hours (const page_hours& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual page_hours*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~page_hours ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< mon_1_open_type > mon_1_open_;
      ::xsd::cxx::tree::one< mon_1_close_type > mon_1_close_;
      ::xsd::cxx::tree::one< tue_1_open_type > tue_1_open_;
      ::xsd::cxx::tree::one< tue_1_close_type > tue_1_close_;
      ::xsd::cxx::tree::one< wed_1_open_type > wed_1_open_;
      ::xsd::cxx::tree::one< thu_1_open_type > thu_1_open_;
      ::xsd::cxx::tree::one< thu_1_close_type > thu_1_close_;
      ::xsd::cxx::tree::one< fri_1_open_type > fri_1_open_;
      ::xsd::cxx::tree::one< fri_1_close_type > fri_1_close_;
      ::xsd::cxx::tree::one< sat_1_open_type > sat_1_open_;
      ::xsd::cxx::tree::one< sat_1_close_type > sat_1_close_;
      ::xsd::cxx::tree::one< sun_1_open_type > sun_1_open_;
      ::xsd::cxx::tree::one< sun_1_close_type > sun_1_close_;
      ::xsd::cxx::tree::one< mon_2_open_type > mon_2_open_;
      ::xsd::cxx::tree::one< mon_2_close_type > mon_2_close_;
      ::xsd::cxx::tree::one< tue_2_open_type > tue_2_open_;
      ::xsd::cxx::tree::one< tue_2_close_type > tue_2_close_;
      ::xsd::cxx::tree::one< wed_2_open_type > wed_2_open_;
      ::xsd::cxx::tree::one< wed_2_close_type > wed_2_close_;
      ::xsd::cxx::tree::one< thu_2_open_type > thu_2_open_;
      ::xsd::cxx::tree::one< thu_2_close_type > thu_2_close_;
      ::xsd::cxx::tree::one< fri_2_open_type > fri_2_open_;
      ::xsd::cxx::tree::one< fri_2_close_type > fri_2_close_;
      ::xsd::cxx::tree::one< sat_2_open_type > sat_2_open_;
      ::xsd::cxx::tree::one< sat_2_close_type > sat_2_close_;
      ::xsd::cxx::tree::one< sun_2_open_type > sun_2_open_;
      ::xsd::cxx::tree::one< sun_2_close_type > sun_2_close_;
    };

    class page_parking: public ::xml_schema::type
    {
      public:
      // street
      // 
      typedef ::xml_schema::boolean street_type;
      typedef ::xsd::cxx::tree::traits< street_type, char > street_traits;

      const street_type&
      street () const;

      street_type&
      street ();

      void
      street (const street_type& x);

      // lot
      // 
      typedef ::xml_schema::boolean lot_type;
      typedef ::xsd::cxx::tree::traits< lot_type, char > lot_traits;

      const lot_type&
      lot () const;

      lot_type&
      lot ();

      void
      lot (const lot_type& x);

      // valet
      // 
      typedef ::xml_schema::boolean valet_type;
      typedef ::xsd::cxx::tree::traits< valet_type, char > valet_traits;

      const valet_type&
      valet () const;

      valet_type&
      valet ();

      void
      valet (const valet_type& x);

      // Constructors.
      //
      page_parking (const street_type&,
                    const lot_type&,
                    const valet_type&);

      page_parking (const xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      page_parking (const page_parking& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual page_parking*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~page_parking ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< street_type > street_;
      ::xsd::cxx::tree::one< lot_type > lot_;
      ::xsd::cxx::tree::one< valet_type > valet_;
    };

    class page_restaurant_services: public ::xml_schema::type
    {
      public:
      // reserve
      // 
      typedef ::xml_schema::boolean reserve_type;
      typedef ::xsd::cxx::tree::traits< reserve_type, char > reserve_traits;

      const reserve_type&
      reserve () const;

      reserve_type&
      reserve ();

      void
      reserve (const reserve_type& x);

      // walkins
      // 
      typedef ::xml_schema::boolean walkins_type;
      typedef ::xsd::cxx::tree::traits< walkins_type, char > walkins_traits;

      const walkins_type&
      walkins () const;

      walkins_type&
      walkins ();

      void
      walkins (const walkins_type& x);

      // groups
      // 
      typedef ::xml_schema::boolean groups_type;
      typedef ::xsd::cxx::tree::traits< groups_type, char > groups_traits;

      const groups_type&
      groups () const;

      groups_type&
      groups ();

      void
      groups (const groups_type& x);

      // kids
      // 
      typedef ::xml_schema::boolean kids_type;
      typedef ::xsd::cxx::tree::traits< kids_type, char > kids_traits;

      const kids_type&
      kids () const;

      kids_type&
      kids ();

      void
      kids (const kids_type& x);

      // takeout
      // 
      typedef ::xml_schema::boolean takeout_type;
      typedef ::xsd::cxx::tree::traits< takeout_type, char > takeout_traits;

      const takeout_type&
      takeout () const;

      takeout_type&
      takeout ();

      void
      takeout (const takeout_type& x);

      // delivery
      // 
      typedef ::xml_schema::boolean delivery_type;
      typedef ::xsd::cxx::tree::traits< delivery_type, char > delivery_traits;

      const delivery_type&
      delivery () const;

      delivery_type&
      delivery ();

      void
      delivery (const delivery_type& x);

      // catering
      // 
      typedef ::xml_schema::boolean catering_type;
      typedef ::xsd::cxx::tree::traits< catering_type, char > catering_traits;

      const catering_type&
      catering () const;

      catering_type&
      catering ();

      void
      catering (const catering_type& x);

      // waiter
      // 
      typedef ::xml_schema::boolean waiter_type;
      typedef ::xsd::cxx::tree::traits< waiter_type, char > waiter_traits;

      const waiter_type&
      waiter () const;

      waiter_type&
      waiter ();

      void
      waiter (const waiter_type& x);

      // outdoor
      // 
      typedef ::xml_schema::boolean outdoor_type;
      typedef ::xsd::cxx::tree::traits< outdoor_type, char > outdoor_traits;

      const outdoor_type&
      outdoor () const;

      outdoor_type&
      outdoor ();

      void
      outdoor (const outdoor_type& x);

      // Constructors.
      //
      page_restaurant_services (const reserve_type&,
                                const walkins_type&,
                                const groups_type&,
                                const kids_type&,
                                const takeout_type&,
                                const delivery_type&,
                                const catering_type&,
                                const waiter_type&,
                                const outdoor_type&);

      page_restaurant_services (const xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      page_restaurant_services (const page_restaurant_services& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual page_restaurant_services*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~page_restaurant_services ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< reserve_type > reserve_;
      ::xsd::cxx::tree::one< walkins_type > walkins_;
      ::xsd::cxx::tree::one< groups_type > groups_;
      ::xsd::cxx::tree::one< kids_type > kids_;
      ::xsd::cxx::tree::one< takeout_type > takeout_;
      ::xsd::cxx::tree::one< delivery_type > delivery_;
      ::xsd::cxx::tree::one< catering_type > catering_;
      ::xsd::cxx::tree::one< waiter_type > waiter_;
      ::xsd::cxx::tree::one< outdoor_type > outdoor_;
    };

    class page_restaurant_specialties: public ::xml_schema::type
    {
      public:
      // breakfast
      // 
      typedef ::xml_schema::boolean breakfast_type;
      typedef ::xsd::cxx::tree::traits< breakfast_type, char > breakfast_traits;

      const breakfast_type&
      breakfast () const;

      breakfast_type&
      breakfast ();

      void
      breakfast (const breakfast_type& x);

      // lunch
      // 
      typedef ::xml_schema::boolean lunch_type;
      typedef ::xsd::cxx::tree::traits< lunch_type, char > lunch_traits;

      const lunch_type&
      lunch () const;

      lunch_type&
      lunch ();

      void
      lunch (const lunch_type& x);

      // dinner
      // 
      typedef ::xml_schema::boolean dinner_type;
      typedef ::xsd::cxx::tree::traits< dinner_type, char > dinner_traits;

      const dinner_type&
      dinner () const;

      dinner_type&
      dinner ();

      void
      dinner (const dinner_type& x);

      // coffee
      // 
      typedef ::xml_schema::boolean coffee_type;
      typedef ::xsd::cxx::tree::traits< coffee_type, char > coffee_traits;

      const coffee_type&
      coffee () const;

      coffee_type&
      coffee ();

      void
      coffee (const coffee_type& x);

      // drinks
      // 
      typedef ::xml_schema::boolean drinks_type;
      typedef ::xsd::cxx::tree::traits< drinks_type, char > drinks_traits;

      const drinks_type&
      drinks () const;

      drinks_type&
      drinks ();

      void
      drinks (const drinks_type& x);

      // Constructors.
      //
      page_restaurant_specialties (const breakfast_type&,
                                   const lunch_type&,
                                   const dinner_type&,
                                   const coffee_type&,
                                   const drinks_type&);

      page_restaurant_specialties (const xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      page_restaurant_specialties (const page_restaurant_specialties& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual page_restaurant_specialties*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~page_restaurant_specialties ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< breakfast_type > breakfast_;
      ::xsd::cxx::tree::one< lunch_type > lunch_;
      ::xsd::cxx::tree::one< dinner_type > dinner_;
      ::xsd::cxx::tree::one< coffee_type > coffee_;
      ::xsd::cxx::tree::one< drinks_type > drinks_;
    };

    class page_payment_options: public ::xml_schema::type
    {
      public:
      // cash_only
      // 
      typedef ::xml_schema::boolean cash_only_type;
      typedef ::xsd::cxx::tree::traits< cash_only_type, char > cash_only_traits;

      const cash_only_type&
      cash_only () const;

      cash_only_type&
      cash_only ();

      void
      cash_only (const cash_only_type& x);

      // visa
      // 
      typedef ::xml_schema::boolean visa_type;
      typedef ::xsd::cxx::tree::traits< visa_type, char > visa_traits;

      const visa_type&
      visa () const;

      visa_type&
      visa ();

      void
      visa (const visa_type& x);

      // amex
      // 
      typedef ::xml_schema::boolean amex_type;
      typedef ::xsd::cxx::tree::traits< amex_type, char > amex_traits;

      const amex_type&
      amex () const;

      amex_type&
      amex ();

      void
      amex (const amex_type& x);

      // mastercard
      // 
      typedef ::xml_schema::boolean mastercard_type;
      typedef ::xsd::cxx::tree::traits< mastercard_type, char > mastercard_traits;

      const mastercard_type&
      mastercard () const;

      mastercard_type&
      mastercard ();

      void
      mastercard (const mastercard_type& x);

      // discover
      // 
      typedef ::xml_schema::boolean discover_type;
      typedef ::xsd::cxx::tree::traits< discover_type, char > discover_traits;

      const discover_type&
      discover () const;

      discover_type&
      discover ();

      void
      discover (const discover_type& x);

      // Constructors.
      //
      page_payment_options (const cash_only_type&,
                            const visa_type&,
                            const amex_type&,
                            const mastercard_type&,
                            const discover_type&);

      page_payment_options (const xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      page_payment_options (const page_payment_options& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual page_payment_options*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~page_payment_options ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< cash_only_type > cash_only_;
      ::xsd::cxx::tree::one< visa_type > visa_;
      ::xsd::cxx::tree::one< amex_type > amex_;
      ::xsd::cxx::tree::one< mastercard_type > mastercard_;
      ::xsd::cxx::tree::one< discover_type > discover_;
    };

    class page: public ::xml_schema::type
    {
      public:
      // page_id
      // 
      typedef ::FacebookCpp::XSD::page_id page_id_type;
      typedef ::xsd::cxx::tree::optional< page_id_type > page_id_optional;
      typedef ::xsd::cxx::tree::traits< page_id_type, char > page_id_traits;

      const page_id_optional&
      page_id () const;

      page_id_optional&
      page_id ();

      void
      page_id (const page_id_type& x);

      void
      page_id (const page_id_optional& x);

      void
      page_id (::std::auto_ptr< page_id_type > p);

      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::optional< name_type > name_optional;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_optional&
      name () const;

      name_optional&
      name ();

      void
      name (const name_type& x);

      void
      name (const name_optional& x);

      void
      name (::std::auto_ptr< name_type > p);

      // pic_small
      // 
      typedef ::xml_schema::string pic_small_type;
      typedef ::xsd::cxx::tree::optional< pic_small_type > pic_small_optional;
      typedef ::xsd::cxx::tree::traits< pic_small_type, char > pic_small_traits;

      const pic_small_optional&
      pic_small () const;

      pic_small_optional&
      pic_small ();

      void
      pic_small (const pic_small_type& x);

      void
      pic_small (const pic_small_optional& x);

      void
      pic_small (::std::auto_ptr< pic_small_type > p);

      // pic_big
      // 
      typedef ::xml_schema::string pic_big_type;
      typedef ::xsd::cxx::tree::optional< pic_big_type > pic_big_optional;
      typedef ::xsd::cxx::tree::traits< pic_big_type, char > pic_big_traits;

      const pic_big_optional&
      pic_big () const;

      pic_big_optional&
      pic_big ();

      void
      pic_big (const pic_big_type& x);

      void
      pic_big (const pic_big_optional& x);

      void
      pic_big (::std::auto_ptr< pic_big_type > p);

      // pic_square
      // 
      typedef ::xml_schema::string pic_square_type;
      typedef ::xsd::cxx::tree::optional< pic_square_type > pic_square_optional;
      typedef ::xsd::cxx::tree::traits< pic_square_type, char > pic_square_traits;

      const pic_square_optional&
      pic_square () const;

      pic_square_optional&
      pic_square ();

      void
      pic_square (const pic_square_type& x);

      void
      pic_square (const pic_square_optional& x);

      void
      pic_square (::std::auto_ptr< pic_square_type > p);

      // pic
      // 
      typedef ::xml_schema::string pic_type;
      typedef ::xsd::cxx::tree::optional< pic_type > pic_optional;
      typedef ::xsd::cxx::tree::traits< pic_type, char > pic_traits;

      const pic_optional&
      pic () const;

      pic_optional&
      pic ();

      void
      pic (const pic_type& x);

      void
      pic (const pic_optional& x);

      void
      pic (::std::auto_ptr< pic_type > p);

      // pic_large
      // 
      typedef ::xml_schema::string pic_large_type;
      typedef ::xsd::cxx::tree::optional< pic_large_type > pic_large_optional;
      typedef ::xsd::cxx::tree::traits< pic_large_type, char > pic_large_traits;

      const pic_large_optional&
      pic_large () const;

      pic_large_optional&
      pic_large ();

      void
      pic_large (const pic_large_type& x);

      void
      pic_large (const pic_large_optional& x);

      void
      pic_large (::std::auto_ptr< pic_large_type > p);

      // status
      // 
      typedef ::FacebookCpp::XSD::user_status status_type;
      typedef ::xsd::cxx::tree::optional< status_type > status_optional;
      typedef ::xsd::cxx::tree::traits< status_type, char > status_traits;

      const status_optional&
      status () const;

      status_optional&
      status ();

      void
      status (const status_type& x);

      void
      status (const status_optional& x);

      void
      status (::std::auto_ptr< status_type > p);

      // type
      // 
      typedef ::xml_schema::string type_type;
      typedef ::xsd::cxx::tree::optional< type_type > type_optional;
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      const type_optional&
      type () const;

      type_optional&
      type ();

      void
      type (const type_type& x);

      void
      type (const type_optional& x);

      void
      type (::std::auto_ptr< type_type > p);

      // website
      // 
      typedef ::xml_schema::string website_type;
      typedef ::xsd::cxx::tree::optional< website_type > website_optional;
      typedef ::xsd::cxx::tree::traits< website_type, char > website_traits;

      const website_optional&
      website () const;

      website_optional&
      website ();

      void
      website (const website_type& x);

      void
      website (const website_optional& x);

      void
      website (::std::auto_ptr< website_type > p);

      // has_added_app
      // 
      typedef ::xml_schema::boolean has_added_app_type;
      typedef ::xsd::cxx::tree::optional< has_added_app_type > has_added_app_optional;
      typedef ::xsd::cxx::tree::traits< has_added_app_type, char > has_added_app_traits;

      const has_added_app_optional&
      has_added_app () const;

      has_added_app_optional&
      has_added_app ();

      void
      has_added_app (const has_added_app_type& x);

      void
      has_added_app (const has_added_app_optional& x);

      // founded
      // 
      typedef ::xml_schema::string founded_type;
      typedef ::xsd::cxx::tree::optional< founded_type > founded_optional;
      typedef ::xsd::cxx::tree::traits< founded_type, char > founded_traits;

      const founded_optional&
      founded () const;

      founded_optional&
      founded ();

      void
      founded (const founded_type& x);

      void
      founded (const founded_optional& x);

      void
      founded (::std::auto_ptr< founded_type > p);

      // company_overview
      // 
      typedef ::xml_schema::string company_overview_type;
      typedef ::xsd::cxx::tree::optional< company_overview_type > company_overview_optional;
      typedef ::xsd::cxx::tree::traits< company_overview_type, char > company_overview_traits;

      const company_overview_optional&
      company_overview () const;

      company_overview_optional&
      company_overview ();

      void
      company_overview (const company_overview_type& x);

      void
      company_overview (const company_overview_optional& x);

      void
      company_overview (::std::auto_ptr< company_overview_type > p);

      // mission
      // 
      typedef ::xml_schema::string mission_type;
      typedef ::xsd::cxx::tree::optional< mission_type > mission_optional;
      typedef ::xsd::cxx::tree::traits< mission_type, char > mission_traits;

      const mission_optional&
      mission () const;

      mission_optional&
      mission ();

      void
      mission (const mission_type& x);

      void
      mission (const mission_optional& x);

      void
      mission (::std::auto_ptr< mission_type > p);

      // products
      // 
      typedef ::xml_schema::string products_type;
      typedef ::xsd::cxx::tree::optional< products_type > products_optional;
      typedef ::xsd::cxx::tree::traits< products_type, char > products_traits;

      const products_optional&
      products () const;

      products_optional&
      products ();

      void
      products (const products_type& x);

      void
      products (const products_optional& x);

      void
      products (::std::auto_ptr< products_type > p);

      // location
      // 
      typedef ::FacebookCpp::XSD::location location_type;
      typedef ::xsd::cxx::tree::optional< location_type > location_optional;
      typedef ::xsd::cxx::tree::traits< location_type, char > location_traits;

      const location_optional&
      location () const;

      location_optional&
      location ();

      void
      location (const location_type& x);

      void
      location (const location_optional& x);

      void
      location (::std::auto_ptr< location_type > p);

      // parking
      // 
      typedef ::FacebookCpp::XSD::page_parking parking_type;
      typedef ::xsd::cxx::tree::optional< parking_type > parking_optional;
      typedef ::xsd::cxx::tree::traits< parking_type, char > parking_traits;

      const parking_optional&
      parking () const;

      parking_optional&
      parking ();

      void
      parking (const parking_type& x);

      void
      parking (const parking_optional& x);

      void
      parking (::std::auto_ptr< parking_type > p);

      // public_transit
      // 
      typedef ::xml_schema::string public_transit_type;
      typedef ::xsd::cxx::tree::optional< public_transit_type > public_transit_optional;
      typedef ::xsd::cxx::tree::traits< public_transit_type, char > public_transit_traits;

      const public_transit_optional&
      public_transit () const;

      public_transit_optional&
      public_transit ();

      void
      public_transit (const public_transit_type& x);

      void
      public_transit (const public_transit_optional& x);

      void
      public_transit (::std::auto_ptr< public_transit_type > p);

      // hours
      // 
      typedef ::FacebookCpp::XSD::page_hours hours_type;
      typedef ::xsd::cxx::tree::optional< hours_type > hours_optional;
      typedef ::xsd::cxx::tree::traits< hours_type, char > hours_traits;

      const hours_optional&
      hours () const;

      hours_optional&
      hours ();

      void
      hours (const hours_type& x);

      void
      hours (const hours_optional& x);

      void
      hours (::std::auto_ptr< hours_type > p);

      // attire
      // 
      typedef ::xml_schema::string attire_type;
      typedef ::xsd::cxx::tree::optional< attire_type > attire_optional;
      typedef ::xsd::cxx::tree::traits< attire_type, char > attire_traits;

      const attire_optional&
      attire () const;

      attire_optional&
      attire ();

      void
      attire (const attire_type& x);

      void
      attire (const attire_optional& x);

      void
      attire (::std::auto_ptr< attire_type > p);

      // payment_options
      // 
      typedef ::xml_schema::string payment_options_type;
      typedef ::xsd::cxx::tree::optional< payment_options_type > payment_options_optional;
      typedef ::xsd::cxx::tree::traits< payment_options_type, char > payment_options_traits;

      const payment_options_optional&
      payment_options () const;

      payment_options_optional&
      payment_options ();

      void
      payment_options (const payment_options_type& x);

      void
      payment_options (const payment_options_optional& x);

      void
      payment_options (::std::auto_ptr< payment_options_type > p);

      // culinary_team
      // 
      typedef ::xml_schema::string culinary_team_type;
      typedef ::xsd::cxx::tree::optional< culinary_team_type > culinary_team_optional;
      typedef ::xsd::cxx::tree::traits< culinary_team_type, char > culinary_team_traits;

      const culinary_team_optional&
      culinary_team () const;

      culinary_team_optional&
      culinary_team ();

      void
      culinary_team (const culinary_team_type& x);

      void
      culinary_team (const culinary_team_optional& x);

      void
      culinary_team (::std::auto_ptr< culinary_team_type > p);

      // general_manager
      // 
      typedef ::xml_schema::string general_manager_type;
      typedef ::xsd::cxx::tree::optional< general_manager_type > general_manager_optional;
      typedef ::xsd::cxx::tree::traits< general_manager_type, char > general_manager_traits;

      const general_manager_optional&
      general_manager () const;

      general_manager_optional&
      general_manager ();

      void
      general_manager (const general_manager_type& x);

      void
      general_manager (const general_manager_optional& x);

      void
      general_manager (::std::auto_ptr< general_manager_type > p);

      // price_range
      // 
      typedef ::xml_schema::string price_range_type;
      typedef ::xsd::cxx::tree::optional< price_range_type > price_range_optional;
      typedef ::xsd::cxx::tree::traits< price_range_type, char > price_range_traits;

      const price_range_optional&
      price_range () const;

      price_range_optional&
      price_range ();

      void
      price_range (const price_range_type& x);

      void
      price_range (const price_range_optional& x);

      void
      price_range (::std::auto_ptr< price_range_type > p);

      // restaurant_services
      // 
      typedef ::FacebookCpp::XSD::page_restaurant_services restaurant_services_type;
      typedef ::xsd::cxx::tree::optional< restaurant_services_type > restaurant_services_optional;
      typedef ::xsd::cxx::tree::traits< restaurant_services_type, char > restaurant_services_traits;

      const restaurant_services_optional&
      restaurant_services () const;

      restaurant_services_optional&
      restaurant_services ();

      void
      restaurant_services (const restaurant_services_type& x);

      void
      restaurant_services (const restaurant_services_optional& x);

      void
      restaurant_services (::std::auto_ptr< restaurant_services_type > p);

      // restaurant_specialties
      // 
      typedef ::FacebookCpp::XSD::page_restaurant_specialties restaurant_specialties_type;
      typedef ::xsd::cxx::tree::optional< restaurant_specialties_type > restaurant_specialties_optional;
      typedef ::xsd::cxx::tree::traits< restaurant_specialties_type, char > restaurant_specialties_traits;

      const restaurant_specialties_optional&
      restaurant_specialties () const;

      restaurant_specialties_optional&
      restaurant_specialties ();

      void
      restaurant_specialties (const restaurant_specialties_type& x);

      void
      restaurant_specialties (const restaurant_specialties_optional& x);

      void
      restaurant_specialties (::std::auto_ptr< restaurant_specialties_type > p);

      // release_date
      // 
      typedef ::xml_schema::string release_date_type;
      typedef ::xsd::cxx::tree::optional< release_date_type > release_date_optional;
      typedef ::xsd::cxx::tree::traits< release_date_type, char > release_date_traits;

      const release_date_optional&
      release_date () const;

      release_date_optional&
      release_date ();

      void
      release_date (const release_date_type& x);

      void
      release_date (const release_date_optional& x);

      void
      release_date (::std::auto_ptr< release_date_type > p);

      // genre
      // 
      typedef ::xml_schema::string genre_type;
      typedef ::xsd::cxx::tree::optional< genre_type > genre_optional;
      typedef ::xsd::cxx::tree::traits< genre_type, char > genre_traits;

      const genre_optional&
      genre () const;

      genre_optional&
      genre ();

      void
      genre (const genre_type& x);

      void
      genre (const genre_optional& x);

      void
      genre (::std::auto_ptr< genre_type > p);

      // starring
      // 
      typedef ::xml_schema::string starring_type;
      typedef ::xsd::cxx::tree::optional< starring_type > starring_optional;
      typedef ::xsd::cxx::tree::traits< starring_type, char > starring_traits;

      const starring_optional&
      starring () const;

      starring_optional&
      starring ();

      void
      starring (const starring_type& x);

      void
      starring (const starring_optional& x);

      void
      starring (::std::auto_ptr< starring_type > p);

      // screenplay_by
      // 
      typedef ::xml_schema::string screenplay_by_type;
      typedef ::xsd::cxx::tree::optional< screenplay_by_type > screenplay_by_optional;
      typedef ::xsd::cxx::tree::traits< screenplay_by_type, char > screenplay_by_traits;

      const screenplay_by_optional&
      screenplay_by () const;

      screenplay_by_optional&
      screenplay_by ();

      void
      screenplay_by (const screenplay_by_type& x);

      void
      screenplay_by (const screenplay_by_optional& x);

      void
      screenplay_by (::std::auto_ptr< screenplay_by_type > p);

      // directed_by
      // 
      typedef ::xml_schema::string directed_by_type;
      typedef ::xsd::cxx::tree::optional< directed_by_type > directed_by_optional;
      typedef ::xsd::cxx::tree::traits< directed_by_type, char > directed_by_traits;

      const directed_by_optional&
      directed_by () const;

      directed_by_optional&
      directed_by ();

      void
      directed_by (const directed_by_type& x);

      void
      directed_by (const directed_by_optional& x);

      void
      directed_by (::std::auto_ptr< directed_by_type > p);

      // produced_by
      // 
      typedef ::xml_schema::string produced_by_type;
      typedef ::xsd::cxx::tree::optional< produced_by_type > produced_by_optional;
      typedef ::xsd::cxx::tree::traits< produced_by_type, char > produced_by_traits;

      const produced_by_optional&
      produced_by () const;

      produced_by_optional&
      produced_by ();

      void
      produced_by (const produced_by_type& x);

      void
      produced_by (const produced_by_optional& x);

      void
      produced_by (::std::auto_ptr< produced_by_type > p);

      // studio
      // 
      typedef ::xml_schema::string studio_type;
      typedef ::xsd::cxx::tree::optional< studio_type > studio_optional;
      typedef ::xsd::cxx::tree::traits< studio_type, char > studio_traits;

      const studio_optional&
      studio () const;

      studio_optional&
      studio ();

      void
      studio (const studio_type& x);

      void
      studio (const studio_optional& x);

      void
      studio (::std::auto_ptr< studio_type > p);

      // awards
      // 
      typedef ::xml_schema::string awards_type;
      typedef ::xsd::cxx::tree::optional< awards_type > awards_optional;
      typedef ::xsd::cxx::tree::traits< awards_type, char > awards_traits;

      const awards_optional&
      awards () const;

      awards_optional&
      awards ();

      void
      awards (const awards_type& x);

      void
      awards (const awards_optional& x);

      void
      awards (::std::auto_ptr< awards_type > p);

      // plot_outline
      // 
      typedef ::xml_schema::string plot_outline_type;
      typedef ::xsd::cxx::tree::optional< plot_outline_type > plot_outline_optional;
      typedef ::xsd::cxx::tree::traits< plot_outline_type, char > plot_outline_traits;

      const plot_outline_optional&
      plot_outline () const;

      plot_outline_optional&
      plot_outline ();

      void
      plot_outline (const plot_outline_type& x);

      void
      plot_outline (const plot_outline_optional& x);

      void
      plot_outline (::std::auto_ptr< plot_outline_type > p);

      // network
      // 
      typedef ::xml_schema::string network_type;
      typedef ::xsd::cxx::tree::optional< network_type > network_optional;
      typedef ::xsd::cxx::tree::traits< network_type, char > network_traits;

      const network_optional&
      network () const;

      network_optional&
      network ();

      void
      network (const network_type& x);

      void
      network (const network_optional& x);

      void
      network (::std::auto_ptr< network_type > p);

      // season
      // 
      typedef ::xml_schema::string season_type;
      typedef ::xsd::cxx::tree::optional< season_type > season_optional;
      typedef ::xsd::cxx::tree::traits< season_type, char > season_traits;

      const season_optional&
      season () const;

      season_optional&
      season ();

      void
      season (const season_type& x);

      void
      season (const season_optional& x);

      void
      season (::std::auto_ptr< season_type > p);

      // schedule
      // 
      typedef ::xml_schema::string schedule_type;
      typedef ::xsd::cxx::tree::optional< schedule_type > schedule_optional;
      typedef ::xsd::cxx::tree::traits< schedule_type, char > schedule_traits;

      const schedule_optional&
      schedule () const;

      schedule_optional&
      schedule ();

      void
      schedule (const schedule_type& x);

      void
      schedule (const schedule_optional& x);

      void
      schedule (::std::auto_ptr< schedule_type > p);

      // written_by
      // 
      typedef ::xml_schema::string written_by_type;
      typedef ::xsd::cxx::tree::optional< written_by_type > written_by_optional;
      typedef ::xsd::cxx::tree::traits< written_by_type, char > written_by_traits;

      const written_by_optional&
      written_by () const;

      written_by_optional&
      written_by ();

      void
      written_by (const written_by_type& x);

      void
      written_by (const written_by_optional& x);

      void
      written_by (::std::auto_ptr< written_by_type > p);

      // band_members
      // 
      typedef ::xml_schema::string band_members_type;
      typedef ::xsd::cxx::tree::optional< band_members_type > band_members_optional;
      typedef ::xsd::cxx::tree::traits< band_members_type, char > band_members_traits;

      const band_members_optional&
      band_members () const;

      band_members_optional&
      band_members ();

      void
      band_members (const band_members_type& x);

      void
      band_members (const band_members_optional& x);

      void
      band_members (::std::auto_ptr< band_members_type > p);

      // hometown
      // 
      typedef ::xml_schema::string hometown_type;
      typedef ::xsd::cxx::tree::optional< hometown_type > hometown_optional;
      typedef ::xsd::cxx::tree::traits< hometown_type, char > hometown_traits;

      const hometown_optional&
      hometown () const;

      hometown_optional&
      hometown ();

      void
      hometown (const hometown_type& x);

      void
      hometown (const hometown_optional& x);

      void
      hometown (::std::auto_ptr< hometown_type > p);

      // current_location
      // 
      typedef ::xml_schema::string current_location_type;
      typedef ::xsd::cxx::tree::optional< current_location_type > current_location_optional;
      typedef ::xsd::cxx::tree::traits< current_location_type, char > current_location_traits;

      const current_location_optional&
      current_location () const;

      current_location_optional&
      current_location ();

      void
      current_location (const current_location_type& x);

      void
      current_location (const current_location_optional& x);

      void
      current_location (::std::auto_ptr< current_location_type > p);

      // record_label
      // 
      typedef ::xml_schema::string record_label_type;
      typedef ::xsd::cxx::tree::optional< record_label_type > record_label_optional;
      typedef ::xsd::cxx::tree::traits< record_label_type, char > record_label_traits;

      const record_label_optional&
      record_label () const;

      record_label_optional&
      record_label ();

      void
      record_label (const record_label_type& x);

      void
      record_label (const record_label_optional& x);

      void
      record_label (::std::auto_ptr< record_label_type > p);

      // booking_agent
      // 
      typedef ::xml_schema::string booking_agent_type;
      typedef ::xsd::cxx::tree::optional< booking_agent_type > booking_agent_optional;
      typedef ::xsd::cxx::tree::traits< booking_agent_type, char > booking_agent_traits;

      const booking_agent_optional&
      booking_agent () const;

      booking_agent_optional&
      booking_agent ();

      void
      booking_agent (const booking_agent_type& x);

      void
      booking_agent (const booking_agent_optional& x);

      void
      booking_agent (::std::auto_ptr< booking_agent_type > p);

      // artists_we_like
      // 
      typedef ::xml_schema::string artists_we_like_type;
      typedef ::xsd::cxx::tree::optional< artists_we_like_type > artists_we_like_optional;
      typedef ::xsd::cxx::tree::traits< artists_we_like_type, char > artists_we_like_traits;

      const artists_we_like_optional&
      artists_we_like () const;

      artists_we_like_optional&
      artists_we_like ();

      void
      artists_we_like (const artists_we_like_type& x);

      void
      artists_we_like (const artists_we_like_optional& x);

      void
      artists_we_like (::std::auto_ptr< artists_we_like_type > p);

      // influences
      // 
      typedef ::xml_schema::string influences_type;
      typedef ::xsd::cxx::tree::optional< influences_type > influences_optional;
      typedef ::xsd::cxx::tree::traits< influences_type, char > influences_traits;

      const influences_optional&
      influences () const;

      influences_optional&
      influences ();

      void
      influences (const influences_type& x);

      void
      influences (const influences_optional& x);

      void
      influences (::std::auto_ptr< influences_type > p);

      // band_interests
      // 
      typedef ::xml_schema::string band_interests_type;
      typedef ::xsd::cxx::tree::optional< band_interests_type > band_interests_optional;
      typedef ::xsd::cxx::tree::traits< band_interests_type, char > band_interests_traits;

      const band_interests_optional&
      band_interests () const;

      band_interests_optional&
      band_interests ();

      void
      band_interests (const band_interests_type& x);

      void
      band_interests (const band_interests_optional& x);

      void
      band_interests (::std::auto_ptr< band_interests_type > p);

      // bio
      // 
      typedef ::xml_schema::string bio_type;
      typedef ::xsd::cxx::tree::optional< bio_type > bio_optional;
      typedef ::xsd::cxx::tree::traits< bio_type, char > bio_traits;

      const bio_optional&
      bio () const;

      bio_optional&
      bio ();

      void
      bio (const bio_type& x);

      void
      bio (const bio_optional& x);

      void
      bio (::std::auto_ptr< bio_type > p);

      // affiliation
      // 
      typedef ::xml_schema::string affiliation_type;
      typedef ::xsd::cxx::tree::optional< affiliation_type > affiliation_optional;
      typedef ::xsd::cxx::tree::traits< affiliation_type, char > affiliation_traits;

      const affiliation_optional&
      affiliation () const;

      affiliation_optional&
      affiliation ();

      void
      affiliation (const affiliation_type& x);

      void
      affiliation (const affiliation_optional& x);

      void
      affiliation (::std::auto_ptr< affiliation_type > p);

      // birthday
      // 
      typedef ::xml_schema::string birthday_type;
      typedef ::xsd::cxx::tree::optional< birthday_type > birthday_optional;
      typedef ::xsd::cxx::tree::traits< birthday_type, char > birthday_traits;

      const birthday_optional&
      birthday () const;

      birthday_optional&
      birthday ();

      void
      birthday (const birthday_type& x);

      void
      birthday (const birthday_optional& x);

      void
      birthday (::std::auto_ptr< birthday_type > p);

      // personal_info
      // 
      typedef ::xml_schema::string personal_info_type;
      typedef ::xsd::cxx::tree::optional< personal_info_type > personal_info_optional;
      typedef ::xsd::cxx::tree::traits< personal_info_type, char > personal_info_traits;

      const personal_info_optional&
      personal_info () const;

      personal_info_optional&
      personal_info ();

      void
      personal_info (const personal_info_type& x);

      void
      personal_info (const personal_info_optional& x);

      void
      personal_info (::std::auto_ptr< personal_info_type > p);

      // personal_interests
      // 
      typedef ::xml_schema::string personal_interests_type;
      typedef ::xsd::cxx::tree::optional< personal_interests_type > personal_interests_optional;
      typedef ::xsd::cxx::tree::traits< personal_interests_type, char > personal_interests_traits;

      const personal_interests_optional&
      personal_interests () const;

      personal_interests_optional&
      personal_interests ();

      void
      personal_interests (const personal_interests_type& x);

      void
      personal_interests (const personal_interests_optional& x);

      void
      personal_interests (::std::auto_ptr< personal_interests_type > p);

      // members
      // 
      typedef ::xml_schema::string members_type;
      typedef ::xsd::cxx::tree::optional< members_type > members_optional;
      typedef ::xsd::cxx::tree::traits< members_type, char > members_traits;

      const members_optional&
      members () const;

      members_optional&
      members ();

      void
      members (const members_type& x);

      void
      members (const members_optional& x);

      void
      members (::std::auto_ptr< members_type > p);

      // built
      // 
      typedef ::xml_schema::string built_type;
      typedef ::xsd::cxx::tree::optional< built_type > built_optional;
      typedef ::xsd::cxx::tree::traits< built_type, char > built_traits;

      const built_optional&
      built () const;

      built_optional&
      built ();

      void
      built (const built_type& x);

      void
      built (const built_optional& x);

      void
      built (::std::auto_ptr< built_type > p);

      // features
      // 
      typedef ::xml_schema::string features_type;
      typedef ::xsd::cxx::tree::optional< features_type > features_optional;
      typedef ::xsd::cxx::tree::traits< features_type, char > features_traits;

      const features_optional&
      features () const;

      features_optional&
      features ();

      void
      features (const features_type& x);

      void
      features (const features_optional& x);

      void
      features (::std::auto_ptr< features_type > p);

      // mpg
      // 
      typedef ::xml_schema::string mpg_type;
      typedef ::xsd::cxx::tree::optional< mpg_type > mpg_optional;
      typedef ::xsd::cxx::tree::traits< mpg_type, char > mpg_traits;

      const mpg_optional&
      mpg () const;

      mpg_optional&
      mpg ();

      void
      mpg (const mpg_type& x);

      void
      mpg (const mpg_optional& x);

      void
      mpg (::std::auto_ptr< mpg_type > p);

      // general_info
      // 
      typedef ::xml_schema::string general_info_type;
      typedef ::xsd::cxx::tree::optional< general_info_type > general_info_optional;
      typedef ::xsd::cxx::tree::traits< general_info_type, char > general_info_traits;

      const general_info_optional&
      general_info () const;

      general_info_optional&
      general_info ();

      void
      general_info (const general_info_type& x);

      void
      general_info (const general_info_optional& x);

      void
      general_info (::std::auto_ptr< general_info_type > p);

      // Constructors.
      //
      page ();

      page (const xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      page (const page& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      virtual page*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~page ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      page_id_optional page_id_;
      name_optional name_;
      pic_small_optional pic_small_;
      pic_big_optional pic_big_;
      pic_square_optional pic_square_;
      pic_optional pic_;
      pic_large_optional pic_large_;
      status_optional status_;
      type_optional type_;
      website_optional website_;
      has_added_app_optional has_added_app_;
      founded_optional founded_;
      company_overview_optional company_overview_;
      mission_optional mission_;
      products_optional products_;
      location_optional location_;
      parking_optional parking_;
      public_transit_optional public_transit_;
      hours_optional hours_;
      attire_optional attire_;
      payment_options_optional payment_options_;
      culinary_team_optional culinary_team_;
      general_manager_optional general_manager_;
      price_range_optional price_range_;
      restaurant_services_optional restaurant_services_;
      restaurant_specialties_optional restaurant_specialties_;
      release_date_optional release_date_;
      genre_optional genre_;
      starring_optional starring_;
      screenplay_by_optional screenplay_by_;
      directed_by_optional directed_by_;
      produced_by_optional produced_by_;
      studio_optional studio_;
      awards_optional awards_;
      plot_outline_optional plot_outline_;
      network_optional network_;
      season_optional season_;
      schedule_optional schedule_;
      written_by_optional written_by_;
      band_members_optional band_members_;
      hometown_optional hometown_;
      current_location_optional current_location_;
      record_label_optional record_label_;
      booking_agent_optional booking_agent_;
      artists_we_like_optional artists_we_like_;
      influences_optional influences_;
      band_interests_optional band_interests_;
      bio_optional bio_;
      affiliation_optional affiliation_;
      birthday_optional birthday_;
      personal_info_optional personal_info_;
      personal_interests_optional personal_interests_;
      members_optional members_;
      built_optional built_;
      features_optional features_;
      mpg_optional mpg_;
      general_info_optional general_info_;
    };

    class cookie: public ::xml_schema::type
    {
      public:
      // uid
      // 
      typedef ::FacebookCpp::XSD::uid uid_type;
      typedef ::xsd::cxx::tree::traits< uid_type, char > uid_traits;

      const uid_type&
      uid () const;

      uid_type&
      uid ();

      void
      uid (const uid_type& x);

      void
      uid (::std::auto_ptr< uid_type > p);

      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // value
      // 
      typedef ::xml_schema::string value_type;
      typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

      const value_type&
      value () const;

      value_type&
      value ();

      void
      value (const value_type& x);

      void
      value (::std::auto_ptr< value_type > p);

      // expires
      // 
      typedef ::xml_schema::int_ expires_type;
      typedef ::xsd::cxx::tree::traits< expires_type, char > expires_traits;

      const expires_type&
      expires () const;

      expires_type&
      expires ();

      void
      expires (const expires_type& x);

      // path
      // 
      typedef ::xml_schema::string path_type;
      typedef ::xsd::cxx::tree::traits< path_type, char > path_traits;

      const path_type&
      path () const;

      path_type&
      path ();

      void
      path (const path_type& x);

      void
      path (::std::auto_ptr< path_type > p);

      // Constructors.
      //
      cookie (const uid_type&,
              const name_type&,
              const value_type&,
              const expires_type&,
              const path_type&);

      cookie (const xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      cookie (const cookie& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      virtual cookie*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~cookie ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< uid_type > uid_;
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< value_type > value_;
      ::xsd::cxx::tree::one< expires_type > expires_;
      ::xsd::cxx::tree::one< path_type > path_;
    };

    class phrase: public ::xml_schema::type
    {
      public:
      // description
      // 
      typedef ::xml_schema::string description_type;
      typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

      const description_type&
      description () const;

      description_type&
      description ();

      void
      description (const description_type& x);

      void
      description (::std::auto_ptr< description_type > p);

      // text
      // 
      typedef ::xml_schema::string text_type;
      typedef ::xsd::cxx::tree::traits< text_type, char > text_traits;

      const text_type&
      text () const;

      text_type&
      text ();

      void
      text (const text_type& x);

      void
      text (::std::auto_ptr< text_type > p);

      // Constructors.
      //
      phrase (const description_type&,
              const text_type&);

      phrase (const xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      phrase (const phrase& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      virtual phrase*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~phrase ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< description_type > description_;
      ::xsd::cxx::tree::one< text_type > text_;
    };

    class request_args: public ::xml_schema::type
    {
      public:
      // arg
      // 
      typedef ::FacebookCpp::XSD::arg arg_type;
      typedef ::xsd::cxx::tree::sequence< arg_type > arg_sequence;
      typedef xsd::cxx::tree::sequence< arg_type >::iterator arg_iterator;
      typedef xsd::cxx::tree::sequence< arg_type >::const_iterator arg_const_iterator;
      typedef ::xsd::cxx::tree::traits< arg_type, char > arg_traits;

      const arg_sequence&
      arg () const;

      arg_sequence&
      arg ();

      void
      arg (const arg_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      request_args ();

      request_args (const xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      request_args (const request_args& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual request_args*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~request_args ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      arg_sequence arg_;
      list_optional list_;
    };

    class positions: public ::xml_schema::type
    {
      public:
      // member_type
      // 
      typedef ::FacebookCpp::XSD::member_type member_type_type;
      typedef ::xsd::cxx::tree::sequence< member_type_type > member_type_sequence;
      typedef xsd::cxx::tree::sequence< member_type_type >::iterator member_type_iterator;
      typedef xsd::cxx::tree::sequence< member_type_type >::const_iterator member_type_const_iterator;
      typedef ::xsd::cxx::tree::traits< member_type_type, char > member_type_traits;

      const member_type_sequence&
      member_type () const;

      member_type_sequence&
      member_type ();

      void
      member_type (const member_type_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      positions ();

      positions (const xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      positions (const positions& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual positions*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~positions ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      member_type_sequence member_type_;
      list_optional list_;
    };

    class members: public ::xml_schema::type
    {
      public:
      // uid
      // 
      typedef ::FacebookCpp::XSD::uid uid_type;
      typedef ::xsd::cxx::tree::sequence< uid_type > uid_sequence;
      typedef xsd::cxx::tree::sequence< uid_type >::iterator uid_iterator;
      typedef xsd::cxx::tree::sequence< uid_type >::const_iterator uid_const_iterator;
      typedef ::xsd::cxx::tree::traits< uid_type, char > uid_traits;

      const uid_sequence&
      uid () const;

      uid_sequence&
      uid ();

      void
      uid (const uid_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      members ();

      members (const xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      members (const members& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      virtual members*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~members ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      uid_sequence uid_;
      list_optional list_;
    };

    class admins: public ::xml_schema::type
    {
      public:
      // uid
      // 
      typedef ::FacebookCpp::XSD::uid uid_type;
      typedef ::xsd::cxx::tree::sequence< uid_type > uid_sequence;
      typedef xsd::cxx::tree::sequence< uid_type >::iterator uid_iterator;
      typedef xsd::cxx::tree::sequence< uid_type >::const_iterator uid_const_iterator;
      typedef ::xsd::cxx::tree::traits< uid_type, char > uid_traits;

      const uid_sequence&
      uid () const;

      uid_sequence&
      uid ();

      void
      uid (const uid_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      admins ();

      admins (const xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      admins (const admins& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      virtual admins*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~admins ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      uid_sequence uid_;
      list_optional list_;
    };

    class officers: public ::xml_schema::type
    {
      public:
      // uid
      // 
      typedef ::FacebookCpp::XSD::uid uid_type;
      typedef ::xsd::cxx::tree::sequence< uid_type > uid_sequence;
      typedef xsd::cxx::tree::sequence< uid_type >::iterator uid_iterator;
      typedef xsd::cxx::tree::sequence< uid_type >::const_iterator uid_const_iterator;
      typedef ::xsd::cxx::tree::traits< uid_type, char > uid_traits;

      const uid_sequence&
      uid () const;

      uid_sequence&
      uid ();

      void
      uid (const uid_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      officers ();

      officers (const xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      officers (const officers& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      virtual officers*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~officers ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      uid_sequence uid_;
      list_optional list_;
    };

    class not_replied: public ::xml_schema::type
    {
      public:
      // uid
      // 
      typedef ::FacebookCpp::XSD::uid uid_type;
      typedef ::xsd::cxx::tree::sequence< uid_type > uid_sequence;
      typedef xsd::cxx::tree::sequence< uid_type >::iterator uid_iterator;
      typedef xsd::cxx::tree::sequence< uid_type >::const_iterator uid_const_iterator;
      typedef ::xsd::cxx::tree::traits< uid_type, char > uid_traits;

      const uid_sequence&
      uid () const;

      uid_sequence&
      uid ();

      void
      uid (const uid_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      not_replied ();

      not_replied (const xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      not_replied (const not_replied& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual not_replied*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~not_replied ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      uid_sequence uid_;
      list_optional list_;
    };

    class attending: public ::xml_schema::type
    {
      public:
      // uid
      // 
      typedef ::FacebookCpp::XSD::uid uid_type;
      typedef ::xsd::cxx::tree::sequence< uid_type > uid_sequence;
      typedef xsd::cxx::tree::sequence< uid_type >::iterator uid_iterator;
      typedef xsd::cxx::tree::sequence< uid_type >::const_iterator uid_const_iterator;
      typedef ::xsd::cxx::tree::traits< uid_type, char > uid_traits;

      const uid_sequence&
      uid () const;

      uid_sequence&
      uid ();

      void
      uid (const uid_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      attending ();

      attending (const xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      attending (const attending& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual attending*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~attending ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      uid_sequence uid_;
      list_optional list_;
    };

    class unsure: public ::xml_schema::type
    {
      public:
      // uid
      // 
      typedef ::FacebookCpp::XSD::uid uid_type;
      typedef ::xsd::cxx::tree::sequence< uid_type > uid_sequence;
      typedef xsd::cxx::tree::sequence< uid_type >::iterator uid_iterator;
      typedef xsd::cxx::tree::sequence< uid_type >::const_iterator uid_const_iterator;
      typedef ::xsd::cxx::tree::traits< uid_type, char > uid_traits;

      const uid_sequence&
      uid () const;

      uid_sequence&
      uid ();

      void
      uid (const uid_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      unsure ();

      unsure (const xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      unsure (const unsure& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      virtual unsure*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~unsure ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      uid_sequence uid_;
      list_optional list_;
    };

    class declined: public ::xml_schema::type
    {
      public:
      // uid
      // 
      typedef ::FacebookCpp::XSD::uid uid_type;
      typedef ::xsd::cxx::tree::sequence< uid_type > uid_sequence;
      typedef xsd::cxx::tree::sequence< uid_type >::iterator uid_iterator;
      typedef xsd::cxx::tree::sequence< uid_type >::const_iterator uid_const_iterator;
      typedef ::xsd::cxx::tree::traits< uid_type, char > uid_traits;

      const uid_sequence&
      uid () const;

      uid_sequence&
      uid ();

      void
      uid (const uid_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      declined ();

      declined (const xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      declined (const declined& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      virtual declined*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~declined ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      uid_sequence uid_;
      list_optional list_;
    };

    class not_replied1: public ::xml_schema::type
    {
      public:
      // uid
      // 
      typedef ::FacebookCpp::XSD::uid uid_type;
      typedef ::xsd::cxx::tree::sequence< uid_type > uid_sequence;
      typedef xsd::cxx::tree::sequence< uid_type >::iterator uid_iterator;
      typedef xsd::cxx::tree::sequence< uid_type >::const_iterator uid_const_iterator;
      typedef ::xsd::cxx::tree::traits< uid_type, char > uid_traits;

      const uid_sequence&
      uid () const;

      uid_sequence&
      uid ();

      void
      uid (const uid_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      not_replied1 ();

      not_replied1 (const xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      not_replied1 (const not_replied1& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual not_replied1*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~not_replied1 ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      uid_sequence uid_;
      list_optional list_;
    };

    class friend_requests: public ::xml_schema::type
    {
      public:
      // uid
      // 
      typedef ::FacebookCpp::XSD::uid uid_type;
      typedef ::xsd::cxx::tree::sequence< uid_type > uid_sequence;
      typedef xsd::cxx::tree::sequence< uid_type >::iterator uid_iterator;
      typedef xsd::cxx::tree::sequence< uid_type >::const_iterator uid_const_iterator;
      typedef ::xsd::cxx::tree::traits< uid_type, char > uid_traits;

      const uid_sequence&
      uid () const;

      uid_sequence&
      uid ();

      void
      uid (const uid_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      friend_requests ();

      friend_requests (const xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      friend_requests (const friend_requests& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual friend_requests*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~friend_requests ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      uid_sequence uid_;
      list_optional list_;
    };

    class group_invites: public ::xml_schema::type
    {
      public:
      // gid
      // 
      typedef ::FacebookCpp::XSD::gid gid_type;
      typedef ::xsd::cxx::tree::sequence< gid_type > gid_sequence;
      typedef xsd::cxx::tree::sequence< gid_type >::iterator gid_iterator;
      typedef xsd::cxx::tree::sequence< gid_type >::const_iterator gid_const_iterator;
      typedef ::xsd::cxx::tree::traits< gid_type, char > gid_traits;

      const gid_sequence&
      gid () const;

      gid_sequence&
      gid ();

      void
      gid (const gid_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      group_invites ();

      group_invites (const xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      group_invites (const group_invites& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual group_invites*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~group_invites ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      gid_sequence gid_;
      list_optional list_;
    };

    class event_invites: public ::xml_schema::type
    {
      public:
      // eid
      // 
      typedef ::FacebookCpp::XSD::eid eid_type;
      typedef ::xsd::cxx::tree::sequence< eid_type > eid_sequence;
      typedef xsd::cxx::tree::sequence< eid_type >::iterator eid_iterator;
      typedef xsd::cxx::tree::sequence< eid_type >::const_iterator eid_const_iterator;
      typedef ::xsd::cxx::tree::traits< eid_type, char > eid_traits;

      const eid_sequence&
      eid () const;

      eid_sequence&
      eid ();

      void
      eid (const eid_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      event_invites ();

      event_invites (const xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      event_invites (const event_invites& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual event_invites*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~event_invites ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      eid_sequence eid_;
      list_optional list_;
    };

    class concentrations: public ::xml_schema::type
    {
      public:
      // concentration
      // 
      typedef ::FacebookCpp::XSD::concentration concentration_type;
      typedef ::xsd::cxx::tree::sequence< concentration_type > concentration_sequence;
      typedef xsd::cxx::tree::sequence< concentration_type >::iterator concentration_iterator;
      typedef xsd::cxx::tree::sequence< concentration_type >::const_iterator concentration_const_iterator;
      typedef ::xsd::cxx::tree::traits< concentration_type, char > concentration_traits;

      const concentration_sequence&
      concentration () const;

      concentration_sequence&
      concentration ();

      void
      concentration (const concentration_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      concentrations ();

      concentrations (const xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      concentrations (const concentrations& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual concentrations*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~concentrations ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      concentration_sequence concentration_;
      list_optional list_;
    };

    class affiliations: public ::xml_schema::type
    {
      public:
      // affiliation
      // 
      typedef ::FacebookCpp::XSD::affiliation affiliation_type;
      typedef ::xsd::cxx::tree::sequence< affiliation_type > affiliation_sequence;
      typedef xsd::cxx::tree::sequence< affiliation_type >::iterator affiliation_iterator;
      typedef xsd::cxx::tree::sequence< affiliation_type >::const_iterator affiliation_const_iterator;
      typedef ::xsd::cxx::tree::traits< affiliation_type, char > affiliation_traits;

      const affiliation_sequence&
      affiliation () const;

      affiliation_sequence&
      affiliation ();

      void
      affiliation (const affiliation_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      affiliations ();

      affiliations (const xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      affiliations (const affiliations& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual affiliations*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~affiliations ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      affiliation_sequence affiliation_;
      list_optional list_;
    };

    class education_history: public ::xml_schema::type
    {
      public:
      // education_info
      // 
      typedef ::FacebookCpp::XSD::education_info education_info_type;
      typedef ::xsd::cxx::tree::sequence< education_info_type > education_info_sequence;
      typedef xsd::cxx::tree::sequence< education_info_type >::iterator education_info_iterator;
      typedef xsd::cxx::tree::sequence< education_info_type >::const_iterator education_info_const_iterator;
      typedef ::xsd::cxx::tree::traits< education_info_type, char > education_info_traits;

      const education_info_sequence&
      education_info () const;

      education_info_sequence&
      education_info ();

      void
      education_info (const education_info_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      education_history ();

      education_history (const xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      education_history (const education_history& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual education_history*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~education_history ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      education_info_sequence education_info_;
      list_optional list_;
    };

    class meeting_for: public ::xml_schema::type
    {
      public:
      // seeking
      // 
      typedef ::FacebookCpp::XSD::seeking seeking_type;
      typedef ::xsd::cxx::tree::sequence< seeking_type > seeking_sequence;
      typedef xsd::cxx::tree::sequence< seeking_type >::iterator seeking_iterator;
      typedef xsd::cxx::tree::sequence< seeking_type >::const_iterator seeking_const_iterator;
      typedef ::xsd::cxx::tree::traits< seeking_type, char > seeking_traits;

      const seeking_sequence&
      seeking () const;

      seeking_sequence&
      seeking ();

      void
      seeking (const seeking_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      meeting_for ();

      meeting_for (const xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      meeting_for (const meeting_for& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual meeting_for*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~meeting_for ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      seeking_sequence seeking_;
      list_optional list_;
    };

    class meeting_sex: public ::xml_schema::type
    {
      public:
      // sex
      // 
      typedef ::FacebookCpp::XSD::sex sex_type;
      typedef ::xsd::cxx::tree::sequence< sex_type > sex_sequence;
      typedef xsd::cxx::tree::sequence< sex_type >::iterator sex_iterator;
      typedef xsd::cxx::tree::sequence< sex_type >::const_iterator sex_const_iterator;
      typedef ::xsd::cxx::tree::traits< sex_type, char > sex_traits;

      const sex_sequence&
      sex () const;

      sex_sequence&
      sex ();

      void
      sex (const sex_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      meeting_sex ();

      meeting_sex (const xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      meeting_sex (const meeting_sex& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual meeting_sex*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~meeting_sex ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      sex_sequence sex_;
      list_optional list_;
    };

    class work_history: public ::xml_schema::type
    {
      public:
      // work_info
      // 
      typedef ::FacebookCpp::XSD::work_info work_info_type;
      typedef ::xsd::cxx::tree::sequence< work_info_type > work_info_sequence;
      typedef xsd::cxx::tree::sequence< work_info_type >::iterator work_info_iterator;
      typedef xsd::cxx::tree::sequence< work_info_type >::const_iterator work_info_const_iterator;
      typedef ::xsd::cxx::tree::traits< work_info_type, char > work_info_traits;

      const work_info_sequence&
      work_info () const;

      work_info_sequence&
      work_info ();

      void
      work_info (const work_info_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      work_history ();

      work_history (const xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      work_history (const work_history& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual work_history*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~work_history ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      work_info_sequence work_info_;
      list_optional list_;
    };

    class image_urls: public ::xml_schema::type
    {
      public:
      // image_urls_elt
      // 
      typedef ::xml_schema::string image_urls_elt_type;
      typedef ::xsd::cxx::tree::sequence< image_urls_elt_type > image_urls_elt_sequence;
      typedef xsd::cxx::tree::sequence< image_urls_elt_type >::iterator image_urls_elt_iterator;
      typedef xsd::cxx::tree::sequence< image_urls_elt_type >::const_iterator image_urls_elt_const_iterator;
      typedef ::xsd::cxx::tree::traits< image_urls_elt_type, char > image_urls_elt_traits;

      const image_urls_elt_sequence&
      image_urls_elt () const;

      image_urls_elt_sequence&
      image_urls_elt ();

      void
      image_urls_elt (const image_urls_elt_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      image_urls ();

      image_urls (const xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      image_urls (const image_urls& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual image_urls*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~image_urls ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      image_urls_elt_sequence image_urls_elt_;
      list_optional list_;
    };

    class events_get_response: public ::xml_schema::type
    {
      public:
      // event
      // 
      typedef ::FacebookCpp::XSD::event event_type;
      typedef ::xsd::cxx::tree::sequence< event_type > event_sequence;
      typedef xsd::cxx::tree::sequence< event_type >::iterator event_iterator;
      typedef xsd::cxx::tree::sequence< event_type >::const_iterator event_const_iterator;
      typedef ::xsd::cxx::tree::traits< event_type, char > event_traits;

      const event_sequence&
      event () const;

      event_sequence&
      event ();

      void
      event (const event_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      events_get_response ();

      events_get_response (const xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      events_get_response (const events_get_response& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual events_get_response*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~events_get_response ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      event_sequence event_;
      list_optional list_;
    };

    class friends_areFriends_response: public ::xml_schema::type
    {
      public:
      // friend_info
      // 
      typedef ::FacebookCpp::XSD::friend_info friend_info_type;
      typedef ::xsd::cxx::tree::sequence< friend_info_type > friend_info_sequence;
      typedef xsd::cxx::tree::sequence< friend_info_type >::iterator friend_info_iterator;
      typedef xsd::cxx::tree::sequence< friend_info_type >::const_iterator friend_info_const_iterator;
      typedef ::xsd::cxx::tree::traits< friend_info_type, char > friend_info_traits;

      const friend_info_sequence&
      friend_info () const;

      friend_info_sequence&
      friend_info ();

      void
      friend_info (const friend_info_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      friends_areFriends_response ();

      friends_areFriends_response (const xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      friends_areFriends_response (const friends_areFriends_response& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual friends_areFriends_response*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~friends_areFriends_response ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      friend_info_sequence friend_info_;
      list_optional list_;
    };

    class friends_get_response: public ::xml_schema::type
    {
      public:
      // uid
      // 
      typedef ::FacebookCpp::XSD::uid uid_type;
      typedef ::xsd::cxx::tree::sequence< uid_type > uid_sequence;
      typedef xsd::cxx::tree::sequence< uid_type >::iterator uid_iterator;
      typedef xsd::cxx::tree::sequence< uid_type >::const_iterator uid_const_iterator;
      typedef ::xsd::cxx::tree::traits< uid_type, char > uid_traits;

      const uid_sequence&
      uid () const;

      uid_sequence&
      uid ();

      void
      uid (const uid_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      friends_get_response ();

      friends_get_response (const xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      friends_get_response (const friends_get_response& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual friends_get_response*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~friends_get_response ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      uid_sequence uid_;
      list_optional list_;
    };

    class friends_getAppUsers_response: public ::xml_schema::type
    {
      public:
      // uid
      // 
      typedef ::FacebookCpp::XSD::uid uid_type;
      typedef ::xsd::cxx::tree::sequence< uid_type > uid_sequence;
      typedef xsd::cxx::tree::sequence< uid_type >::iterator uid_iterator;
      typedef xsd::cxx::tree::sequence< uid_type >::const_iterator uid_const_iterator;
      typedef ::xsd::cxx::tree::traits< uid_type, char > uid_traits;

      const uid_sequence&
      uid () const;

      uid_sequence&
      uid ();

      void
      uid (const uid_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      friends_getAppUsers_response ();

      friends_getAppUsers_response (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      friends_getAppUsers_response (const friends_getAppUsers_response& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual friends_getAppUsers_response*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~friends_getAppUsers_response ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      uid_sequence uid_;
      list_optional list_;
    };

    class friends_getLists_response: public ::xml_schema::type
    {
      public:
      // friendlist
      // 
      typedef ::FacebookCpp::XSD::friendlist friendlist_type;
      typedef ::xsd::cxx::tree::sequence< friendlist_type > friendlist_sequence;
      typedef xsd::cxx::tree::sequence< friendlist_type >::iterator friendlist_iterator;
      typedef xsd::cxx::tree::sequence< friendlist_type >::const_iterator friendlist_const_iterator;
      typedef ::xsd::cxx::tree::traits< friendlist_type, char > friendlist_traits;

      const friendlist_sequence&
      friendlist () const;

      friendlist_sequence&
      friendlist ();

      void
      friendlist (const friendlist_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      friends_getLists_response ();

      friends_getLists_response (const xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      friends_getLists_response (const friends_getLists_response& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual friends_getLists_response*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~friends_getLists_response ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      friendlist_sequence friendlist_;
      list_optional list_;
    };

    class groups_get_response: public ::xml_schema::type
    {
      public:
      // group
      // 
      typedef ::FacebookCpp::XSD::group group_type;
      typedef ::xsd::cxx::tree::sequence< group_type > group_sequence;
      typedef xsd::cxx::tree::sequence< group_type >::iterator group_iterator;
      typedef xsd::cxx::tree::sequence< group_type >::const_iterator group_const_iterator;
      typedef ::xsd::cxx::tree::traits< group_type, char > group_traits;

      const group_sequence&
      group () const;

      group_sequence&
      group ();

      void
      group (const group_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      groups_get_response ();

      groups_get_response (const xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      groups_get_response (const groups_get_response& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual groups_get_response*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~groups_get_response ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      group_sequence group_;
      list_optional list_;
    };

    class data_getCookies_response: public ::xml_schema::type
    {
      public:
      // cookie
      // 
      typedef ::FacebookCpp::XSD::cookie cookie_type;
      typedef ::xsd::cxx::tree::sequence< cookie_type > cookie_sequence;
      typedef xsd::cxx::tree::sequence< cookie_type >::iterator cookie_iterator;
      typedef xsd::cxx::tree::sequence< cookie_type >::const_iterator cookie_const_iterator;
      typedef ::xsd::cxx::tree::traits< cookie_type, char > cookie_traits;

      const cookie_sequence&
      cookie () const;

      cookie_sequence&
      cookie ();

      void
      cookie (const cookie_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      data_getCookies_response ();

      data_getCookies_response (const xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      data_getCookies_response (const data_getCookies_response& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual data_getCookies_response*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~data_getCookies_response ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      cookie_sequence cookie_;
      list_optional list_;
    };

    class marketplace_getCategories_response: public ::xml_schema::type
    {
      public:
      // marketplace_category
      // 
      typedef ::FacebookCpp::XSD::marketplace_category marketplace_category_type;
      typedef ::xsd::cxx::tree::sequence< marketplace_category_type > marketplace_category_sequence;
      typedef xsd::cxx::tree::sequence< marketplace_category_type >::iterator marketplace_category_iterator;
      typedef xsd::cxx::tree::sequence< marketplace_category_type >::const_iterator marketplace_category_const_iterator;
      typedef ::xsd::cxx::tree::traits< marketplace_category_type, char > marketplace_category_traits;

      const marketplace_category_sequence&
      marketplace_category () const;

      marketplace_category_sequence&
      marketplace_category ();

      void
      marketplace_category (const marketplace_category_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      marketplace_getCategories_response ();

      marketplace_getCategories_response (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      marketplace_getCategories_response (const marketplace_getCategories_response& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual marketplace_getCategories_response*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~marketplace_getCategories_response ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      marketplace_category_sequence marketplace_category_;
      list_optional list_;
    };

    class marketplace_getSubCategories_response: public ::xml_schema::type
    {
      public:
      // marketplace_subcategory
      // 
      typedef ::FacebookCpp::XSD::marketplace_subcategory marketplace_subcategory_type;
      typedef ::xsd::cxx::tree::sequence< marketplace_subcategory_type > marketplace_subcategory_sequence;
      typedef xsd::cxx::tree::sequence< marketplace_subcategory_type >::iterator marketplace_subcategory_iterator;
      typedef xsd::cxx::tree::sequence< marketplace_subcategory_type >::const_iterator marketplace_subcategory_const_iterator;
      typedef ::xsd::cxx::tree::traits< marketplace_subcategory_type, char > marketplace_subcategory_traits;

      const marketplace_subcategory_sequence&
      marketplace_subcategory () const;

      marketplace_subcategory_sequence&
      marketplace_subcategory ();

      void
      marketplace_subcategory (const marketplace_subcategory_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      marketplace_getSubCategories_response ();

      marketplace_getSubCategories_response (const xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      marketplace_getSubCategories_response (const marketplace_getSubCategories_response& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual marketplace_getSubCategories_response*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~marketplace_getSubCategories_response ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      marketplace_subcategory_sequence marketplace_subcategory_;
      list_optional list_;
    };

    class marketplace_getListings_response: public ::xml_schema::type
    {
      public:
      // listing
      // 
      typedef ::FacebookCpp::XSD::listing listing_type;
      typedef ::xsd::cxx::tree::sequence< listing_type > listing_sequence;
      typedef xsd::cxx::tree::sequence< listing_type >::iterator listing_iterator;
      typedef xsd::cxx::tree::sequence< listing_type >::const_iterator listing_const_iterator;
      typedef ::xsd::cxx::tree::traits< listing_type, char > listing_traits;

      const listing_sequence&
      listing () const;

      listing_sequence&
      listing ();

      void
      listing (const listing_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      marketplace_getListings_response ();

      marketplace_getListings_response (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      marketplace_getListings_response (const marketplace_getListings_response& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual marketplace_getListings_response*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~marketplace_getListings_response ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      listing_sequence listing_;
      list_optional list_;
    };

    class marketplace_search_response: public ::xml_schema::type
    {
      public:
      // listing
      // 
      typedef ::FacebookCpp::XSD::listing listing_type;
      typedef ::xsd::cxx::tree::sequence< listing_type > listing_sequence;
      typedef xsd::cxx::tree::sequence< listing_type >::iterator listing_iterator;
      typedef xsd::cxx::tree::sequence< listing_type >::const_iterator listing_const_iterator;
      typedef ::xsd::cxx::tree::traits< listing_type, char > listing_traits;

      const listing_sequence&
      listing () const;

      listing_sequence&
      listing ();

      void
      listing (const listing_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      marketplace_search_response ();

      marketplace_search_response (const xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      marketplace_search_response (const marketplace_search_response& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual marketplace_search_response*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~marketplace_search_response ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      listing_sequence listing_;
      list_optional list_;
    };

    class photos_get_response: public ::xml_schema::type
    {
      public:
      // photo
      // 
      typedef ::FacebookCpp::XSD::photo photo_type;
      typedef ::xsd::cxx::tree::sequence< photo_type > photo_sequence;
      typedef xsd::cxx::tree::sequence< photo_type >::iterator photo_iterator;
      typedef xsd::cxx::tree::sequence< photo_type >::const_iterator photo_const_iterator;
      typedef ::xsd::cxx::tree::traits< photo_type, char > photo_traits;

      const photo_sequence&
      photo () const;

      photo_sequence&
      photo ();

      void
      photo (const photo_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      photos_get_response ();

      photos_get_response (const xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      photos_get_response (const photos_get_response& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual photos_get_response*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~photos_get_response ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      photo_sequence photo_;
      list_optional list_;
    };

    class photos_getAlbums_response: public ::xml_schema::type
    {
      public:
      // album
      // 
      typedef ::FacebookCpp::XSD::album album_type;
      typedef ::xsd::cxx::tree::sequence< album_type > album_sequence;
      typedef xsd::cxx::tree::sequence< album_type >::iterator album_iterator;
      typedef xsd::cxx::tree::sequence< album_type >::const_iterator album_const_iterator;
      typedef ::xsd::cxx::tree::traits< album_type, char > album_traits;

      const album_sequence&
      album () const;

      album_sequence&
      album ();

      void
      album (const album_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      photos_getAlbums_response ();

      photos_getAlbums_response (const xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      photos_getAlbums_response (const photos_getAlbums_response& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual photos_getAlbums_response*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~photos_getAlbums_response ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      album_sequence album_;
      list_optional list_;
    };

    class photos_getTags_response: public ::xml_schema::type
    {
      public:
      // photo_tag
      // 
      typedef ::FacebookCpp::XSD::photo_tag photo_tag_type;
      typedef ::xsd::cxx::tree::sequence< photo_tag_type > photo_tag_sequence;
      typedef xsd::cxx::tree::sequence< photo_tag_type >::iterator photo_tag_iterator;
      typedef xsd::cxx::tree::sequence< photo_tag_type >::const_iterator photo_tag_const_iterator;
      typedef ::xsd::cxx::tree::traits< photo_tag_type, char > photo_tag_traits;

      const photo_tag_sequence&
      photo_tag () const;

      photo_tag_sequence&
      photo_tag ();

      void
      photo_tag (const photo_tag_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      photos_getTags_response ();

      photos_getTags_response (const xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      photos_getTags_response (const photos_getTags_response& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual photos_getTags_response*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~photos_getTags_response ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      photo_tag_sequence photo_tag_;
      list_optional list_;
    };

    class update_decodeIDs_response: public ::xml_schema::type
    {
      public:
      // id_map
      // 
      typedef ::FacebookCpp::XSD::id_map id_map_type;
      typedef ::xsd::cxx::tree::sequence< id_map_type > id_map_sequence;
      typedef xsd::cxx::tree::sequence< id_map_type >::iterator id_map_iterator;
      typedef xsd::cxx::tree::sequence< id_map_type >::const_iterator id_map_const_iterator;
      typedef ::xsd::cxx::tree::traits< id_map_type, char > id_map_traits;

      const id_map_sequence&
      id_map () const;

      id_map_sequence&
      id_map ();

      void
      id_map (const id_map_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      update_decodeIDs_response ();

      update_decodeIDs_response (const xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      update_decodeIDs_response (const update_decodeIDs_response& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual update_decodeIDs_response*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~update_decodeIDs_response ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      id_map_sequence id_map_;
      list_optional list_;
    };

    class users_getInfo_response: public ::xml_schema::type
    {
      public:
      // user
      // 
      typedef ::FacebookCpp::XSD::user user_type;
      typedef ::xsd::cxx::tree::sequence< user_type > user_sequence;
      typedef xsd::cxx::tree::sequence< user_type >::iterator user_iterator;
      typedef xsd::cxx::tree::sequence< user_type >::const_iterator user_const_iterator;
      typedef ::xsd::cxx::tree::traits< user_type, char > user_traits;

      const user_sequence&
      user () const;

      user_sequence&
      user ();

      void
      user (const user_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      users_getInfo_response ();

      users_getInfo_response (const xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      users_getInfo_response (const users_getInfo_response& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual users_getInfo_response*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~users_getInfo_response ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      user_sequence user_;
      list_optional list_;
    };

    class pages_getInfo_response: public ::xml_schema::type
    {
      public:
      // page
      // 
      typedef ::FacebookCpp::XSD::page page_type;
      typedef ::xsd::cxx::tree::sequence< page_type > page_sequence;
      typedef xsd::cxx::tree::sequence< page_type >::iterator page_iterator;
      typedef xsd::cxx::tree::sequence< page_type >::const_iterator page_const_iterator;
      typedef ::xsd::cxx::tree::traits< page_type, char > page_traits;

      const page_sequence&
      page () const;

      page_sequence&
      page ();

      void
      page (const page_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      pages_getInfo_response ();

      pages_getInfo_response (const xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      pages_getInfo_response (const pages_getInfo_response& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual pages_getInfo_response*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~pages_getInfo_response ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      page_sequence page_;
      list_optional list_;
    };

    class data_getUserPreferences_response: public ::xml_schema::type
    {
      public:
      // preference
      // 
      typedef ::FacebookCpp::XSD::preference preference_type;
      typedef ::xsd::cxx::tree::sequence< preference_type > preference_sequence;
      typedef xsd::cxx::tree::sequence< preference_type >::iterator preference_iterator;
      typedef xsd::cxx::tree::sequence< preference_type >::const_iterator preference_const_iterator;
      typedef ::xsd::cxx::tree::traits< preference_type, char > preference_traits;

      const preference_sequence&
      preference () const;

      preference_sequence&
      preference ();

      void
      preference (const preference_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      data_getUserPreferences_response ();

      data_getUserPreferences_response (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      data_getUserPreferences_response (const data_getUserPreferences_response& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual data_getUserPreferences_response*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~data_getUserPreferences_response ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      preference_sequence preference_;
      list_optional list_;
    };

    class data_getObjectTypes_response: public ::xml_schema::type
    {
      public:
      // object_type_info
      // 
      typedef ::FacebookCpp::XSD::object_type_info object_type_info_type;
      typedef ::xsd::cxx::tree::sequence< object_type_info_type > object_type_info_sequence;
      typedef xsd::cxx::tree::sequence< object_type_info_type >::iterator object_type_info_iterator;
      typedef xsd::cxx::tree::sequence< object_type_info_type >::const_iterator object_type_info_const_iterator;
      typedef ::xsd::cxx::tree::traits< object_type_info_type, char > object_type_info_traits;

      const object_type_info_sequence&
      object_type_info () const;

      object_type_info_sequence&
      object_type_info ();

      void
      object_type_info (const object_type_info_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      data_getObjectTypes_response ();

      data_getObjectTypes_response (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      data_getObjectTypes_response (const data_getObjectTypes_response& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual data_getObjectTypes_response*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~data_getObjectTypes_response ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      object_type_info_sequence object_type_info_;
      list_optional list_;
    };

    class data_getObjectType_response: public ::xml_schema::type
    {
      public:
      // object_property_info
      // 
      typedef ::FacebookCpp::XSD::object_property_info object_property_info_type;
      typedef ::xsd::cxx::tree::sequence< object_property_info_type > object_property_info_sequence;
      typedef xsd::cxx::tree::sequence< object_property_info_type >::iterator object_property_info_iterator;
      typedef xsd::cxx::tree::sequence< object_property_info_type >::const_iterator object_property_info_const_iterator;
      typedef ::xsd::cxx::tree::traits< object_property_info_type, char > object_property_info_traits;

      const object_property_info_sequence&
      object_property_info () const;

      object_property_info_sequence&
      object_property_info ();

      void
      object_property_info (const object_property_info_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      data_getObjectType_response ();

      data_getObjectType_response (const xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      data_getObjectType_response (const data_getObjectType_response& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual data_getObjectType_response*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~data_getObjectType_response ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      object_property_info_sequence object_property_info_;
      list_optional list_;
    };

    class data_getObjects_response: public ::xml_schema::type
    {
      public:
      // data_getObjects_response_elt
      // 
      typedef ::FacebookCpp::XSD::container data_getObjects_response_elt_type;
      typedef ::xsd::cxx::tree::sequence< data_getObjects_response_elt_type > data_getObjects_response_elt_sequence;
      typedef xsd::cxx::tree::sequence< data_getObjects_response_elt_type >::iterator data_getObjects_response_elt_iterator;
      typedef xsd::cxx::tree::sequence< data_getObjects_response_elt_type >::const_iterator data_getObjects_response_elt_const_iterator;
      typedef ::xsd::cxx::tree::traits< data_getObjects_response_elt_type, char > data_getObjects_response_elt_traits;

      const data_getObjects_response_elt_sequence&
      data_getObjects_response_elt () const;

      data_getObjects_response_elt_sequence&
      data_getObjects_response_elt ();

      void
      data_getObjects_response_elt (const data_getObjects_response_elt_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      data_getObjects_response ();

      data_getObjects_response (const xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      data_getObjects_response (const data_getObjects_response& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual data_getObjects_response*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~data_getObjects_response ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      data_getObjects_response_elt_sequence data_getObjects_response_elt_;
      list_optional list_;
    };

    class data_getAssociationDefinitions_response: public ::xml_schema::type
    {
      public:
      // object_assoc_info
      // 
      typedef ::FacebookCpp::XSD::object_assoc_info object_assoc_info_type;
      typedef ::xsd::cxx::tree::sequence< object_assoc_info_type > object_assoc_info_sequence;
      typedef xsd::cxx::tree::sequence< object_assoc_info_type >::iterator object_assoc_info_iterator;
      typedef xsd::cxx::tree::sequence< object_assoc_info_type >::const_iterator object_assoc_info_const_iterator;
      typedef ::xsd::cxx::tree::traits< object_assoc_info_type, char > object_assoc_info_traits;

      const object_assoc_info_sequence&
      object_assoc_info () const;

      object_assoc_info_sequence&
      object_assoc_info ();

      void
      object_assoc_info (const object_assoc_info_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      data_getAssociationDefinitions_response ();

      data_getAssociationDefinitions_response (const xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      data_getAssociationDefinitions_response (const data_getAssociationDefinitions_response& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      virtual data_getAssociationDefinitions_response*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~data_getAssociationDefinitions_response ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      object_assoc_info_sequence object_assoc_info_;
      list_optional list_;
    };

    class data_getAssociatedObjects_response: public ::xml_schema::type
    {
      public:
      // object_association
      // 
      typedef ::FacebookCpp::XSD::object_association object_association_type;
      typedef ::xsd::cxx::tree::sequence< object_association_type > object_association_sequence;
      typedef xsd::cxx::tree::sequence< object_association_type >::iterator object_association_iterator;
      typedef xsd::cxx::tree::sequence< object_association_type >::const_iterator object_association_const_iterator;
      typedef ::xsd::cxx::tree::traits< object_association_type, char > object_association_traits;

      const object_association_sequence&
      object_association () const;

      object_association_sequence&
      object_association ();

      void
      object_association (const object_association_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      data_getAssociatedObjects_response ();

      data_getAssociatedObjects_response (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      data_getAssociatedObjects_response (const data_getAssociatedObjects_response& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual data_getAssociatedObjects_response*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~data_getAssociatedObjects_response ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      object_association_sequence object_association_;
      list_optional list_;
    };

    class data_getAssociatedObjectCounts_response: public ::xml_schema::type
    {
      public:
      // data_getAssociatedObjectCounts_response_elt
      // 
      typedef ::xml_schema::int_ data_getAssociatedObjectCounts_response_elt_type;
      typedef ::xsd::cxx::tree::sequence< data_getAssociatedObjectCounts_response_elt_type > data_getAssociatedObjectCounts_response_elt_sequence;
      typedef xsd::cxx::tree::sequence< data_getAssociatedObjectCounts_response_elt_type >::iterator data_getAssociatedObjectCounts_response_elt_iterator;
      typedef xsd::cxx::tree::sequence< data_getAssociatedObjectCounts_response_elt_type >::const_iterator data_getAssociatedObjectCounts_response_elt_const_iterator;
      typedef ::xsd::cxx::tree::traits< data_getAssociatedObjectCounts_response_elt_type, char > data_getAssociatedObjectCounts_response_elt_traits;

      const data_getAssociatedObjectCounts_response_elt_sequence&
      data_getAssociatedObjectCounts_response_elt () const;

      data_getAssociatedObjectCounts_response_elt_sequence&
      data_getAssociatedObjectCounts_response_elt ();

      void
      data_getAssociatedObjectCounts_response_elt (const data_getAssociatedObjectCounts_response_elt_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      data_getAssociatedObjectCounts_response ();

      data_getAssociatedObjectCounts_response (const xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      data_getAssociatedObjectCounts_response (const data_getAssociatedObjectCounts_response& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      virtual data_getAssociatedObjectCounts_response*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~data_getAssociatedObjectCounts_response ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      data_getAssociatedObjectCounts_response_elt_sequence data_getAssociatedObjectCounts_response_elt_;
      list_optional list_;
    };

    class data_getAssociations_response: public ::xml_schema::type
    {
      public:
      // object_association
      // 
      typedef ::FacebookCpp::XSD::object_association object_association_type;
      typedef ::xsd::cxx::tree::sequence< object_association_type > object_association_sequence;
      typedef xsd::cxx::tree::sequence< object_association_type >::iterator object_association_iterator;
      typedef xsd::cxx::tree::sequence< object_association_type >::const_iterator object_association_const_iterator;
      typedef ::xsd::cxx::tree::traits< object_association_type, char > object_association_traits;

      const object_association_sequence&
      object_association () const;

      object_association_sequence&
      object_association ();

      void
      object_association (const object_association_sequence& s);

      // list
      // 
      typedef ::xml_schema::boolean list_type;
      typedef ::xsd::cxx::tree::optional< list_type > list_optional;
      typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

      const list_optional&
      list () const;

      list_optional&
      list ();

      void
      list (const list_type& x);

      void
      list (const list_optional& x);

      // Constructors.
      //
      data_getAssociations_response ();

      data_getAssociations_response (const xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      data_getAssociations_response (const data_getAssociations_response& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual data_getAssociations_response*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~data_getAssociations_response ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      object_association_sequence object_association_;
      list_optional list_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace FacebookCpp
{
  namespace XSD
  {
    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::auth_token >
    auth_createToken_response (const ::std::string& uri,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::auth_token >
    auth_createToken_response (const ::std::string& uri,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::auth_token >
    auth_createToken_response (const ::std::string& uri,
                               xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::auth_token >
    auth_createToken_response (::std::istream& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::auth_token >
    auth_createToken_response (::std::istream& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::auth_token >
    auth_createToken_response (::std::istream& is,
                               xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::auth_token >
    auth_createToken_response (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::auth_token >
    auth_createToken_response (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::auth_token >
    auth_createToken_response (::std::istream& is,
                               const ::std::string& id,
                               xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::auth_token >
    auth_createToken_response (xercesc::InputSource& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::auth_token >
    auth_createToken_response (xercesc::InputSource& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::auth_token >
    auth_createToken_response (xercesc::InputSource& is,
                               xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::auth_token >
    auth_createToken_response (const xercesc::DOMDocument& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::auth_token >
    auth_createToken_response (xercesc::DOMDocument* d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::session_info >
    auth_getSession_response (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::session_info >
    auth_getSession_response (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::session_info >
    auth_getSession_response (const ::std::string& uri,
                              xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::session_info >
    auth_getSession_response (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::session_info >
    auth_getSession_response (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::session_info >
    auth_getSession_response (::std::istream& is,
                              xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::session_info >
    auth_getSession_response (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::session_info >
    auth_getSession_response (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::session_info >
    auth_getSession_response (::std::istream& is,
                              const ::std::string& id,
                              xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::session_info >
    auth_getSession_response (xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::session_info >
    auth_getSession_response (xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::session_info >
    auth_getSession_response (xercesc::InputSource& is,
                              xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::session_info >
    auth_getSession_response (const xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::session_info >
    auth_getSession_response (xercesc::DOMDocument* d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::events_get_response >
    events_get_response_ (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::events_get_response >
    events_get_response_ (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::events_get_response >
    events_get_response_ (const ::std::string& uri,
                          xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::events_get_response >
    events_get_response_ (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::events_get_response >
    events_get_response_ (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::events_get_response >
    events_get_response_ (::std::istream& is,
                          xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::events_get_response >
    events_get_response_ (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::events_get_response >
    events_get_response_ (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::events_get_response >
    events_get_response_ (::std::istream& is,
                          const ::std::string& id,
                          xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::events_get_response >
    events_get_response_ (xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::events_get_response >
    events_get_response_ (xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::events_get_response >
    events_get_response_ (xercesc::InputSource& is,
                          xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::events_get_response >
    events_get_response_ (const xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::events_get_response >
    events_get_response_ (xercesc::DOMDocument* d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::event_members >
    events_getMembers_response (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::event_members >
    events_getMembers_response (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::event_members >
    events_getMembers_response (const ::std::string& uri,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::event_members >
    events_getMembers_response (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::event_members >
    events_getMembers_response (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::event_members >
    events_getMembers_response (::std::istream& is,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::event_members >
    events_getMembers_response (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::event_members >
    events_getMembers_response (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::event_members >
    events_getMembers_response (::std::istream& is,
                                const ::std::string& id,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::event_members >
    events_getMembers_response (xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::event_members >
    events_getMembers_response (xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::event_members >
    events_getMembers_response (xercesc::InputSource& is,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::event_members >
    events_getMembers_response (const xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::event_members >
    events_getMembers_response (xercesc::DOMDocument* d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_setRefHandle_response (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_setRefHandle_response (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_setRefHandle_response (const ::std::string& uri,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_setRefHandle_response (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_setRefHandle_response (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_setRefHandle_response (::std::istream& is,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_setRefHandle_response (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_setRefHandle_response (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_setRefHandle_response (::std::istream& is,
                                const ::std::string& id,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_setRefHandle_response (xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_setRefHandle_response (xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_setRefHandle_response (xercesc::InputSource& is,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_setRefHandle_response (const xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_setRefHandle_response (xercesc::DOMDocument* d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_refreshRefUrl_response (const ::std::string& uri,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_refreshRefUrl_response (const ::std::string& uri,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_refreshRefUrl_response (const ::std::string& uri,
                                 xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_refreshRefUrl_response (::std::istream& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_refreshRefUrl_response (::std::istream& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_refreshRefUrl_response (::std::istream& is,
                                 xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_refreshRefUrl_response (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_refreshRefUrl_response (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_refreshRefUrl_response (::std::istream& is,
                                 const ::std::string& id,
                                 xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_refreshRefUrl_response (xercesc::InputSource& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_refreshRefUrl_response (xercesc::InputSource& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_refreshRefUrl_response (xercesc::InputSource& is,
                                 xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_refreshRefUrl_response (const xercesc::DOMDocument& d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_refreshRefUrl_response (xercesc::DOMDocument* d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_refreshImgSrc_response (const ::std::string& uri,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_refreshImgSrc_response (const ::std::string& uri,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_refreshImgSrc_response (const ::std::string& uri,
                                 xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_refreshImgSrc_response (::std::istream& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_refreshImgSrc_response (::std::istream& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_refreshImgSrc_response (::std::istream& is,
                                 xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_refreshImgSrc_response (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_refreshImgSrc_response (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_refreshImgSrc_response (::std::istream& is,
                                 const ::std::string& id,
                                 xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_refreshImgSrc_response (xercesc::InputSource& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_refreshImgSrc_response (xercesc::InputSource& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_refreshImgSrc_response (xercesc::InputSource& is,
                                 xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_refreshImgSrc_response (const xercesc::DOMDocument& d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_refreshImgSrc_response (xercesc::DOMDocument* d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_uploadNativeStrings_response (const ::std::string& uri,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_uploadNativeStrings_response (const ::std::string& uri,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_uploadNativeStrings_response (const ::std::string& uri,
                                       xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_uploadNativeStrings_response (::std::istream& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_uploadNativeStrings_response (::std::istream& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_uploadNativeStrings_response (::std::istream& is,
                                       xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_uploadNativeStrings_response (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_uploadNativeStrings_response (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_uploadNativeStrings_response (::std::istream& is,
                                       const ::std::string& id,
                                       xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_uploadNativeStrings_response (xercesc::InputSource& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_uploadNativeStrings_response (xercesc::InputSource& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_uploadNativeStrings_response (xercesc::InputSource& is,
                                       xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_uploadNativeStrings_response (const xercesc::DOMDocument& d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    fbml_uploadNativeStrings_response (xercesc::DOMDocument* d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    feed_publishStoryToUser_response (const ::std::string& uri,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    feed_publishStoryToUser_response (const ::std::string& uri,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    feed_publishStoryToUser_response (const ::std::string& uri,
                                      xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    feed_publishStoryToUser_response (::std::istream& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    feed_publishStoryToUser_response (::std::istream& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    feed_publishStoryToUser_response (::std::istream& is,
                                      xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    feed_publishStoryToUser_response (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    feed_publishStoryToUser_response (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    feed_publishStoryToUser_response (::std::istream& is,
                                      const ::std::string& id,
                                      xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    feed_publishStoryToUser_response (xercesc::InputSource& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    feed_publishStoryToUser_response (xercesc::InputSource& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    feed_publishStoryToUser_response (xercesc::InputSource& is,
                                      xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    feed_publishStoryToUser_response (const xercesc::DOMDocument& d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    feed_publishStoryToUser_response (xercesc::DOMDocument* d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    feed_publishActionOfUser_response (const ::std::string& uri,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    feed_publishActionOfUser_response (const ::std::string& uri,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    feed_publishActionOfUser_response (const ::std::string& uri,
                                       xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    feed_publishActionOfUser_response (::std::istream& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    feed_publishActionOfUser_response (::std::istream& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    feed_publishActionOfUser_response (::std::istream& is,
                                       xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    feed_publishActionOfUser_response (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    feed_publishActionOfUser_response (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    feed_publishActionOfUser_response (::std::istream& is,
                                       const ::std::string& id,
                                       xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    feed_publishActionOfUser_response (xercesc::InputSource& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    feed_publishActionOfUser_response (xercesc::InputSource& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    feed_publishActionOfUser_response (xercesc::InputSource& is,
                                       xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    feed_publishActionOfUser_response (const xercesc::DOMDocument& d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    feed_publishActionOfUser_response (xercesc::DOMDocument* d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_areFriends_response >
    friends_areFriends_response_ (const ::std::string& uri,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_areFriends_response >
    friends_areFriends_response_ (const ::std::string& uri,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_areFriends_response >
    friends_areFriends_response_ (const ::std::string& uri,
                                  xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_areFriends_response >
    friends_areFriends_response_ (::std::istream& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_areFriends_response >
    friends_areFriends_response_ (::std::istream& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_areFriends_response >
    friends_areFriends_response_ (::std::istream& is,
                                  xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_areFriends_response >
    friends_areFriends_response_ (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_areFriends_response >
    friends_areFriends_response_ (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_areFriends_response >
    friends_areFriends_response_ (::std::istream& is,
                                  const ::std::string& id,
                                  xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_areFriends_response >
    friends_areFriends_response_ (xercesc::InputSource& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_areFriends_response >
    friends_areFriends_response_ (xercesc::InputSource& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_areFriends_response >
    friends_areFriends_response_ (xercesc::InputSource& is,
                                  xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_areFriends_response >
    friends_areFriends_response_ (const xercesc::DOMDocument& d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_areFriends_response >
    friends_areFriends_response_ (xercesc::DOMDocument* d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_get_response >
    friends_get_response_ (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_get_response >
    friends_get_response_ (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_get_response >
    friends_get_response_ (const ::std::string& uri,
                           xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_get_response >
    friends_get_response_ (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_get_response >
    friends_get_response_ (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_get_response >
    friends_get_response_ (::std::istream& is,
                           xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_get_response >
    friends_get_response_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_get_response >
    friends_get_response_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_get_response >
    friends_get_response_ (::std::istream& is,
                           const ::std::string& id,
                           xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_get_response >
    friends_get_response_ (xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_get_response >
    friends_get_response_ (xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_get_response >
    friends_get_response_ (xercesc::InputSource& is,
                           xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_get_response >
    friends_get_response_ (const xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_get_response >
    friends_get_response_ (xercesc::DOMDocument* d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_getAppUsers_response >
    friends_getAppUsers_response_ (const ::std::string& uri,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_getAppUsers_response >
    friends_getAppUsers_response_ (const ::std::string& uri,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_getAppUsers_response >
    friends_getAppUsers_response_ (const ::std::string& uri,
                                   xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_getAppUsers_response >
    friends_getAppUsers_response_ (::std::istream& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_getAppUsers_response >
    friends_getAppUsers_response_ (::std::istream& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_getAppUsers_response >
    friends_getAppUsers_response_ (::std::istream& is,
                                   xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_getAppUsers_response >
    friends_getAppUsers_response_ (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_getAppUsers_response >
    friends_getAppUsers_response_ (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_getAppUsers_response >
    friends_getAppUsers_response_ (::std::istream& is,
                                   const ::std::string& id,
                                   xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_getAppUsers_response >
    friends_getAppUsers_response_ (xercesc::InputSource& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_getAppUsers_response >
    friends_getAppUsers_response_ (xercesc::InputSource& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_getAppUsers_response >
    friends_getAppUsers_response_ (xercesc::InputSource& is,
                                   xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_getAppUsers_response >
    friends_getAppUsers_response_ (const xercesc::DOMDocument& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_getAppUsers_response >
    friends_getAppUsers_response_ (xercesc::DOMDocument* d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_getLists_response >
    friends_getLists_response_ (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_getLists_response >
    friends_getLists_response_ (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_getLists_response >
    friends_getLists_response_ (const ::std::string& uri,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_getLists_response >
    friends_getLists_response_ (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_getLists_response >
    friends_getLists_response_ (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_getLists_response >
    friends_getLists_response_ (::std::istream& is,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_getLists_response >
    friends_getLists_response_ (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_getLists_response >
    friends_getLists_response_ (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_getLists_response >
    friends_getLists_response_ (::std::istream& is,
                                const ::std::string& id,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_getLists_response >
    friends_getLists_response_ (xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_getLists_response >
    friends_getLists_response_ (xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_getLists_response >
    friends_getLists_response_ (xercesc::InputSource& is,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_getLists_response >
    friends_getLists_response_ (const xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::friends_getLists_response >
    friends_getLists_response_ (xercesc::DOMDocument* d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::groups_get_response >
    groups_get_response_ (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::groups_get_response >
    groups_get_response_ (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::groups_get_response >
    groups_get_response_ (const ::std::string& uri,
                          xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::groups_get_response >
    groups_get_response_ (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::groups_get_response >
    groups_get_response_ (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::groups_get_response >
    groups_get_response_ (::std::istream& is,
                          xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::groups_get_response >
    groups_get_response_ (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::groups_get_response >
    groups_get_response_ (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::groups_get_response >
    groups_get_response_ (::std::istream& is,
                          const ::std::string& id,
                          xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::groups_get_response >
    groups_get_response_ (xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::groups_get_response >
    groups_get_response_ (xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::groups_get_response >
    groups_get_response_ (xercesc::InputSource& is,
                          xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::groups_get_response >
    groups_get_response_ (const xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::groups_get_response >
    groups_get_response_ (xercesc::DOMDocument* d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::group_members >
    groups_getMembers_response (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::group_members >
    groups_getMembers_response (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::group_members >
    groups_getMembers_response (const ::std::string& uri,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::group_members >
    groups_getMembers_response (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::group_members >
    groups_getMembers_response (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::group_members >
    groups_getMembers_response (::std::istream& is,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::group_members >
    groups_getMembers_response (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::group_members >
    groups_getMembers_response (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::group_members >
    groups_getMembers_response (::std::istream& is,
                                const ::std::string& id,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::group_members >
    groups_getMembers_response (xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::group_members >
    groups_getMembers_response (xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::group_members >
    groups_getMembers_response (xercesc::InputSource& is,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::group_members >
    groups_getMembers_response (const xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::group_members >
    groups_getMembers_response (xercesc::DOMDocument* d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getCookies_response >
    data_getCookies_response_ (const ::std::string& uri,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getCookies_response >
    data_getCookies_response_ (const ::std::string& uri,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getCookies_response >
    data_getCookies_response_ (const ::std::string& uri,
                               xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getCookies_response >
    data_getCookies_response_ (::std::istream& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getCookies_response >
    data_getCookies_response_ (::std::istream& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getCookies_response >
    data_getCookies_response_ (::std::istream& is,
                               xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getCookies_response >
    data_getCookies_response_ (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getCookies_response >
    data_getCookies_response_ (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getCookies_response >
    data_getCookies_response_ (::std::istream& is,
                               const ::std::string& id,
                               xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getCookies_response >
    data_getCookies_response_ (xercesc::InputSource& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getCookies_response >
    data_getCookies_response_ (xercesc::InputSource& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getCookies_response >
    data_getCookies_response_ (xercesc::InputSource& is,
                               xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getCookies_response >
    data_getCookies_response_ (const xercesc::DOMDocument& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getCookies_response >
    data_getCookies_response_ (xercesc::DOMDocument* d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setCookie_response (const ::std::string& uri,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setCookie_response (const ::std::string& uri,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setCookie_response (const ::std::string& uri,
                             xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setCookie_response (::std::istream& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setCookie_response (::std::istream& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setCookie_response (::std::istream& is,
                             xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setCookie_response (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setCookie_response (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setCookie_response (::std::istream& is,
                             const ::std::string& id,
                             xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setCookie_response (xercesc::InputSource& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setCookie_response (xercesc::InputSource& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setCookie_response (xercesc::InputSource& is,
                             xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setCookie_response (const xercesc::DOMDocument& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setCookie_response (xercesc::DOMDocument* d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getCategories_response >
    marketplace_getCategories_response_ (const ::std::string& uri,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getCategories_response >
    marketplace_getCategories_response_ (const ::std::string& uri,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getCategories_response >
    marketplace_getCategories_response_ (const ::std::string& uri,
                                         xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getCategories_response >
    marketplace_getCategories_response_ (::std::istream& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getCategories_response >
    marketplace_getCategories_response_ (::std::istream& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getCategories_response >
    marketplace_getCategories_response_ (::std::istream& is,
                                         xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getCategories_response >
    marketplace_getCategories_response_ (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getCategories_response >
    marketplace_getCategories_response_ (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getCategories_response >
    marketplace_getCategories_response_ (::std::istream& is,
                                         const ::std::string& id,
                                         xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getCategories_response >
    marketplace_getCategories_response_ (xercesc::InputSource& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getCategories_response >
    marketplace_getCategories_response_ (xercesc::InputSource& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getCategories_response >
    marketplace_getCategories_response_ (xercesc::InputSource& is,
                                         xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getCategories_response >
    marketplace_getCategories_response_ (const xercesc::DOMDocument& d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getCategories_response >
    marketplace_getCategories_response_ (xercesc::DOMDocument* d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getSubCategories_response >
    marketplace_getSubCategories_response_ (const ::std::string& uri,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getSubCategories_response >
    marketplace_getSubCategories_response_ (const ::std::string& uri,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getSubCategories_response >
    marketplace_getSubCategories_response_ (const ::std::string& uri,
                                            xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getSubCategories_response >
    marketplace_getSubCategories_response_ (::std::istream& is,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getSubCategories_response >
    marketplace_getSubCategories_response_ (::std::istream& is,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getSubCategories_response >
    marketplace_getSubCategories_response_ (::std::istream& is,
                                            xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getSubCategories_response >
    marketplace_getSubCategories_response_ (::std::istream& is,
                                            const ::std::string& id,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getSubCategories_response >
    marketplace_getSubCategories_response_ (::std::istream& is,
                                            const ::std::string& id,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getSubCategories_response >
    marketplace_getSubCategories_response_ (::std::istream& is,
                                            const ::std::string& id,
                                            xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getSubCategories_response >
    marketplace_getSubCategories_response_ (xercesc::InputSource& is,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getSubCategories_response >
    marketplace_getSubCategories_response_ (xercesc::InputSource& is,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getSubCategories_response >
    marketplace_getSubCategories_response_ (xercesc::InputSource& is,
                                            xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getSubCategories_response >
    marketplace_getSubCategories_response_ (const xercesc::DOMDocument& d,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getSubCategories_response >
    marketplace_getSubCategories_response_ (xercesc::DOMDocument* d,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getListings_response >
    marketplace_getListings_response_ (const ::std::string& uri,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getListings_response >
    marketplace_getListings_response_ (const ::std::string& uri,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getListings_response >
    marketplace_getListings_response_ (const ::std::string& uri,
                                       xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getListings_response >
    marketplace_getListings_response_ (::std::istream& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getListings_response >
    marketplace_getListings_response_ (::std::istream& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getListings_response >
    marketplace_getListings_response_ (::std::istream& is,
                                       xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getListings_response >
    marketplace_getListings_response_ (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getListings_response >
    marketplace_getListings_response_ (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getListings_response >
    marketplace_getListings_response_ (::std::istream& is,
                                       const ::std::string& id,
                                       xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getListings_response >
    marketplace_getListings_response_ (xercesc::InputSource& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getListings_response >
    marketplace_getListings_response_ (xercesc::InputSource& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getListings_response >
    marketplace_getListings_response_ (xercesc::InputSource& is,
                                       xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getListings_response >
    marketplace_getListings_response_ (const xercesc::DOMDocument& d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_getListings_response >
    marketplace_getListings_response_ (xercesc::DOMDocument* d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_search_response >
    marketplace_search_response_ (const ::std::string& uri,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_search_response >
    marketplace_search_response_ (const ::std::string& uri,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_search_response >
    marketplace_search_response_ (const ::std::string& uri,
                                  xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_search_response >
    marketplace_search_response_ (::std::istream& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_search_response >
    marketplace_search_response_ (::std::istream& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_search_response >
    marketplace_search_response_ (::std::istream& is,
                                  xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_search_response >
    marketplace_search_response_ (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_search_response >
    marketplace_search_response_ (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_search_response >
    marketplace_search_response_ (::std::istream& is,
                                  const ::std::string& id,
                                  xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_search_response >
    marketplace_search_response_ (xercesc::InputSource& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_search_response >
    marketplace_search_response_ (xercesc::InputSource& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_search_response >
    marketplace_search_response_ (xercesc::InputSource& is,
                                  xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_search_response >
    marketplace_search_response_ (const xercesc::DOMDocument& d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::marketplace_search_response >
    marketplace_search_response_ (xercesc::DOMDocument* d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::lid >
    marketplace_createListing_response (const ::std::string& uri,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::lid >
    marketplace_createListing_response (const ::std::string& uri,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::lid >
    marketplace_createListing_response (const ::std::string& uri,
                                        xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::lid >
    marketplace_createListing_response (::std::istream& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::lid >
    marketplace_createListing_response (::std::istream& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::lid >
    marketplace_createListing_response (::std::istream& is,
                                        xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::lid >
    marketplace_createListing_response (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::lid >
    marketplace_createListing_response (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::lid >
    marketplace_createListing_response (::std::istream& is,
                                        const ::std::string& id,
                                        xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::lid >
    marketplace_createListing_response (xercesc::InputSource& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::lid >
    marketplace_createListing_response (xercesc::InputSource& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::lid >
    marketplace_createListing_response (xercesc::InputSource& is,
                                        xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::lid >
    marketplace_createListing_response (const xercesc::DOMDocument& d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::lid >
    marketplace_createListing_response (xercesc::DOMDocument* d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    marketplace_removeListing_response (const ::std::string& uri,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    marketplace_removeListing_response (const ::std::string& uri,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    marketplace_removeListing_response (const ::std::string& uri,
                                        xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    marketplace_removeListing_response (::std::istream& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    marketplace_removeListing_response (::std::istream& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    marketplace_removeListing_response (::std::istream& is,
                                        xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    marketplace_removeListing_response (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    marketplace_removeListing_response (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    marketplace_removeListing_response (::std::istream& is,
                                        const ::std::string& id,
                                        xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    marketplace_removeListing_response (xercesc::InputSource& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    marketplace_removeListing_response (xercesc::InputSource& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    marketplace_removeListing_response (xercesc::InputSource& is,
                                        xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    marketplace_removeListing_response (const xercesc::DOMDocument& d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    marketplace_removeListing_response (xercesc::DOMDocument* d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::notifications >
    notifications_get_response (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::notifications >
    notifications_get_response (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::notifications >
    notifications_get_response (const ::std::string& uri,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::notifications >
    notifications_get_response (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::notifications >
    notifications_get_response (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::notifications >
    notifications_get_response (::std::istream& is,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::notifications >
    notifications_get_response (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::notifications >
    notifications_get_response (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::notifications >
    notifications_get_response (::std::istream& is,
                                const ::std::string& id,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::notifications >
    notifications_get_response (xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::notifications >
    notifications_get_response (xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::notifications >
    notifications_get_response (xercesc::InputSource& is,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::notifications >
    notifications_get_response (const xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::notifications >
    notifications_get_response (xercesc::DOMDocument* d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::string >
    notifications_send_response (const ::std::string& uri,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    notifications_send_response (const ::std::string& uri,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    notifications_send_response (const ::std::string& uri,
                                 xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::string >
    notifications_send_response (::std::istream& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    notifications_send_response (::std::istream& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    notifications_send_response (::std::istream& is,
                                 xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    notifications_send_response (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    notifications_send_response (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    notifications_send_response (::std::istream& is,
                                 const ::std::string& id,
                                 xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::string >
    notifications_send_response (xercesc::InputSource& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    notifications_send_response (xercesc::InputSource& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    notifications_send_response (xercesc::InputSource& is,
                                 xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::string >
    notifications_send_response (const xercesc::DOMDocument& d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    notifications_send_response (xercesc::DOMDocument* d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::uid_list >
    notifications_sendEmail_response (const ::std::string& uri,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::uid_list >
    notifications_sendEmail_response (const ::std::string& uri,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::uid_list >
    notifications_sendEmail_response (const ::std::string& uri,
                                      xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::uid_list >
    notifications_sendEmail_response (::std::istream& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::uid_list >
    notifications_sendEmail_response (::std::istream& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::uid_list >
    notifications_sendEmail_response (::std::istream& is,
                                      xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::uid_list >
    notifications_sendEmail_response (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::uid_list >
    notifications_sendEmail_response (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::uid_list >
    notifications_sendEmail_response (::std::istream& is,
                                      const ::std::string& id,
                                      xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::uid_list >
    notifications_sendEmail_response (xercesc::InputSource& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::uid_list >
    notifications_sendEmail_response (xercesc::InputSource& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::uid_list >
    notifications_sendEmail_response (xercesc::InputSource& is,
                                      xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::uid_list >
    notifications_sendEmail_response (const xercesc::DOMDocument& d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::uid_list >
    notifications_sendEmail_response (xercesc::DOMDocument* d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_get_response >
    photos_get_response_ (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_get_response >
    photos_get_response_ (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_get_response >
    photos_get_response_ (const ::std::string& uri,
                          xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_get_response >
    photos_get_response_ (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_get_response >
    photos_get_response_ (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_get_response >
    photos_get_response_ (::std::istream& is,
                          xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_get_response >
    photos_get_response_ (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_get_response >
    photos_get_response_ (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_get_response >
    photos_get_response_ (::std::istream& is,
                          const ::std::string& id,
                          xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_get_response >
    photos_get_response_ (xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_get_response >
    photos_get_response_ (xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_get_response >
    photos_get_response_ (xercesc::InputSource& is,
                          xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_get_response >
    photos_get_response_ (const xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_get_response >
    photos_get_response_ (xercesc::DOMDocument* d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_getAlbums_response >
    photos_getAlbums_response_ (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_getAlbums_response >
    photos_getAlbums_response_ (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_getAlbums_response >
    photos_getAlbums_response_ (const ::std::string& uri,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_getAlbums_response >
    photos_getAlbums_response_ (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_getAlbums_response >
    photos_getAlbums_response_ (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_getAlbums_response >
    photos_getAlbums_response_ (::std::istream& is,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_getAlbums_response >
    photos_getAlbums_response_ (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_getAlbums_response >
    photos_getAlbums_response_ (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_getAlbums_response >
    photos_getAlbums_response_ (::std::istream& is,
                                const ::std::string& id,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_getAlbums_response >
    photos_getAlbums_response_ (xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_getAlbums_response >
    photos_getAlbums_response_ (xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_getAlbums_response >
    photos_getAlbums_response_ (xercesc::InputSource& is,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_getAlbums_response >
    photos_getAlbums_response_ (const xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_getAlbums_response >
    photos_getAlbums_response_ (xercesc::DOMDocument* d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_getTags_response >
    photos_getTags_response_ (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_getTags_response >
    photos_getTags_response_ (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_getTags_response >
    photos_getTags_response_ (const ::std::string& uri,
                              xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_getTags_response >
    photos_getTags_response_ (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_getTags_response >
    photos_getTags_response_ (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_getTags_response >
    photos_getTags_response_ (::std::istream& is,
                              xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_getTags_response >
    photos_getTags_response_ (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_getTags_response >
    photos_getTags_response_ (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_getTags_response >
    photos_getTags_response_ (::std::istream& is,
                              const ::std::string& id,
                              xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_getTags_response >
    photos_getTags_response_ (xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_getTags_response >
    photos_getTags_response_ (xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_getTags_response >
    photos_getTags_response_ (xercesc::InputSource& is,
                              xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_getTags_response >
    photos_getTags_response_ (const xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photos_getTags_response >
    photos_getTags_response_ (xercesc::DOMDocument* d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::album >
    photos_createAlbum_response (const ::std::string& uri,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::album >
    photos_createAlbum_response (const ::std::string& uri,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::album >
    photos_createAlbum_response (const ::std::string& uri,
                                 xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::album >
    photos_createAlbum_response (::std::istream& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::album >
    photos_createAlbum_response (::std::istream& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::album >
    photos_createAlbum_response (::std::istream& is,
                                 xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::album >
    photos_createAlbum_response (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::album >
    photos_createAlbum_response (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::album >
    photos_createAlbum_response (::std::istream& is,
                                 const ::std::string& id,
                                 xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::album >
    photos_createAlbum_response (xercesc::InputSource& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::album >
    photos_createAlbum_response (xercesc::InputSource& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::album >
    photos_createAlbum_response (xercesc::InputSource& is,
                                 xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::album >
    photos_createAlbum_response (const xercesc::DOMDocument& d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::album >
    photos_createAlbum_response (xercesc::DOMDocument* d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::photo >
    photos_upload_response (const ::std::string& uri,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photo >
    photos_upload_response (const ::std::string& uri,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photo >
    photos_upload_response (const ::std::string& uri,
                            xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::photo >
    photos_upload_response (::std::istream& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photo >
    photos_upload_response (::std::istream& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photo >
    photos_upload_response (::std::istream& is,
                            xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photo >
    photos_upload_response (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photo >
    photos_upload_response (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photo >
    photos_upload_response (::std::istream& is,
                            const ::std::string& id,
                            xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::photo >
    photos_upload_response (xercesc::InputSource& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photo >
    photos_upload_response (xercesc::InputSource& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photo >
    photos_upload_response (xercesc::InputSource& is,
                            xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::photo >
    photos_upload_response (const xercesc::DOMDocument& d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::photo >
    photos_upload_response (xercesc::DOMDocument* d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    photos_addTag_response (const ::std::string& uri,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    photos_addTag_response (const ::std::string& uri,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    photos_addTag_response (const ::std::string& uri,
                            xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    photos_addTag_response (::std::istream& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    photos_addTag_response (::std::istream& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    photos_addTag_response (::std::istream& is,
                            xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    photos_addTag_response (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    photos_addTag_response (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    photos_addTag_response (::std::istream& is,
                            const ::std::string& id,
                            xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    photos_addTag_response (xercesc::InputSource& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    photos_addTag_response (xercesc::InputSource& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    photos_addTag_response (xercesc::InputSource& is,
                            xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    photos_addTag_response (const xercesc::DOMDocument& d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    photos_addTag_response (xercesc::DOMDocument* d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    profile_setFBML_response (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    profile_setFBML_response (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    profile_setFBML_response (const ::std::string& uri,
                              xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    profile_setFBML_response (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    profile_setFBML_response (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    profile_setFBML_response (::std::istream& is,
                              xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    profile_setFBML_response (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    profile_setFBML_response (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    profile_setFBML_response (::std::istream& is,
                              const ::std::string& id,
                              xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    profile_setFBML_response (xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    profile_setFBML_response (xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    profile_setFBML_response (xercesc::InputSource& is,
                              xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    profile_setFBML_response (const xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    profile_setFBML_response (xercesc::DOMDocument* d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::string >
    profile_getFBML_response (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    profile_getFBML_response (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    profile_getFBML_response (const ::std::string& uri,
                              xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::string >
    profile_getFBML_response (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    profile_getFBML_response (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    profile_getFBML_response (::std::istream& is,
                              xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    profile_getFBML_response (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    profile_getFBML_response (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    profile_getFBML_response (::std::istream& is,
                              const ::std::string& id,
                              xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::string >
    profile_getFBML_response (xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    profile_getFBML_response (xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    profile_getFBML_response (xercesc::InputSource& is,
                              xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::string >
    profile_getFBML_response (const xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    profile_getFBML_response (xercesc::DOMDocument* d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::update_decodeIDs_response >
    update_decodeIDs_response_ (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::update_decodeIDs_response >
    update_decodeIDs_response_ (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::update_decodeIDs_response >
    update_decodeIDs_response_ (const ::std::string& uri,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::update_decodeIDs_response >
    update_decodeIDs_response_ (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::update_decodeIDs_response >
    update_decodeIDs_response_ (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::update_decodeIDs_response >
    update_decodeIDs_response_ (::std::istream& is,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::update_decodeIDs_response >
    update_decodeIDs_response_ (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::update_decodeIDs_response >
    update_decodeIDs_response_ (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::update_decodeIDs_response >
    update_decodeIDs_response_ (::std::istream& is,
                                const ::std::string& id,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::update_decodeIDs_response >
    update_decodeIDs_response_ (xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::update_decodeIDs_response >
    update_decodeIDs_response_ (xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::update_decodeIDs_response >
    update_decodeIDs_response_ (xercesc::InputSource& is,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::update_decodeIDs_response >
    update_decodeIDs_response_ (const xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::update_decodeIDs_response >
    update_decodeIDs_response_ (xercesc::DOMDocument* d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::users_getInfo_response >
    users_getInfo_response_ (const ::std::string& uri,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::users_getInfo_response >
    users_getInfo_response_ (const ::std::string& uri,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::users_getInfo_response >
    users_getInfo_response_ (const ::std::string& uri,
                             xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::users_getInfo_response >
    users_getInfo_response_ (::std::istream& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::users_getInfo_response >
    users_getInfo_response_ (::std::istream& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::users_getInfo_response >
    users_getInfo_response_ (::std::istream& is,
                             xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::users_getInfo_response >
    users_getInfo_response_ (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::users_getInfo_response >
    users_getInfo_response_ (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::users_getInfo_response >
    users_getInfo_response_ (::std::istream& is,
                             const ::std::string& id,
                             xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::users_getInfo_response >
    users_getInfo_response_ (xercesc::InputSource& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::users_getInfo_response >
    users_getInfo_response_ (xercesc::InputSource& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::users_getInfo_response >
    users_getInfo_response_ (xercesc::InputSource& is,
                             xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::users_getInfo_response >
    users_getInfo_response_ (const xercesc::DOMDocument& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::users_getInfo_response >
    users_getInfo_response_ (xercesc::DOMDocument* d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    users_isAppAdded_response (const ::std::string& uri,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    users_isAppAdded_response (const ::std::string& uri,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    users_isAppAdded_response (const ::std::string& uri,
                               xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    users_isAppAdded_response (::std::istream& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    users_isAppAdded_response (::std::istream& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    users_isAppAdded_response (::std::istream& is,
                               xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    users_isAppAdded_response (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    users_isAppAdded_response (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    users_isAppAdded_response (::std::istream& is,
                               const ::std::string& id,
                               xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    users_isAppAdded_response (xercesc::InputSource& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    users_isAppAdded_response (xercesc::InputSource& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    users_isAppAdded_response (xercesc::InputSource& is,
                               xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    users_isAppAdded_response (const xercesc::DOMDocument& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    users_isAppAdded_response (xercesc::DOMDocument* d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    users_hasAppPermission_response (const ::std::string& uri,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    users_hasAppPermission_response (const ::std::string& uri,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    users_hasAppPermission_response (const ::std::string& uri,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    users_hasAppPermission_response (::std::istream& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    users_hasAppPermission_response (::std::istream& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    users_hasAppPermission_response (::std::istream& is,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    users_hasAppPermission_response (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    users_hasAppPermission_response (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    users_hasAppPermission_response (::std::istream& is,
                                     const ::std::string& id,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    users_hasAppPermission_response (xercesc::InputSource& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    users_hasAppPermission_response (xercesc::InputSource& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    users_hasAppPermission_response (xercesc::InputSource& is,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    users_hasAppPermission_response (const xercesc::DOMDocument& d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    users_hasAppPermission_response (xercesc::DOMDocument* d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::uid >
    users_getLoggedInUser_response (const ::std::string& uri,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::uid >
    users_getLoggedInUser_response (const ::std::string& uri,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::uid >
    users_getLoggedInUser_response (const ::std::string& uri,
                                    xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::uid >
    users_getLoggedInUser_response (::std::istream& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::uid >
    users_getLoggedInUser_response (::std::istream& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::uid >
    users_getLoggedInUser_response (::std::istream& is,
                                    xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::uid >
    users_getLoggedInUser_response (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::uid >
    users_getLoggedInUser_response (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::uid >
    users_getLoggedInUser_response (::std::istream& is,
                                    const ::std::string& id,
                                    xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::uid >
    users_getLoggedInUser_response (xercesc::InputSource& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::uid >
    users_getLoggedInUser_response (xercesc::InputSource& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::uid >
    users_getLoggedInUser_response (xercesc::InputSource& is,
                                    xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::uid >
    users_getLoggedInUser_response (const xercesc::DOMDocument& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::uid >
    users_getLoggedInUser_response (xercesc::DOMDocument* d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    users_setStatus_response (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    users_setStatus_response (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    users_setStatus_response (const ::std::string& uri,
                              xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    users_setStatus_response (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    users_setStatus_response (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    users_setStatus_response (::std::istream& is,
                              xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    users_setStatus_response (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    users_setStatus_response (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    users_setStatus_response (::std::istream& is,
                              const ::std::string& id,
                              xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    users_setStatus_response (xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    users_setStatus_response (xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    users_setStatus_response (xercesc::InputSource& is,
                              xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    users_setStatus_response (const xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    users_setStatus_response (xercesc::DOMDocument* d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::pages_getInfo_response >
    pages_getInfo_response_ (const ::std::string& uri,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::pages_getInfo_response >
    pages_getInfo_response_ (const ::std::string& uri,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::pages_getInfo_response >
    pages_getInfo_response_ (const ::std::string& uri,
                             xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::pages_getInfo_response >
    pages_getInfo_response_ (::std::istream& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::pages_getInfo_response >
    pages_getInfo_response_ (::std::istream& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::pages_getInfo_response >
    pages_getInfo_response_ (::std::istream& is,
                             xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::pages_getInfo_response >
    pages_getInfo_response_ (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::pages_getInfo_response >
    pages_getInfo_response_ (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::pages_getInfo_response >
    pages_getInfo_response_ (::std::istream& is,
                             const ::std::string& id,
                             xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::pages_getInfo_response >
    pages_getInfo_response_ (xercesc::InputSource& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::pages_getInfo_response >
    pages_getInfo_response_ (xercesc::InputSource& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::pages_getInfo_response >
    pages_getInfo_response_ (xercesc::InputSource& is,
                             xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::pages_getInfo_response >
    pages_getInfo_response_ (const xercesc::DOMDocument& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::pages_getInfo_response >
    pages_getInfo_response_ (xercesc::DOMDocument* d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isAdmin_response (const ::std::string& uri,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isAdmin_response (const ::std::string& uri,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isAdmin_response (const ::std::string& uri,
                            xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isAdmin_response (::std::istream& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isAdmin_response (::std::istream& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isAdmin_response (::std::istream& is,
                            xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isAdmin_response (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isAdmin_response (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isAdmin_response (::std::istream& is,
                            const ::std::string& id,
                            xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isAdmin_response (xercesc::InputSource& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isAdmin_response (xercesc::InputSource& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isAdmin_response (xercesc::InputSource& is,
                            xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isAdmin_response (const xercesc::DOMDocument& d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isAdmin_response (xercesc::DOMDocument* d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isFan_response (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isFan_response (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isFan_response (const ::std::string& uri,
                          xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isFan_response (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isFan_response (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isFan_response (::std::istream& is,
                          xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isFan_response (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isFan_response (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isFan_response (::std::istream& is,
                          const ::std::string& id,
                          xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isFan_response (xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isFan_response (xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isFan_response (xercesc::InputSource& is,
                          xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isFan_response (const xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isFan_response (xercesc::DOMDocument* d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isAppAdded_response (const ::std::string& uri,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isAppAdded_response (const ::std::string& uri,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isAppAdded_response (const ::std::string& uri,
                               xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isAppAdded_response (::std::istream& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isAppAdded_response (::std::istream& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isAppAdded_response (::std::istream& is,
                               xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isAppAdded_response (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isAppAdded_response (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isAppAdded_response (::std::istream& is,
                               const ::std::string& id,
                               xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isAppAdded_response (xercesc::InputSource& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isAppAdded_response (xercesc::InputSource& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isAppAdded_response (xercesc::InputSource& is,
                               xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isAppAdded_response (const xercesc::DOMDocument& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    pages_isAppAdded_response (xercesc::DOMDocument* d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setUserPreference_response (const ::std::string& uri,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setUserPreference_response (const ::std::string& uri,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setUserPreference_response (const ::std::string& uri,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setUserPreference_response (::std::istream& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setUserPreference_response (::std::istream& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setUserPreference_response (::std::istream& is,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setUserPreference_response (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setUserPreference_response (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setUserPreference_response (::std::istream& is,
                                     const ::std::string& id,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setUserPreference_response (xercesc::InputSource& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setUserPreference_response (xercesc::InputSource& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setUserPreference_response (xercesc::InputSource& is,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setUserPreference_response (const xercesc::DOMDocument& d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setUserPreference_response (xercesc::DOMDocument* d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setUserPreferences_response (const ::std::string& uri,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setUserPreferences_response (const ::std::string& uri,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setUserPreferences_response (const ::std::string& uri,
                                      xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setUserPreferences_response (::std::istream& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setUserPreferences_response (::std::istream& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setUserPreferences_response (::std::istream& is,
                                      xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setUserPreferences_response (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setUserPreferences_response (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setUserPreferences_response (::std::istream& is,
                                      const ::std::string& id,
                                      xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setUserPreferences_response (xercesc::InputSource& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setUserPreferences_response (xercesc::InputSource& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setUserPreferences_response (xercesc::InputSource& is,
                                      xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setUserPreferences_response (const xercesc::DOMDocument& d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setUserPreferences_response (xercesc::DOMDocument* d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::string >
    data_getUserPreference_response (const ::std::string& uri,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    data_getUserPreference_response (const ::std::string& uri,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    data_getUserPreference_response (const ::std::string& uri,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::string >
    data_getUserPreference_response (::std::istream& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    data_getUserPreference_response (::std::istream& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    data_getUserPreference_response (::std::istream& is,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    data_getUserPreference_response (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    data_getUserPreference_response (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    data_getUserPreference_response (::std::istream& is,
                                     const ::std::string& id,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::string >
    data_getUserPreference_response (xercesc::InputSource& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    data_getUserPreference_response (xercesc::InputSource& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    data_getUserPreference_response (xercesc::InputSource& is,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::string >
    data_getUserPreference_response (const xercesc::DOMDocument& d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    data_getUserPreference_response (xercesc::DOMDocument* d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getUserPreferences_response >
    data_getUserPreferences_response_ (const ::std::string& uri,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getUserPreferences_response >
    data_getUserPreferences_response_ (const ::std::string& uri,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getUserPreferences_response >
    data_getUserPreferences_response_ (const ::std::string& uri,
                                       xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getUserPreferences_response >
    data_getUserPreferences_response_ (::std::istream& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getUserPreferences_response >
    data_getUserPreferences_response_ (::std::istream& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getUserPreferences_response >
    data_getUserPreferences_response_ (::std::istream& is,
                                       xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getUserPreferences_response >
    data_getUserPreferences_response_ (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getUserPreferences_response >
    data_getUserPreferences_response_ (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getUserPreferences_response >
    data_getUserPreferences_response_ (::std::istream& is,
                                       const ::std::string& id,
                                       xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getUserPreferences_response >
    data_getUserPreferences_response_ (xercesc::InputSource& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getUserPreferences_response >
    data_getUserPreferences_response_ (xercesc::InputSource& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getUserPreferences_response >
    data_getUserPreferences_response_ (xercesc::InputSource& is,
                                       xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getUserPreferences_response >
    data_getUserPreferences_response_ (const xercesc::DOMDocument& d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getUserPreferences_response >
    data_getUserPreferences_response_ (xercesc::DOMDocument* d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_createObjectType_response (const ::std::string& uri,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_createObjectType_response (const ::std::string& uri,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_createObjectType_response (const ::std::string& uri,
                                    xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_createObjectType_response (::std::istream& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_createObjectType_response (::std::istream& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_createObjectType_response (::std::istream& is,
                                    xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_createObjectType_response (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_createObjectType_response (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_createObjectType_response (::std::istream& is,
                                    const ::std::string& id,
                                    xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_createObjectType_response (xercesc::InputSource& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_createObjectType_response (xercesc::InputSource& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_createObjectType_response (xercesc::InputSource& is,
                                    xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_createObjectType_response (const xercesc::DOMDocument& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_createObjectType_response (xercesc::DOMDocument* d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_dropObjectType_response (const ::std::string& uri,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_dropObjectType_response (const ::std::string& uri,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_dropObjectType_response (const ::std::string& uri,
                                  xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_dropObjectType_response (::std::istream& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_dropObjectType_response (::std::istream& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_dropObjectType_response (::std::istream& is,
                                  xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_dropObjectType_response (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_dropObjectType_response (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_dropObjectType_response (::std::istream& is,
                                  const ::std::string& id,
                                  xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_dropObjectType_response (xercesc::InputSource& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_dropObjectType_response (xercesc::InputSource& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_dropObjectType_response (xercesc::InputSource& is,
                                  xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_dropObjectType_response (const xercesc::DOMDocument& d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_dropObjectType_response (xercesc::DOMDocument* d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameObjectType_response (const ::std::string& uri,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameObjectType_response (const ::std::string& uri,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameObjectType_response (const ::std::string& uri,
                                    xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameObjectType_response (::std::istream& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameObjectType_response (::std::istream& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameObjectType_response (::std::istream& is,
                                    xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameObjectType_response (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameObjectType_response (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameObjectType_response (::std::istream& is,
                                    const ::std::string& id,
                                    xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameObjectType_response (xercesc::InputSource& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameObjectType_response (xercesc::InputSource& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameObjectType_response (xercesc::InputSource& is,
                                    xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameObjectType_response (const xercesc::DOMDocument& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameObjectType_response (xercesc::DOMDocument* d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_defineObjectProperty_response (const ::std::string& uri,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_defineObjectProperty_response (const ::std::string& uri,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_defineObjectProperty_response (const ::std::string& uri,
                                        xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_defineObjectProperty_response (::std::istream& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_defineObjectProperty_response (::std::istream& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_defineObjectProperty_response (::std::istream& is,
                                        xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_defineObjectProperty_response (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_defineObjectProperty_response (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_defineObjectProperty_response (::std::istream& is,
                                        const ::std::string& id,
                                        xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_defineObjectProperty_response (xercesc::InputSource& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_defineObjectProperty_response (xercesc::InputSource& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_defineObjectProperty_response (xercesc::InputSource& is,
                                        xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_defineObjectProperty_response (const xercesc::DOMDocument& d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_defineObjectProperty_response (xercesc::DOMDocument* d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_undefineObjectProperty_response (const ::std::string& uri,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_undefineObjectProperty_response (const ::std::string& uri,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_undefineObjectProperty_response (const ::std::string& uri,
                                          xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_undefineObjectProperty_response (::std::istream& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_undefineObjectProperty_response (::std::istream& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_undefineObjectProperty_response (::std::istream& is,
                                          xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_undefineObjectProperty_response (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_undefineObjectProperty_response (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_undefineObjectProperty_response (::std::istream& is,
                                          const ::std::string& id,
                                          xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_undefineObjectProperty_response (xercesc::InputSource& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_undefineObjectProperty_response (xercesc::InputSource& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_undefineObjectProperty_response (xercesc::InputSource& is,
                                          xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_undefineObjectProperty_response (const xercesc::DOMDocument& d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_undefineObjectProperty_response (xercesc::DOMDocument* d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameObjectProperty_response (const ::std::string& uri,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameObjectProperty_response (const ::std::string& uri,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameObjectProperty_response (const ::std::string& uri,
                                        xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameObjectProperty_response (::std::istream& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameObjectProperty_response (::std::istream& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameObjectProperty_response (::std::istream& is,
                                        xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameObjectProperty_response (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameObjectProperty_response (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameObjectProperty_response (::std::istream& is,
                                        const ::std::string& id,
                                        xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameObjectProperty_response (xercesc::InputSource& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameObjectProperty_response (xercesc::InputSource& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameObjectProperty_response (xercesc::InputSource& is,
                                        xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameObjectProperty_response (const xercesc::DOMDocument& d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameObjectProperty_response (xercesc::DOMDocument* d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjectTypes_response >
    data_getObjectTypes_response_ (const ::std::string& uri,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjectTypes_response >
    data_getObjectTypes_response_ (const ::std::string& uri,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjectTypes_response >
    data_getObjectTypes_response_ (const ::std::string& uri,
                                   xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjectTypes_response >
    data_getObjectTypes_response_ (::std::istream& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjectTypes_response >
    data_getObjectTypes_response_ (::std::istream& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjectTypes_response >
    data_getObjectTypes_response_ (::std::istream& is,
                                   xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjectTypes_response >
    data_getObjectTypes_response_ (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjectTypes_response >
    data_getObjectTypes_response_ (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjectTypes_response >
    data_getObjectTypes_response_ (::std::istream& is,
                                   const ::std::string& id,
                                   xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjectTypes_response >
    data_getObjectTypes_response_ (xercesc::InputSource& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjectTypes_response >
    data_getObjectTypes_response_ (xercesc::InputSource& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjectTypes_response >
    data_getObjectTypes_response_ (xercesc::InputSource& is,
                                   xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjectTypes_response >
    data_getObjectTypes_response_ (const xercesc::DOMDocument& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjectTypes_response >
    data_getObjectTypes_response_ (xercesc::DOMDocument* d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjectType_response >
    data_getObjectType_response_ (const ::std::string& uri,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjectType_response >
    data_getObjectType_response_ (const ::std::string& uri,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjectType_response >
    data_getObjectType_response_ (const ::std::string& uri,
                                  xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjectType_response >
    data_getObjectType_response_ (::std::istream& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjectType_response >
    data_getObjectType_response_ (::std::istream& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjectType_response >
    data_getObjectType_response_ (::std::istream& is,
                                  xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjectType_response >
    data_getObjectType_response_ (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjectType_response >
    data_getObjectType_response_ (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjectType_response >
    data_getObjectType_response_ (::std::istream& is,
                                  const ::std::string& id,
                                  xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjectType_response >
    data_getObjectType_response_ (xercesc::InputSource& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjectType_response >
    data_getObjectType_response_ (xercesc::InputSource& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjectType_response >
    data_getObjectType_response_ (xercesc::InputSource& is,
                                  xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjectType_response >
    data_getObjectType_response_ (const xercesc::DOMDocument& d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjectType_response >
    data_getObjectType_response_ (xercesc::DOMDocument* d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::long_ >
    data_createObject_response (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::long_ >
    data_createObject_response (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::long_ >
    data_createObject_response (const ::std::string& uri,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::long_ >
    data_createObject_response (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::long_ >
    data_createObject_response (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::long_ >
    data_createObject_response (::std::istream& is,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::long_ >
    data_createObject_response (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::long_ >
    data_createObject_response (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::long_ >
    data_createObject_response (::std::istream& is,
                                const ::std::string& id,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::long_ >
    data_createObject_response (xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::long_ >
    data_createObject_response (xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::long_ >
    data_createObject_response (xercesc::InputSource& is,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::long_ >
    data_createObject_response (const xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::long_ >
    data_createObject_response (xercesc::DOMDocument* d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_updateObject_response (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_updateObject_response (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_updateObject_response (const ::std::string& uri,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_updateObject_response (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_updateObject_response (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_updateObject_response (::std::istream& is,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_updateObject_response (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_updateObject_response (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_updateObject_response (::std::istream& is,
                                const ::std::string& id,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_updateObject_response (xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_updateObject_response (xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_updateObject_response (xercesc::InputSource& is,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_updateObject_response (const xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_updateObject_response (xercesc::DOMDocument* d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_deleteObject_response (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_deleteObject_response (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_deleteObject_response (const ::std::string& uri,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_deleteObject_response (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_deleteObject_response (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_deleteObject_response (::std::istream& is,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_deleteObject_response (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_deleteObject_response (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_deleteObject_response (::std::istream& is,
                                const ::std::string& id,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_deleteObject_response (xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_deleteObject_response (xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_deleteObject_response (xercesc::InputSource& is,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_deleteObject_response (const xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_deleteObject_response (xercesc::DOMDocument* d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_deleteObjects_response (const ::std::string& uri,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_deleteObjects_response (const ::std::string& uri,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_deleteObjects_response (const ::std::string& uri,
                                 xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_deleteObjects_response (::std::istream& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_deleteObjects_response (::std::istream& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_deleteObjects_response (::std::istream& is,
                                 xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_deleteObjects_response (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_deleteObjects_response (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_deleteObjects_response (::std::istream& is,
                                 const ::std::string& id,
                                 xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_deleteObjects_response (xercesc::InputSource& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_deleteObjects_response (xercesc::InputSource& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_deleteObjects_response (xercesc::InputSource& is,
                                 xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_deleteObjects_response (const xercesc::DOMDocument& d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_deleteObjects_response (xercesc::DOMDocument* d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::container >
    data_getObject_response (const ::std::string& uri,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::container >
    data_getObject_response (const ::std::string& uri,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::container >
    data_getObject_response (const ::std::string& uri,
                             xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::container >
    data_getObject_response (::std::istream& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::container >
    data_getObject_response (::std::istream& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::container >
    data_getObject_response (::std::istream& is,
                             xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::container >
    data_getObject_response (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::container >
    data_getObject_response (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::container >
    data_getObject_response (::std::istream& is,
                             const ::std::string& id,
                             xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::container >
    data_getObject_response (xercesc::InputSource& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::container >
    data_getObject_response (xercesc::InputSource& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::container >
    data_getObject_response (xercesc::InputSource& is,
                             xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::container >
    data_getObject_response (const xercesc::DOMDocument& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::container >
    data_getObject_response (xercesc::DOMDocument* d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjects_response >
    data_getObjects_response_ (const ::std::string& uri,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjects_response >
    data_getObjects_response_ (const ::std::string& uri,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjects_response >
    data_getObjects_response_ (const ::std::string& uri,
                               xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjects_response >
    data_getObjects_response_ (::std::istream& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjects_response >
    data_getObjects_response_ (::std::istream& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjects_response >
    data_getObjects_response_ (::std::istream& is,
                               xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjects_response >
    data_getObjects_response_ (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjects_response >
    data_getObjects_response_ (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjects_response >
    data_getObjects_response_ (::std::istream& is,
                               const ::std::string& id,
                               xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjects_response >
    data_getObjects_response_ (xercesc::InputSource& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjects_response >
    data_getObjects_response_ (xercesc::InputSource& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjects_response >
    data_getObjects_response_ (xercesc::InputSource& is,
                               xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjects_response >
    data_getObjects_response_ (const xercesc::DOMDocument& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getObjects_response >
    data_getObjects_response_ (xercesc::DOMDocument* d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::string >
    data_getObjectProperty_response (const ::std::string& uri,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    data_getObjectProperty_response (const ::std::string& uri,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    data_getObjectProperty_response (const ::std::string& uri,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::string >
    data_getObjectProperty_response (::std::istream& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    data_getObjectProperty_response (::std::istream& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    data_getObjectProperty_response (::std::istream& is,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    data_getObjectProperty_response (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    data_getObjectProperty_response (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    data_getObjectProperty_response (::std::istream& is,
                                     const ::std::string& id,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::string >
    data_getObjectProperty_response (xercesc::InputSource& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    data_getObjectProperty_response (xercesc::InputSource& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    data_getObjectProperty_response (xercesc::InputSource& is,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::string >
    data_getObjectProperty_response (const xercesc::DOMDocument& d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    data_getObjectProperty_response (xercesc::DOMDocument* d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setObjectProperty_response (const ::std::string& uri,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setObjectProperty_response (const ::std::string& uri,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setObjectProperty_response (const ::std::string& uri,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setObjectProperty_response (::std::istream& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setObjectProperty_response (::std::istream& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setObjectProperty_response (::std::istream& is,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setObjectProperty_response (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setObjectProperty_response (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setObjectProperty_response (::std::istream& is,
                                     const ::std::string& id,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setObjectProperty_response (xercesc::InputSource& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setObjectProperty_response (xercesc::InputSource& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setObjectProperty_response (xercesc::InputSource& is,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setObjectProperty_response (const xercesc::DOMDocument& d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setObjectProperty_response (xercesc::DOMDocument* d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::string >
    data_getHashValue_response (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    data_getHashValue_response (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    data_getHashValue_response (const ::std::string& uri,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::string >
    data_getHashValue_response (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    data_getHashValue_response (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    data_getHashValue_response (::std::istream& is,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    data_getHashValue_response (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    data_getHashValue_response (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    data_getHashValue_response (::std::istream& is,
                                const ::std::string& id,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::string >
    data_getHashValue_response (xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    data_getHashValue_response (xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    data_getHashValue_response (xercesc::InputSource& is,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::string >
    data_getHashValue_response (const xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    data_getHashValue_response (xercesc::DOMDocument* d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::long_ >
    data_setHashValue_response (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::long_ >
    data_setHashValue_response (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::long_ >
    data_setHashValue_response (const ::std::string& uri,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::long_ >
    data_setHashValue_response (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::long_ >
    data_setHashValue_response (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::long_ >
    data_setHashValue_response (::std::istream& is,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::long_ >
    data_setHashValue_response (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::long_ >
    data_setHashValue_response (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::long_ >
    data_setHashValue_response (::std::istream& is,
                                const ::std::string& id,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::long_ >
    data_setHashValue_response (xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::long_ >
    data_setHashValue_response (xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::long_ >
    data_setHashValue_response (xercesc::InputSource& is,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::long_ >
    data_setHashValue_response (const xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::long_ >
    data_setHashValue_response (xercesc::DOMDocument* d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::int_ >
    data_incHashValue_response (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::int_ >
    data_incHashValue_response (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::int_ >
    data_incHashValue_response (const ::std::string& uri,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::int_ >
    data_incHashValue_response (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::int_ >
    data_incHashValue_response (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::int_ >
    data_incHashValue_response (::std::istream& is,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::int_ >
    data_incHashValue_response (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::int_ >
    data_incHashValue_response (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::int_ >
    data_incHashValue_response (::std::istream& is,
                                const ::std::string& id,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::int_ >
    data_incHashValue_response (xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::int_ >
    data_incHashValue_response (xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::int_ >
    data_incHashValue_response (xercesc::InputSource& is,
                                xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::int_ >
    data_incHashValue_response (const xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::int_ >
    data_incHashValue_response (xercesc::DOMDocument* d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeHashKey_response (const ::std::string& uri,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeHashKey_response (const ::std::string& uri,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeHashKey_response (const ::std::string& uri,
                                 xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeHashKey_response (::std::istream& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeHashKey_response (::std::istream& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeHashKey_response (::std::istream& is,
                                 xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeHashKey_response (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeHashKey_response (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeHashKey_response (::std::istream& is,
                                 const ::std::string& id,
                                 xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeHashKey_response (xercesc::InputSource& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeHashKey_response (xercesc::InputSource& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeHashKey_response (xercesc::InputSource& is,
                                 xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeHashKey_response (const xercesc::DOMDocument& d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeHashKey_response (xercesc::DOMDocument* d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeHashKeys_response (const ::std::string& uri,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeHashKeys_response (const ::std::string& uri,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeHashKeys_response (const ::std::string& uri,
                                  xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeHashKeys_response (::std::istream& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeHashKeys_response (::std::istream& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeHashKeys_response (::std::istream& is,
                                  xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeHashKeys_response (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeHashKeys_response (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeHashKeys_response (::std::istream& is,
                                  const ::std::string& id,
                                  xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeHashKeys_response (xercesc::InputSource& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeHashKeys_response (xercesc::InputSource& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeHashKeys_response (xercesc::InputSource& is,
                                  xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeHashKeys_response (const xercesc::DOMDocument& d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeHashKeys_response (xercesc::DOMDocument* d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_defineAssociation_response (const ::std::string& uri,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_defineAssociation_response (const ::std::string& uri,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_defineAssociation_response (const ::std::string& uri,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_defineAssociation_response (::std::istream& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_defineAssociation_response (::std::istream& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_defineAssociation_response (::std::istream& is,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_defineAssociation_response (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_defineAssociation_response (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_defineAssociation_response (::std::istream& is,
                                     const ::std::string& id,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_defineAssociation_response (xercesc::InputSource& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_defineAssociation_response (xercesc::InputSource& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_defineAssociation_response (xercesc::InputSource& is,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_defineAssociation_response (const xercesc::DOMDocument& d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_defineAssociation_response (xercesc::DOMDocument* d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_undefineAssociation_response (const ::std::string& uri,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_undefineAssociation_response (const ::std::string& uri,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_undefineAssociation_response (const ::std::string& uri,
                                       xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_undefineAssociation_response (::std::istream& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_undefineAssociation_response (::std::istream& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_undefineAssociation_response (::std::istream& is,
                                       xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_undefineAssociation_response (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_undefineAssociation_response (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_undefineAssociation_response (::std::istream& is,
                                       const ::std::string& id,
                                       xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_undefineAssociation_response (xercesc::InputSource& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_undefineAssociation_response (xercesc::InputSource& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_undefineAssociation_response (xercesc::InputSource& is,
                                       xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_undefineAssociation_response (const xercesc::DOMDocument& d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_undefineAssociation_response (xercesc::DOMDocument* d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameAssociation_response (const ::std::string& uri,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameAssociation_response (const ::std::string& uri,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameAssociation_response (const ::std::string& uri,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameAssociation_response (::std::istream& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameAssociation_response (::std::istream& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameAssociation_response (::std::istream& is,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameAssociation_response (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameAssociation_response (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameAssociation_response (::std::istream& is,
                                     const ::std::string& id,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameAssociation_response (xercesc::InputSource& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameAssociation_response (xercesc::InputSource& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameAssociation_response (xercesc::InputSource& is,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameAssociation_response (const xercesc::DOMDocument& d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_renameAssociation_response (xercesc::DOMDocument* d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::object_assoc_info >
    data_getAssociationDefinition_response (const ::std::string& uri,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::object_assoc_info >
    data_getAssociationDefinition_response (const ::std::string& uri,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::object_assoc_info >
    data_getAssociationDefinition_response (const ::std::string& uri,
                                            xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::object_assoc_info >
    data_getAssociationDefinition_response (::std::istream& is,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::object_assoc_info >
    data_getAssociationDefinition_response (::std::istream& is,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::object_assoc_info >
    data_getAssociationDefinition_response (::std::istream& is,
                                            xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::object_assoc_info >
    data_getAssociationDefinition_response (::std::istream& is,
                                            const ::std::string& id,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::object_assoc_info >
    data_getAssociationDefinition_response (::std::istream& is,
                                            const ::std::string& id,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::object_assoc_info >
    data_getAssociationDefinition_response (::std::istream& is,
                                            const ::std::string& id,
                                            xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::object_assoc_info >
    data_getAssociationDefinition_response (xercesc::InputSource& is,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::object_assoc_info >
    data_getAssociationDefinition_response (xercesc::InputSource& is,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::object_assoc_info >
    data_getAssociationDefinition_response (xercesc::InputSource& is,
                                            xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::object_assoc_info >
    data_getAssociationDefinition_response (const xercesc::DOMDocument& d,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::object_assoc_info >
    data_getAssociationDefinition_response (xercesc::DOMDocument* d,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociationDefinitions_response >
    data_getAssociationDefinitions_response_ (const ::std::string& uri,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociationDefinitions_response >
    data_getAssociationDefinitions_response_ (const ::std::string& uri,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociationDefinitions_response >
    data_getAssociationDefinitions_response_ (const ::std::string& uri,
                                              xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociationDefinitions_response >
    data_getAssociationDefinitions_response_ (::std::istream& is,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociationDefinitions_response >
    data_getAssociationDefinitions_response_ (::std::istream& is,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociationDefinitions_response >
    data_getAssociationDefinitions_response_ (::std::istream& is,
                                              xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociationDefinitions_response >
    data_getAssociationDefinitions_response_ (::std::istream& is,
                                              const ::std::string& id,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociationDefinitions_response >
    data_getAssociationDefinitions_response_ (::std::istream& is,
                                              const ::std::string& id,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociationDefinitions_response >
    data_getAssociationDefinitions_response_ (::std::istream& is,
                                              const ::std::string& id,
                                              xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociationDefinitions_response >
    data_getAssociationDefinitions_response_ (xercesc::InputSource& is,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociationDefinitions_response >
    data_getAssociationDefinitions_response_ (xercesc::InputSource& is,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociationDefinitions_response >
    data_getAssociationDefinitions_response_ (xercesc::InputSource& is,
                                              xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociationDefinitions_response >
    data_getAssociationDefinitions_response_ (const xercesc::DOMDocument& d,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociationDefinitions_response >
    data_getAssociationDefinitions_response_ (xercesc::DOMDocument* d,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setAssociation_response (const ::std::string& uri,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setAssociation_response (const ::std::string& uri,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setAssociation_response (const ::std::string& uri,
                                  xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setAssociation_response (::std::istream& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setAssociation_response (::std::istream& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setAssociation_response (::std::istream& is,
                                  xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setAssociation_response (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setAssociation_response (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setAssociation_response (::std::istream& is,
                                  const ::std::string& id,
                                  xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setAssociation_response (xercesc::InputSource& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setAssociation_response (xercesc::InputSource& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setAssociation_response (xercesc::InputSource& is,
                                  xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setAssociation_response (const xercesc::DOMDocument& d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setAssociation_response (xercesc::DOMDocument* d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setAssociations_response (const ::std::string& uri,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setAssociations_response (const ::std::string& uri,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setAssociations_response (const ::std::string& uri,
                                   xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setAssociations_response (::std::istream& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setAssociations_response (::std::istream& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setAssociations_response (::std::istream& is,
                                   xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setAssociations_response (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setAssociations_response (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setAssociations_response (::std::istream& is,
                                   const ::std::string& id,
                                   xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setAssociations_response (xercesc::InputSource& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setAssociations_response (xercesc::InputSource& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setAssociations_response (xercesc::InputSource& is,
                                   xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setAssociations_response (const xercesc::DOMDocument& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_setAssociations_response (xercesc::DOMDocument* d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociation_response (const ::std::string& uri,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociation_response (const ::std::string& uri,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociation_response (const ::std::string& uri,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociation_response (::std::istream& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociation_response (::std::istream& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociation_response (::std::istream& is,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociation_response (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociation_response (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociation_response (::std::istream& is,
                                     const ::std::string& id,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociation_response (xercesc::InputSource& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociation_response (xercesc::InputSource& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociation_response (xercesc::InputSource& is,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociation_response (const xercesc::DOMDocument& d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociation_response (xercesc::DOMDocument* d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociations_response (const ::std::string& uri,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociations_response (const ::std::string& uri,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociations_response (const ::std::string& uri,
                                      xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociations_response (::std::istream& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociations_response (::std::istream& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociations_response (::std::istream& is,
                                      xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociations_response (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociations_response (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociations_response (::std::istream& is,
                                      const ::std::string& id,
                                      xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociations_response (xercesc::InputSource& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociations_response (xercesc::InputSource& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociations_response (xercesc::InputSource& is,
                                      xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociations_response (const xercesc::DOMDocument& d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociations_response (xercesc::DOMDocument* d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociatedObjects_response (const ::std::string& uri,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociatedObjects_response (const ::std::string& uri,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociatedObjects_response (const ::std::string& uri,
                                           xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociatedObjects_response (::std::istream& is,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociatedObjects_response (::std::istream& is,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociatedObjects_response (::std::istream& is,
                                           xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociatedObjects_response (::std::istream& is,
                                           const ::std::string& id,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociatedObjects_response (::std::istream& is,
                                           const ::std::string& id,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociatedObjects_response (::std::istream& is,
                                           const ::std::string& id,
                                           xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociatedObjects_response (xercesc::InputSource& is,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociatedObjects_response (xercesc::InputSource& is,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociatedObjects_response (xercesc::InputSource& is,
                                           xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociatedObjects_response (const xercesc::DOMDocument& d,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    data_removeAssociatedObjects_response (xercesc::DOMDocument* d,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociatedObjects_response >
    data_getAssociatedObjects_response_ (const ::std::string& uri,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociatedObjects_response >
    data_getAssociatedObjects_response_ (const ::std::string& uri,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociatedObjects_response >
    data_getAssociatedObjects_response_ (const ::std::string& uri,
                                         xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociatedObjects_response >
    data_getAssociatedObjects_response_ (::std::istream& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociatedObjects_response >
    data_getAssociatedObjects_response_ (::std::istream& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociatedObjects_response >
    data_getAssociatedObjects_response_ (::std::istream& is,
                                         xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociatedObjects_response >
    data_getAssociatedObjects_response_ (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociatedObjects_response >
    data_getAssociatedObjects_response_ (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociatedObjects_response >
    data_getAssociatedObjects_response_ (::std::istream& is,
                                         const ::std::string& id,
                                         xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociatedObjects_response >
    data_getAssociatedObjects_response_ (xercesc::InputSource& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociatedObjects_response >
    data_getAssociatedObjects_response_ (xercesc::InputSource& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociatedObjects_response >
    data_getAssociatedObjects_response_ (xercesc::InputSource& is,
                                         xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociatedObjects_response >
    data_getAssociatedObjects_response_ (const xercesc::DOMDocument& d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociatedObjects_response >
    data_getAssociatedObjects_response_ (xercesc::DOMDocument* d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::int_ >
    data_getAssociatedObjectCount_response (const ::std::string& uri,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::int_ >
    data_getAssociatedObjectCount_response (const ::std::string& uri,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::int_ >
    data_getAssociatedObjectCount_response (const ::std::string& uri,
                                            xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::int_ >
    data_getAssociatedObjectCount_response (::std::istream& is,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::int_ >
    data_getAssociatedObjectCount_response (::std::istream& is,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::int_ >
    data_getAssociatedObjectCount_response (::std::istream& is,
                                            xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::int_ >
    data_getAssociatedObjectCount_response (::std::istream& is,
                                            const ::std::string& id,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::int_ >
    data_getAssociatedObjectCount_response (::std::istream& is,
                                            const ::std::string& id,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::int_ >
    data_getAssociatedObjectCount_response (::std::istream& is,
                                            const ::std::string& id,
                                            xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::int_ >
    data_getAssociatedObjectCount_response (xercesc::InputSource& is,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::int_ >
    data_getAssociatedObjectCount_response (xercesc::InputSource& is,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::int_ >
    data_getAssociatedObjectCount_response (xercesc::InputSource& is,
                                            xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::int_ >
    data_getAssociatedObjectCount_response (const xercesc::DOMDocument& d,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::int_ >
    data_getAssociatedObjectCount_response (xercesc::DOMDocument* d,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociatedObjectCounts_response >
    data_getAssociatedObjectCounts_response_ (const ::std::string& uri,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociatedObjectCounts_response >
    data_getAssociatedObjectCounts_response_ (const ::std::string& uri,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociatedObjectCounts_response >
    data_getAssociatedObjectCounts_response_ (const ::std::string& uri,
                                              xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociatedObjectCounts_response >
    data_getAssociatedObjectCounts_response_ (::std::istream& is,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociatedObjectCounts_response >
    data_getAssociatedObjectCounts_response_ (::std::istream& is,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociatedObjectCounts_response >
    data_getAssociatedObjectCounts_response_ (::std::istream& is,
                                              xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociatedObjectCounts_response >
    data_getAssociatedObjectCounts_response_ (::std::istream& is,
                                              const ::std::string& id,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociatedObjectCounts_response >
    data_getAssociatedObjectCounts_response_ (::std::istream& is,
                                              const ::std::string& id,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociatedObjectCounts_response >
    data_getAssociatedObjectCounts_response_ (::std::istream& is,
                                              const ::std::string& id,
                                              xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociatedObjectCounts_response >
    data_getAssociatedObjectCounts_response_ (xercesc::InputSource& is,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociatedObjectCounts_response >
    data_getAssociatedObjectCounts_response_ (xercesc::InputSource& is,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociatedObjectCounts_response >
    data_getAssociatedObjectCounts_response_ (xercesc::InputSource& is,
                                              xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociatedObjectCounts_response >
    data_getAssociatedObjectCounts_response_ (const xercesc::DOMDocument& d,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociatedObjectCounts_response >
    data_getAssociatedObjectCounts_response_ (xercesc::DOMDocument* d,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociations_response >
    data_getAssociations_response_ (const ::std::string& uri,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociations_response >
    data_getAssociations_response_ (const ::std::string& uri,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociations_response >
    data_getAssociations_response_ (const ::std::string& uri,
                                    xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociations_response >
    data_getAssociations_response_ (::std::istream& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociations_response >
    data_getAssociations_response_ (::std::istream& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociations_response >
    data_getAssociations_response_ (::std::istream& is,
                                    xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociations_response >
    data_getAssociations_response_ (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociations_response >
    data_getAssociations_response_ (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociations_response >
    data_getAssociations_response_ (::std::istream& is,
                                    const ::std::string& id,
                                    xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociations_response >
    data_getAssociations_response_ (xercesc::InputSource& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociations_response >
    data_getAssociations_response_ (xercesc::InputSource& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociations_response >
    data_getAssociations_response_ (xercesc::InputSource& is,
                                    xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociations_response >
    data_getAssociations_response_ (const xercesc::DOMDocument& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::data_getAssociations_response >
    data_getAssociations_response_ (xercesc::DOMDocument* d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::string >
    admin_getAppProperties_response (const ::std::string& uri,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    admin_getAppProperties_response (const ::std::string& uri,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    admin_getAppProperties_response (const ::std::string& uri,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::string >
    admin_getAppProperties_response (::std::istream& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    admin_getAppProperties_response (::std::istream& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    admin_getAppProperties_response (::std::istream& is,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    admin_getAppProperties_response (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    admin_getAppProperties_response (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    admin_getAppProperties_response (::std::istream& is,
                                     const ::std::string& id,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::string >
    admin_getAppProperties_response (xercesc::InputSource& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    admin_getAppProperties_response (xercesc::InputSource& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    admin_getAppProperties_response (xercesc::InputSource& is,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::string >
    admin_getAppProperties_response (const xercesc::DOMDocument& d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    admin_getAppProperties_response (xercesc::DOMDocument* d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    admin_setAppProperties_response (const ::std::string& uri,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    admin_setAppProperties_response (const ::std::string& uri,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    admin_setAppProperties_response (const ::std::string& uri,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    admin_setAppProperties_response (::std::istream& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    admin_setAppProperties_response (::std::istream& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    admin_setAppProperties_response (::std::istream& is,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    admin_setAppProperties_response (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    admin_setAppProperties_response (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    admin_setAppProperties_response (::std::istream& is,
                                     const ::std::string& id,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    admin_setAppProperties_response (xercesc::InputSource& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    admin_setAppProperties_response (xercesc::InputSource& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    admin_setAppProperties_response (xercesc::InputSource& is,
                                     xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::boolean >
    admin_setAppProperties_response (const xercesc::DOMDocument& d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::boolean >
    admin_setAppProperties_response (xercesc::DOMDocument* d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::FacebookApiException >
    error_response (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::FacebookApiException >
    error_response (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::FacebookApiException >
    error_response (const ::std::string& uri,
                    xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::FacebookApiException >
    error_response (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::FacebookApiException >
    error_response (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::FacebookApiException >
    error_response (::std::istream& is,
                    xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::FacebookApiException >
    error_response (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::FacebookApiException >
    error_response (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::FacebookApiException >
    error_response (::std::istream& is,
                    const ::std::string& id,
                    xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::FacebookApiException >
    error_response (xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::FacebookApiException >
    error_response (xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::FacebookApiException >
    error_response (xercesc::InputSource& is,
                    xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::FacebookCpp::XSD::FacebookApiException >
    error_response (const xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::FacebookCpp::XSD::FacebookApiException >
    error_response (xercesc::DOMDocument* d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // FACEBOOK_HXX
